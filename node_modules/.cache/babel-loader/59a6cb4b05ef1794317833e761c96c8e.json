{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\pages\\\\products\\\\modal\\\\tab\\\\group\\\\groupModal.js\";\nimport React, { useState } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Row, Col } from \"reactstrap\";\nimport GroupTabContent from \"../../../../group/subGroupMenuNew\";\nimport Translate from \"../../../../../../Translate\";\nimport { default as Icon, List } from \"react-feather\";\nimport * as MyIcon from 'react-feather';\n\nvar ModalExample = function ModalExample(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modal = _useState2[0],\n      setModal = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectStatus = _useState4[0],\n      setSelectStatus = _useState4[1];\n\n  var toggle = function toggle() {\n    setModal(!modal);\n    props.getSubGroups(props.group);\n  };\n\n  var setItems = function setItems(data) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = props.data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n\n        if (parseInt(data.parent_id) === parseInt(item.id)) {\n          // return `${setItems(item) ? setItems(item) : null} > ${item.name}`\n          return setItems(item) ? \"\".concat(item.name, \" < \").concat(setItems(item)) : \"\".concat(item.name);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  };\n\n  var roadRender = function roadRender(data, name) {\n    var obj;\n    var arrayRoadItems;\n\n    if (data && data.id && data.name) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = props.data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n\n          if (item.id === data.id) {\n            obj = item;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      arrayRoadItems = setItems(obj);\n\n      if (arrayRoadItems) {\n        return obj.name.concat(\" < \".concat(arrayRoadItems));\n      } else {\n        return obj.name;\n      }\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: \"11\",\n    className: \"mr-0 mb-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"text\",\n    readOnly: \"readOnly\",\n    value: props.product.groups && props.product.groups[props.dataId] ? roadRender(props.product.groups[props.dataId], props.group.name) : \"\",\n    placeholder: props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), React.createElement(Col, {\n    sm: \"1\",\n    className: \"ml-0 mb-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    className: \"mb-0\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(List, {\n    size: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), \" \")), React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: props.className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, props.name), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, props.productGroups.length ? React.createElement(GroupTabContent, {\n    data: props.productGroups,\n    group: props.group,\n    lang: props.lang,\n    handleOpen: props.handleOpen,\n    selectGroup: props.selectGroup,\n    selected: props.selected,\n    page: \"products\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }) : React.createElement(\"p\", {\n    className: \"text-center font-small-5 info p-2 mb-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(MyIcon.AlertOctagon, {\n    className: \"mr-1 warning\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(Translate, {\n    name: 'The sub groups are empty',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, props.selected.length ? console.log(props.selected) // <Button\n  //     color=\"primary\"\n  //     disabled={props.productGroups.length ? false : true}\n  //     onClick={\n  //         () => {\n  //             toggle();\n  //             props.setModalValues(\"groups\", props.selected);\n  //         }\n  //     }\n  // >\n  //     <Translate name=\"select\"/>\n  // </Button>\n  : console.log(props.selected))));\n};\n\nexport default ModalExample;","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/pages/products/modal/tab/group/groupModal.js"],"names":["React","useState","Button","Modal","ModalHeader","ModalBody","ModalFooter","Input","Row","Col","GroupTabContent","Translate","default","Icon","List","MyIcon","ModalExample","props","modal","setModal","selectStatus","setSelectStatus","toggle","getSubGroups","group","setItems","data","item","parseInt","parent_id","id","name","roadRender","obj","arrayRoadItems","concat","product","groups","dataId","className","productGroups","length","lang","handleOpen","selectGroup","selected","console","log"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Row, Col} from \"reactstrap\";\r\nimport GroupTabContent from \"../../../../group/subGroupMenuNew\";\r\nimport Translate from \"../../../../../../Translate\";\r\nimport {default as Icon, List} from \"react-feather\"\r\nimport * as MyIcon from 'react-feather'\r\n\r\nconst ModalExample = props => {\r\n    const [modal, setModal] = useState(false)\r\n    const [selectStatus, setSelectStatus] = useState(false)\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n        props.getSubGroups(props.group)\r\n    }\r\n\r\n    const setItems = data => {\r\n        for (let item of props.data) {\r\n            if (parseInt(data.parent_id) === parseInt(item.id)) {\r\n                // return `${setItems(item) ? setItems(item) : null} > ${item.name}`\r\n\r\n                return setItems(item) ?\r\n                    `${item.name} < ${setItems(item)}`\r\n                    :\r\n                    `${item.name}`\r\n            }\r\n        }\r\n    }\r\n\r\n    const roadRender = (data, name) => {\r\n        let obj;\r\n        let arrayRoadItems;\r\n        if (data && data.id && data.name) {\r\n            for (let item of props.data) {\r\n                if (item.id === data.id) {\r\n                    obj = item\r\n                }\r\n            }\r\n            arrayRoadItems = setItems(obj)\r\n            if (arrayRoadItems) {\r\n                return obj.name.concat(` < ${arrayRoadItems}`)\r\n            } else {\r\n                return obj.name\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col sm=\"11\" className=\"mr-0 mb-0\">\r\n                    <Input type=\"text\" readOnly=\"readOnly\"\r\n                           value={props.product.groups && props.product.groups[props.dataId] ? roadRender(props.product.groups[props.dataId], props.group.name) : \"\"}\r\n                           placeholder={props.name}/>\r\n                </Col>\r\n                <Col sm=\"1\" className=\"ml-0 mb-0\">\r\n                    <Button color=\"primary\" className=\"mb-0\" onClick={toggle}><List size={16}/></Button>{\" \"}\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n\r\n            <Modal\r\n                isOpen={modal}\r\n                toggle={toggle}\r\n                className={props.className}\r\n            >\r\n                <ModalHeader toggle={toggle}>{props.name}</ModalHeader>\r\n                <ModalBody>\r\n                    {\r\n                        props.productGroups.length ?\r\n                            <GroupTabContent\r\n                                data={props.productGroups}\r\n                                group={props.group}\r\n                                lang={props.lang}\r\n                                handleOpen={props.handleOpen}\r\n                                selectGroup={props.selectGroup}\r\n                                selected={props.selected}\r\n                                page=\"products\"\r\n                            />\r\n                            :\r\n                            <p className='text-center font-small-5 info p-2 mb-0'>\r\n                                <MyIcon.AlertOctagon className='mr-1 warning'/>\r\n                                <Translate name={'The sub groups are empty'}/>\r\n                            </p>\r\n                    }\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    {\r\n\r\n                        props.selected.length ?\r\n                            console.log(props.selected)\r\n                            // <Button\r\n                            //     color=\"primary\"\r\n                            //     disabled={props.productGroups.length ? false : true}\r\n                            //     onClick={\r\n                            //         () => {\r\n                            //             toggle();\r\n                            //             props.setModalValues(\"groups\", props.selected);\r\n                            //         }\r\n                            //     }\r\n                            // >\r\n                            //     <Translate name=\"select\"/>\r\n                            // </Button>\r\n                            :\r\n\r\n                        console.log(props.selected)\r\n                    }\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ModalExample;"]},"metadata":{},"sourceType":"module"}