{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\Translate.js\";\nimport React, { Component, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\nvar obj = [];\n\nvar Translate = function Translate(props) {\n  useEffect(function () {\n    if (props.name !== undefined) {\n      var lang = SessionStorage.get('lang') || \"am\";\n\n      if (3) {\n        var index = false;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.value === props.name) {\n              index = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (index === false) {\n          obj.push({\n            key: props.name.toLowerCase(),\n            value: props.name,\n            language: lang\n          }); // props.setTranslations(props.name, props.name, lang);\n        }\n      }\n      /*else obj.push({'key': props.name.toLowerCase(), 'name': props.name, 'lnag': lang});*/\n\n    }\n  }, []); // if (!props.translations[props.name.toLowerCase()]) {\n  //     if (props.status) {\n  //         let lang = SessionStorage.get('lang') || \"am\";\n  //         if (props.translations.length > 0) {\n  //             let index = false;\n  //             for (let item of props.translations) {\n  //                 if (item.value === props.name) {\n  //                     index = true;\n  //                 }\n  //             }\n  //             if (index === false) {\n  //                 console.log('key: ', props.name.toLowerCase(), 'name: ', props.name, 'lnag: ', lang)\n  //                 // props.setTranslations(props.name, props.name, lang);\n  //             }\n  //         } else {\n  //             // props.setTranslations(props.name, props.name, lang);\n  //         }\n  //     }\n  // }\n\n  var contentRender = function contentRender() {\n    var word = null;\n\n    if (props.name) {\n      if (props.translations.length > 0) {\n        if (props.translations[props.name.toLowerCase()]) {\n          console.log(\"name\", props.translations[props.name.toLowerCase()]);\n          word = props.translations[props.name.toLowerCase()];\n        }\n      } else {\n        word = props.name;\n      }\n    }\n\n    return word;\n  };\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, props.translations[props.name] ? props.translations[props.name] : props.name, console.log(obj));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations,\n    status: state.languages.status\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","Component","useEffect","connect","bindActionCreators","setTranslations","SessionStorage","obj","Translate","props","name","undefined","lang","get","index","item","value","push","key","toLowerCase","language","contentRender","word","translations","length","console","log","mapDispatchToProps","dispatch","mapStateToProps","state","languages","status"],"mappings":"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","sourcesContent":["import React, {Component, useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\nlet obj = [];\r\n\r\nconst Translate = props => {\r\n\r\n    useEffect(\r\n        () => {\r\n            if (props.name !== undefined){\r\n                let lang = SessionStorage.get('lang') || \"am\";\r\n                if (3) {\r\n                    let index = false;\r\n                    for (let item of obj) {\r\n                        if (item.value === props.name) {\r\n                            index = true;\r\n                        }\r\n                    }\r\n                    if (index === false) {\r\n                        obj.push({key: props.name.toLowerCase(), value: props.name, language: lang})\r\n                        // props.setTranslations(props.name, props.name, lang);\r\n                    }\r\n                } /*else obj.push({'key': props.name.toLowerCase(), 'name': props.name, 'lnag': lang});*/\r\n            }\r\n        }, []\r\n    )\r\n\r\n\r\n    // if (!props.translations[props.name.toLowerCase()]) {\r\n    //     if (props.status) {\r\n    //         let lang = SessionStorage.get('lang') || \"am\";\r\n    //         if (props.translations.length > 0) {\r\n    //             let index = false;\r\n    //             for (let item of props.translations) {\r\n    //                 if (item.value === props.name) {\r\n    //                     index = true;\r\n    //                 }\r\n    //             }\r\n    //             if (index === false) {\r\n    //                 console.log('key: ', props.name.toLowerCase(), 'name: ', props.name, 'lnag: ', lang)\r\n    //                 // props.setTranslations(props.name, props.name, lang);\r\n    //             }\r\n    //         } else {\r\n    //             // props.setTranslations(props.name, props.name, lang);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n\r\n    const contentRender = () => {\r\n        let word = null;\r\n        if (props.name) {\r\n            if (props.translations.length > 0) {\r\n                if (props.translations[(props.name.toLowerCase())]) {\r\n                    console.log(\"name\", props.translations[props.name.toLowerCase()])\r\n                    word = props.translations[props.name.toLowerCase()]\r\n                }\r\n            } else {\r\n                word = props.name\r\n            }\r\n        }\r\n        return word;\r\n    }\r\n    return (\r\n        <span>\r\n                {props.translations[props.name] ? props.translations[props.name] : props.name}\r\n            {console.log(obj)}\r\n        </span>\r\n    );\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n        status: state.languages.status\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}