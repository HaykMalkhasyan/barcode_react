{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS, GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS, ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS, EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS, DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS, GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS, ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS, EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS, DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS, SET_GROUP_MODAL, TOGGLE_GROUP_MODAL, TOGGLE_SUB_GROUP_MODAL, OPEN_MENU } from \"./actionTypes\";\nimport { IsRequiredField, IsRequiredFields } from \"../../utility/utils\";\nvar INIT_STATE = {\n  groups: [],\n  group: {},\n  modal: {},\n  subModal: {},\n  required: [\"name\"],\n  loading: false,\n  success: false,\n  fail: false,\n  errors: {}\n};\n\nfunction myFunction(arr, id, key) {\n  var value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  arr.forEach(function (current, index) {\n    if (current.id === id) {\n      current[key] = !current[key];\n    } else {\n      if (current.child) {\n        myFunction(current.child, id, key);\n      }\n    }\n  });\n  return arr;\n}\n\nfunction addGroup(arr, element) {\n  if (element.parent_id === 0) {\n    arr.push(element);\n  } else {\n    arr.forEach(function (current, index) {\n      if (current.id === element.parent_id) {\n        if (!arr[index].child) {\n          arr[index].child = [];\n        }\n\n        arr[index].child.push(element);\n        arr[index].open = true;\n      } else {\n        if (current.child) {\n          addGroup(current.child, element);\n        }\n      }\n    });\n  }\n\n  return arr;\n}\n\nfunction editGroup(arr, element) {\n  arr.forEach(function (current, index) {\n    if (current.id === element.id) {\n      if (!arr[index].child) {\n        arr[index].child = [];\n      }\n\n      arr[index].child.push(element);\n      arr[index].open = true;\n    } else {\n      if (current.child) {\n        addGroup(current.child, element);\n      }\n    }\n  });\n  return arr;\n}\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_GROUPS_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        modal: {},\n        subModal: {},\n        errors: {}\n      });\n\n    case GET_GROUPS_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        modal: {},\n        subModal: {},\n        fail: true\n      });\n\n    case GET_GROUPS_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: {},\n        subModal: {},\n        groups: JSON.parse(action.result.data),\n        errors: {}\n      });\n\n    case GET_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: {}\n      });\n\n    case GET_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case GET_GROUP_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        group: JSON.parse(action.result.data),\n        errors: {}\n      });\n\n    case ADD_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: IsRequiredFields(state.required, state.group, state.errors)\n      });\n\n    case ADD_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case ADD_GROUP_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: {},\n        groups: JSON.parse(action.result.data)\n      });\n\n    case EDIT_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: IsRequiredFields(state.required, state.group, state.errors)\n      });\n\n    case EDIT_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case EDIT_GROUP_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: {},\n        group: {},\n        groups: JSON.parse(action.result.data)\n      });\n\n    case DELETE_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false\n      });\n\n    case DELETE_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case DELETE_GROUP_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: {},\n        group: {},\n        groups: JSON.parse(action.result.data)\n      });\n\n    case GET_SUB_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: {}\n      });\n\n    case GET_SUB_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case GET_SUB_GROUP_SUCCESS:\n      console.log(JSON.parse(action.result.data));\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        group: JSON.parse(action.result.data),\n        errors: {}\n      });\n\n    case ADD_SUB_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: IsRequiredFields(state.required, state.group, state.errors)\n      });\n\n    case ADD_SUB_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case ADD_SUB_GROUP_SUCCESS:\n      var result = JSON.parse(action.result.data); // console.log(addGroup(state.groups[result.group_id].subGroup,result))\n\n      state.groups[result.group_id].subGroup = addGroup(state.groups[result.group_id].subGroup, result);\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        subModal: {},\n        groups: state.groups\n      });\n\n    case EDIT_SUB_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: IsRequiredFields(state.required, state.group, state.errors)\n      });\n\n    case EDIT_SUB_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case EDIT_SUB_GROUP_SUCCESS:\n      var data1 = JSON.parse(action.result.data);\n      console.log(data1);\n      state.groups[data1.group_id].subGroup = data1.subGroup;\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        subModal: {},\n        group: {},\n        groups: state.groups\n      });\n\n    case DELETE_SUB_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false\n      });\n\n    case DELETE_SUB_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case DELETE_SUB_GROUP_SUCCESS:\n      var data2 = JSON.parse(action.result.data);\n      state.groups[data2.group_id].subGroup = data2.subGroup;\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        subModal: {},\n        group: {},\n        groups: state.groups\n      });\n\n    case SET_GROUP_MODAL:\n      state.group[action.key] = action.value;\n      return _objectSpread({}, state, {\n        errors: IsRequiredField(state.required, action, state.errors)\n      });\n\n    case TOGGLE_GROUP_MODAL:\n      state.modal[action.modalType] = !state.modal[action.modalType];\n\n      if (action.obj) {\n        if (action.modalType === \"edit\") {\n          state.group[action.obj.key] = action.obj.value;\n        } else {\n          state.group = action.obj;\n        }\n      }\n\n      return _objectSpread({}, state, {\n        errors: {},\n        subModal: {}\n      });\n\n    case TOGGLE_SUB_GROUP_MODAL:\n      state.subModal[action.modalType] = !state.subModal[action.modalType];\n      var obj = action.obj;\n\n      if (obj) {\n        if (action.modalType === \"edit\") {\n          state.group = _objectSpread({}, state.group, obj);\n        } else {\n          state.group = obj;\n        }\n      }\n\n      return _objectSpread({}, state, {\n        errors: {},\n        modal: {}\n      });\n\n    case OPEN_MENU:\n      state.groups[action.group_id].subGroup = myFunction(state.groups[action.group_id].subGroup, action.id, \"open\");\n      return _objectSpread({}, state, {\n        groups: state.groups\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n});","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/group/reducer.js"],"names":["GET_GROUPS_REQUEST","GET_GROUPS_FAIL","GET_GROUPS_SUCCESS","GET_GROUP_REQUEST","GET_GROUP_FAIL","GET_GROUP_SUCCESS","ADD_GROUP_REQUEST","ADD_GROUP_FAIL","ADD_GROUP_SUCCESS","EDIT_GROUP_REQUEST","EDIT_GROUP_FAIL","EDIT_GROUP_SUCCESS","DELETE_GROUP_REQUEST","DELETE_GROUP_FAIL","DELETE_GROUP_SUCCESS","GET_SUB_GROUP_REQUEST","GET_SUB_GROUP_FAIL","GET_SUB_GROUP_SUCCESS","ADD_SUB_GROUP_REQUEST","ADD_SUB_GROUP_FAIL","ADD_SUB_GROUP_SUCCESS","EDIT_SUB_GROUP_REQUEST","EDIT_SUB_GROUP_FAIL","EDIT_SUB_GROUP_SUCCESS","DELETE_SUB_GROUP_REQUEST","DELETE_SUB_GROUP_FAIL","DELETE_SUB_GROUP_SUCCESS","SET_GROUP_MODAL","TOGGLE_GROUP_MODAL","TOGGLE_SUB_GROUP_MODAL","OPEN_MENU","IsRequiredField","IsRequiredFields","INIT_STATE","groups","group","modal","subModal","required","loading","success","fail","errors","myFunction","arr","id","key","value","forEach","current","index","child","addGroup","element","parent_id","push","open","editGroup","state","action","type","JSON","parse","result","data","console","log","group_id","subGroup","data1","data2","modalType","obj"],"mappings":"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","sourcesContent":["import {\r\n    GET_GROUPS_REQUEST,GET_GROUPS_FAIL,GET_GROUPS_SUCCESS,\r\n    GET_GROUP_REQUEST,GET_GROUP_FAIL,GET_GROUP_SUCCESS,\r\n    ADD_GROUP_REQUEST,ADD_GROUP_FAIL,ADD_GROUP_SUCCESS,\r\n    EDIT_GROUP_REQUEST,EDIT_GROUP_FAIL,EDIT_GROUP_SUCCESS,\r\n    DELETE_GROUP_REQUEST,DELETE_GROUP_FAIL,DELETE_GROUP_SUCCESS,\r\n    GET_SUB_GROUP_REQUEST,GET_SUB_GROUP_FAIL,GET_SUB_GROUP_SUCCESS,\r\n    ADD_SUB_GROUP_REQUEST,ADD_SUB_GROUP_FAIL,ADD_SUB_GROUP_SUCCESS,\r\n    EDIT_SUB_GROUP_REQUEST,EDIT_SUB_GROUP_FAIL,EDIT_SUB_GROUP_SUCCESS,\r\n    DELETE_SUB_GROUP_REQUEST,DELETE_SUB_GROUP_FAIL,DELETE_SUB_GROUP_SUCCESS,\r\n    SET_GROUP_MODAL,TOGGLE_GROUP_MODAL,TOGGLE_SUB_GROUP_MODAL,OPEN_MENU\r\n} from \"./actionTypes\";\r\nimport {IsRequiredField,IsRequiredFields} from \"../../utility/utils\";\r\n\r\nconst INIT_STATE = {\r\n    groups: [],\r\n    group:{},\r\n    modal: {},\r\n    subModal: {},\r\n    required: [\"name\"],\r\n    loading: false,\r\n    success: false,\r\n    fail: false,\r\n    errors: {}\r\n};\r\nfunction myFunction(arr,id,key,value=false){\r\n    arr.forEach(function(current, index){\r\n        if(current.id===id){\r\n            current[key] = !current[key]\r\n        }else{\r\n            if(current.child){\r\n                myFunction(current.child,id,key)\r\n            }\r\n        }\r\n    })\r\n    return arr;\r\n}\r\nfunction addGroup(arr,element){\r\n    if(element.parent_id ===0){\r\n        arr.push(element)\r\n    }else{\r\n        arr.forEach(function(current, index){\r\n            if(current.id===element.parent_id) {\r\n                if(!arr[index].child){\r\n                    arr[index].child = []\r\n                }\r\n                arr[index].child.push(element)\r\n                arr[index].open = true\r\n\r\n            }else{\r\n                if(current.child){\r\n                    addGroup(current.child,element)\r\n                }\r\n            }\r\n        })\r\n    }\r\n    return arr;\r\n}\r\nfunction editGroup(arr,element){\r\n        arr.forEach(function(current, index){\r\n            if(current.id===element.id) {\r\n                if(!arr[index].child){\r\n                    arr[index].child = []\r\n                }\r\n                arr[index].child.push(element)\r\n                arr[index].open = true\r\n\r\n            }else{\r\n                if(current.child){\r\n                    addGroup(current.child,element)\r\n                }\r\n            }\r\n        })\r\n    return arr;\r\n}\r\nexport default (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        case GET_GROUPS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                modal:{},\r\n                subModal: {},\r\n                errors: {},\r\n            };\r\n        case GET_GROUPS_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                modal:{},\r\n                subModal: {},\r\n                fail: true,\r\n            };\r\n        case GET_GROUPS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal:{},\r\n                subModal: {},\r\n                groups: JSON.parse(action.result.data),\r\n                errors: {},\r\n            };\r\n        case GET_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: {},\r\n            };\r\n        case GET_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n            };\r\n        case GET_GROUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                group: JSON.parse(action.result.data),\r\n                errors: {},\r\n            };\r\n        case ADD_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors:IsRequiredFields(state.required,state.group,state.errors)\r\n            }\r\n        case ADD_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case ADD_GROUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal: {},\r\n                groups: JSON.parse(action.result.data)\r\n            };\r\n        case EDIT_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: IsRequiredFields(state.required,state.group,state.errors)\r\n            }\r\n        case EDIT_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case EDIT_GROUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal: {},\r\n                group: {},\r\n                groups: JSON.parse(action.result.data)\r\n            };\r\n        case DELETE_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n            }\r\n        case DELETE_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case DELETE_GROUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal: {},\r\n                group: {},\r\n                groups: JSON.parse(action.result.data)\r\n            };\r\n        case GET_SUB_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: {},\r\n            };\r\n        case GET_SUB_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n            };\r\n        case GET_SUB_GROUP_SUCCESS:\r\n            console.log(JSON.parse(action.result.data))\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                group: JSON.parse(action.result.data),\r\n                errors: {},\r\n            };\r\n        case ADD_SUB_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors:IsRequiredFields(state.required,state.group,state.errors)\r\n            }\r\n        case ADD_SUB_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case ADD_SUB_GROUP_SUCCESS:\r\n            let result =  JSON.parse(action.result.data);\r\n            // console.log(addGroup(state.groups[result.group_id].subGroup,result))\r\n            state.groups[result.group_id].subGroup = addGroup(state.groups[result.group_id].subGroup,result);\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                subModal: {},\r\n                groups: state.groups\r\n            };\r\n        case EDIT_SUB_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: IsRequiredFields(state.required,state.group,state.errors)\r\n            }\r\n        case EDIT_SUB_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case EDIT_SUB_GROUP_SUCCESS:\r\n            let data1 =  JSON.parse(action.result.data);\r\n            console.log(data1)\r\n            state.groups[data1.group_id].subGroup = data1.subGroup\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                subModal: {},\r\n                group: {},\r\n                groups: state.groups\r\n            };\r\n        case DELETE_SUB_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n            }\r\n        case DELETE_SUB_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case DELETE_SUB_GROUP_SUCCESS:\r\n            let data2 =  JSON.parse(action.result.data);\r\n            state.groups[data2.group_id].subGroup = data2.subGroup\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                subModal: {},\r\n                group: {},\r\n                groups: state.groups\r\n            };\r\n\r\n        case SET_GROUP_MODAL:\r\n            state.group[action.key] = action.value;\r\n            return {\r\n                ...state,\r\n                errors:IsRequiredField(state.required,action,state.errors)\r\n            };\r\n        case TOGGLE_GROUP_MODAL:\r\n            state.modal[action.modalType] = !state.modal[action.modalType];\r\n            if(action.obj){\r\n                if(action.modalType===\"edit\"){\r\n                    state.group[action.obj.key] = action.obj.value\r\n                }else{\r\n                    state.group = action.obj\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                errors: {},\r\n                subModal: {}\r\n            }\r\n        case TOGGLE_SUB_GROUP_MODAL:\r\n            state.subModal[action.modalType] = !state.subModal[action.modalType];\r\n            let obj = action.obj\r\n            if(obj){\r\n                if(action.modalType===\"edit\"){\r\n                    state.group = {\r\n                        ...state.group,\r\n                        ...obj\r\n                    }\r\n                }else{\r\n                    state.group = obj\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                errors: {},\r\n                modal: {}\r\n            }\r\n        case OPEN_MENU:\r\n            state.groups[action.group_id].subGroup = myFunction(state.groups[action.group_id].subGroup,action.id,\"open\")\r\n            return {\r\n                ...state,\r\n                groups:  state.groups\r\n            }\r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}