{"ast":null,"code":"import axios from 'axios';\nimport { EDIT_CURRENCY, FETCH_CURRENCY_FAIL, FETCH_CURRENCY_REQUEST, FETCH_CURRENCY_SUCCESS, GET_ALL_CURRENCY_FAIL, GET_ALL_CURRENCY_REQUEST, GET_ALL_CURRENCY_SUCCESS, GET_ITEM_CURRENCY_FAIL, GET_ITEM_CURRENCY_REQUEST, GET_ITEM_CURRENCY_SUCCESS, SET_FORM_VALIDATE, SET_VALUES, TOGGLE_MODAL } from \"./actionTypes\";\nexport var getAllCurrency = function getAllCurrency() {\n  return {\n    types: [GET_ALL_CURRENCY_REQUEST, GET_ALL_CURRENCY_FAIL, GET_ALL_CURRENCY_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett('currency/');\n    }\n  };\n};\nexport var getItemCurrency = function getItemCurrency(id) {\n  return {\n    types: [GET_ITEM_CURRENCY_REQUEST, GET_ITEM_CURRENCY_FAIL, GET_ITEM_CURRENCY_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"currency/\".concat(id));\n    }\n  };\n};\nexport var fetchCurrency = function fetchCurrency(data) {\n  return {\n    types: [FETCH_CURRENCY_REQUEST, FETCH_CURRENCY_FAIL, FETCH_CURRENCY_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.putt(\"currency/\".concat(data.id), data);\n    }\n  };\n};\nexport var toggleModal = function toggleModal() {\n  var cleanSetCurrency = {\n    name: '',\n    short: '',\n    value: ''\n  };\n  var cleanFormValidate = {\n    name: false,\n    short: false,\n    value: false\n  };\n  return {\n    type: TOGGLE_MODAL,\n    cleanSetCurrency: cleanSetCurrency,\n    cleanFormValidate: cleanFormValidate\n  };\n};\nexport var editCurrency = function editCurrency() {\n  return {\n    type: EDIT_CURRENCY\n  };\n};\nexport var setCurrencyValue = function setCurrencyValue(name, value) {\n  return function (dispatch, getState) {\n    var setCurrency = getState().currency.setCurrency;\n    var formValidate = getState().currency.formValidate;\n    setCurrency[name] = value;\n    dispatch(setValue(setCurrency, formValidate));\n  };\n};\nexport var setValue = function setValue(setCurrency, formValidate) {\n  return {\n    type: SET_VALUES,\n    setCurrency: setCurrency,\n    formValidate: formValidate\n  };\n};\nexport var checkCurrencyValue = function checkCurrencyValue(name, value) {\n  return function (dispatch, getState) {\n    var formValidate = getState().currency.formValidate;\n\n    if (value.length === 0) {\n      formValidate[name] = \"The '\".concat(name, \"' field must not be empty\");\n      dispatch(setFormValidate(formValidate));\n    }\n\n    if (value.length > 0) {\n      formValidate[name] = false;\n      dispatch(setFormValidate(formValidate));\n    }\n\n    if (name !== 'value') {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (item / 2) {\n            formValidate[name] = \"'\".concat(name, \"' field must not be digits\");\n            dispatch(setFormValidate(formValidate));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  };\n};\nexport var setFormValidate = function setFormValidate(formValidate) {\n  return {\n    type: SET_FORM_VALIDATE,\n    formValidate: formValidate\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/currency/actions.js"],"names":["axios","EDIT_CURRENCY","FETCH_CURRENCY_FAIL","FETCH_CURRENCY_REQUEST","FETCH_CURRENCY_SUCCESS","GET_ALL_CURRENCY_FAIL","GET_ALL_CURRENCY_REQUEST","GET_ALL_CURRENCY_SUCCESS","GET_ITEM_CURRENCY_FAIL","GET_ITEM_CURRENCY_REQUEST","GET_ITEM_CURRENCY_SUCCESS","SET_FORM_VALIDATE","SET_VALUES","TOGGLE_MODAL","getAllCurrency","types","promise","apiClient","gett","getItemCurrency","id","fetchCurrency","data","putt","toggleModal","cleanSetCurrency","name","short","value","cleanFormValidate","type","editCurrency","setCurrencyValue","dispatch","getState","setCurrency","currency","formValidate","setValue","checkCurrencyValue","length","setFormValidate","item"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    EDIT_CURRENCY, FETCH_CURRENCY_FAIL, FETCH_CURRENCY_REQUEST, FETCH_CURRENCY_SUCCESS,\r\n    GET_ALL_CURRENCY_FAIL,\r\n    GET_ALL_CURRENCY_REQUEST,\r\n    GET_ALL_CURRENCY_SUCCESS,\r\n    GET_ITEM_CURRENCY_FAIL,\r\n    GET_ITEM_CURRENCY_REQUEST,\r\n    GET_ITEM_CURRENCY_SUCCESS,\r\n    SET_FORM_VALIDATE,\r\n    SET_VALUES,\r\n    TOGGLE_MODAL\r\n} from \"./actionTypes\";\r\n\r\nexport const getAllCurrency = () => {\r\n\r\n    return {\r\n        types: [GET_ALL_CURRENCY_REQUEST, GET_ALL_CURRENCY_FAIL, GET_ALL_CURRENCY_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett('currency/')\r\n    }\r\n}\r\n\r\nexport const getItemCurrency = id => {\r\n\r\n    return {\r\n        types: [GET_ITEM_CURRENCY_REQUEST, GET_ITEM_CURRENCY_FAIL, GET_ITEM_CURRENCY_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`currency/${id}`)\r\n    }\r\n}\r\n\r\nexport const fetchCurrency = data => {\r\n\r\n    return {\r\n        types: [FETCH_CURRENCY_REQUEST, FETCH_CURRENCY_FAIL, FETCH_CURRENCY_SUCCESS],\r\n        promise: (apiClient) => apiClient.putt(`currency/${data.id}`, data)\r\n    }\r\n}\r\n\r\nexport const toggleModal = () => {\r\n    let cleanSetCurrency = {\r\n        name: '',\r\n        short: '',\r\n        value: '',\r\n    }\r\n\r\n    let cleanFormValidate = {\r\n        name: false,\r\n        short: false,\r\n        value: false,\r\n    }\r\n\r\n    return {\r\n        type: TOGGLE_MODAL,\r\n        cleanSetCurrency,\r\n        cleanFormValidate\r\n    }\r\n}\r\n\r\nexport const editCurrency = () => {\r\n\r\n    return {\r\n        type: EDIT_CURRENCY\r\n    }\r\n}\r\n\r\nexport const setCurrencyValue = (name, value) => {\r\n\r\n    return (dispatch, getState) => {\r\n        const setCurrency = getState().currency.setCurrency;\r\n        const formValidate = getState().currency.formValidate;\r\n        setCurrency[name] = value;\r\n        dispatch(setValue(setCurrency, formValidate))\r\n    }\r\n}\r\n\r\nexport const setValue = (setCurrency, formValidate) => {\r\n\r\n    return {\r\n        type: SET_VALUES,\r\n        setCurrency,\r\n        formValidate\r\n    }\r\n}\r\n\r\nexport const checkCurrencyValue = (name, value) => {\r\n\r\n    return (dispatch, getState) => {\r\n        const formValidate = getState().currency.formValidate;\r\n        if (value.length === 0) {\r\n            formValidate[name] = `The '${name}' field must not be empty`;\r\n            dispatch(setFormValidate(formValidate))\r\n        }\r\n        if (value.length > 0) {\r\n            formValidate[name] = false;\r\n            dispatch(setFormValidate(formValidate));\r\n        }\r\n        if (name !== 'value') {\r\n            for (let item of value) {\r\n                if (item/2) {\r\n                    formValidate[name] = `'${name}' field must not be digits`;\r\n                    dispatch(setFormValidate(formValidate))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const setFormValidate = formValidate => {\r\n\r\n    return {\r\n        type: SET_FORM_VALIDATE,\r\n        formValidate\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}