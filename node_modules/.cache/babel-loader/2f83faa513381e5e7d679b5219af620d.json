{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { ADD_BARCODE, ADD_MEASUREMENT_VALUE, ADD_POINTS_VALUE, ADD_PRODUCT_FAIL, ADD_PRODUCT_REQUEST, ADD_PRODUCT_SUCCESS, ADD_RESULT, ADD_SEARCH_TEXT, ADD_UPLOAD_IMAGES, ADD_VALUE, CLASSIFIERS_TOGGLE_MODAL, CREATE_CLASSIFIERS_ERROR, CREATE_CLASSIFIERS_SUCCESS, DELETE_BARCODE, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_SUCCESS, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_SUCCESS, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_SUCCESS, GET_PRODUCT_FAIL, GET_PRODUCT_REQUEST, GET_PRODUCT_SUCCESS, GET_PRODUCTS_FAIL, GET_PRODUCTS_REQUEST, GET_PRODUCTS_SUCCESS, SEARCH_ERROR, SELECT_GROUP, SELECT_ID_IN_ARRAY, SET_BARCODE, SET_PRODUCT_MODAL, TOGGLE_PRODUCT_MODAL } from \"./actionTypes\";\nexport var productActions = function productActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"product/\".concat(data.id));\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"product/?page_size=10000\");\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"product/\", data);\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"product/\".concat(data.id), data);\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"product/\".concat(data.id));\n        },\n        data: data\n      };\n\n    default:\n      return;\n  }\n};\nexport var barcodeActions = function barcodeActions(type, code) {\n  switch (type) {\n    case \"getTypes\":\n      return {\n        types: [GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"barcode\");\n        }\n      };\n\n    case \"add\":\n      return {\n        type: ADD_BARCODE,\n        code: code\n      };\n\n    case \"delete\":\n      return {\n        type: DELETE_BARCODE,\n        code: code\n      };\n\n    default:\n      return;\n  }\n};\nexport var setModalValues = function setModalValues(key, value) {\n  return {\n    type: SET_PRODUCT_MODAL,\n    key: key,\n    value: value\n  };\n};\n/*----------------------------------*/\n\nexport function removeBarcode(data, index) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product.barcode.splice(index, 1);\n    dispatch(setBarcode(product));\n  };\n}\nexport function setBarcode(product) {\n  return {\n    type: SET_BARCODE,\n    product: product\n  };\n}\nexport function setMeasurementValue(name, data) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product[name] = data.id;\n    dispatch(addMeasurementValue(product));\n  };\n}\nexport function addMeasurementValue(product) {\n  return {\n    type: ADD_MEASUREMENT_VALUE,\n    product: product\n  };\n}\nexport function setPointsValue(name, value) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product[name] = value;\n    dispatch(addPointValue(product));\n  };\n}\nexport function addPointValue(data) {\n  return {\n    type: ADD_POINTS_VALUE,\n    data: data\n  };\n}\nexport function SetUploadImages(name, images) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    var names = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = images[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n        names.push(item.name);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    product[name] = names;\n    dispatch(AddUploadImages(product));\n  };\n}\nexport function deleteUploadImages(imageItem) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product.upImages.forEach(function (item, index) {\n      if (item.name === imageItem.name) {\n        product.upImages.splice(index, 1);\n      }\n    });\n    dispatch(AddUploadImages(product));\n  };\n}\nexport function AddUploadImages(product) {\n  return {\n    type: ADD_UPLOAD_IMAGES,\n    product: product\n  };\n}\nexport function setMainImage(imageFile) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product['image'] = imageFile.name;\n    dispatch(AddUploadImages(product));\n  };\n}\nexport function setSearchProductValue(value, name) {\n  return function (dispatch, getState) {\n    var searchProduct = _objectSpread({}, getState().products.searchProduct);\n\n    var products = _toConsumableArray(getState().products.products);\n\n    searchProduct[name] = value;\n    dispatch(AddValue(searchProduct));\n\n    switch (name) {\n      case 'sku':\n      case 'name':\n      case 'suppliers':\n      case 'description':\n        {\n          var searchProductResult = [];\n\n          for (var item in searchProduct) {\n            if (item !== name) {\n              searchProduct[item] = '';\n            }\n          }\n\n          searchProduct[name] = value;\n\n          if (/\\d/.test(value)) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = products[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var product = _step2.value;\n\n                if (product[name] && product[name].search(searchProduct[name]) !== -1) {\n                  var index = false;\n                  var _iteratorNormalCompletion3 = true;\n                  var _didIteratorError3 = false;\n                  var _iteratorError3 = undefined;\n\n                  try {\n                    for (var _iterator3 = searchProductResult[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                      var _item = _step3.value;\n\n                      if (product.id === _item.id) {\n                        index = true;\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                        _iterator3.return();\n                      }\n                    } finally {\n                      if (_didIteratorError3) {\n                        throw _iteratorError3;\n                      }\n                    }\n                  }\n\n                  if (!index) {\n                    searchProductResult.push(product);\n                  }\n                } else {\n                  dispatch(searchProductError(name));\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          } else {\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n              for (var _iterator4 = products[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var _product = _step4.value;\n\n                if (_product[name] && _product[name].trim().toLowerCase().search(searchProduct[name].trim().toLowerCase()) !== -1) {\n                  var _index = false;\n                  var _iteratorNormalCompletion5 = true;\n                  var _didIteratorError5 = false;\n                  var _iteratorError5 = undefined;\n\n                  try {\n                    for (var _iterator5 = searchProductResult[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                      var _item2 = _step5.value;\n\n                      if (_product.id === _item2.id) {\n                        _index = true;\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError5 = true;\n                    _iteratorError5 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                        _iterator5.return();\n                      }\n                    } finally {\n                      if (_didIteratorError5) {\n                        throw _iteratorError5;\n                      }\n                    }\n                  }\n\n                  if (!_index) {\n                    searchProductResult.push(_product);\n                  }\n                } else {\n                  dispatch(searchProductError(name));\n                }\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n          }\n\n          dispatch(AddSearchResult(searchProductResult));\n          break;\n        }\n\n      case 'barcode':\n        {\n          var _searchProductResult = [];\n\n          for (var _item3 in searchProduct) {\n            if (_item3 !== name) {\n              searchProduct[_item3] = '';\n            }\n          }\n\n          searchProduct[name] = value;\n\n          if (/\\d/.test(value)) {\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n              for (var _iterator6 = products[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var _product2 = _step6.value;\n                var _iteratorNormalCompletion7 = true;\n                var _didIteratorError7 = false;\n                var _iteratorError7 = undefined;\n\n                try {\n                  for (var _iterator7 = _product2.barcode[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                    var barcodeItem = _step7.value;\n\n                    if (barcodeItem[name] && barcodeItem[name].search(searchProduct[name]) !== -1) {\n                      var _index2 = false;\n                      var _iteratorNormalCompletion8 = true;\n                      var _didIteratorError8 = false;\n                      var _iteratorError8 = undefined;\n\n                      try {\n                        for (var _iterator8 = _searchProductResult[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                          var _item4 = _step8.value;\n\n                          if (_product2.id === _item4.id) {\n                            _index2 = true;\n                          }\n                        }\n                      } catch (err) {\n                        _didIteratorError8 = true;\n                        _iteratorError8 = err;\n                      } finally {\n                        try {\n                          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                            _iterator8.return();\n                          }\n                        } finally {\n                          if (_didIteratorError8) {\n                            throw _iteratorError8;\n                          }\n                        }\n                      }\n\n                      if (!_index2) {\n                        _searchProductResult.push(_product2);\n                      }\n                    } else {\n                      dispatch(searchProductError(name));\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError7 = true;\n                  _iteratorError7 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                      _iterator7.return();\n                    }\n                  } finally {\n                    if (_didIteratorError7) {\n                      throw _iteratorError7;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError6 = true;\n              _iteratorError6 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                  _iterator6.return();\n                }\n              } finally {\n                if (_didIteratorError6) {\n                  throw _iteratorError6;\n                }\n              }\n            }\n          } else {\n            var _iteratorNormalCompletion9 = true;\n            var _didIteratorError9 = false;\n            var _iteratorError9 = undefined;\n\n            try {\n              for (var _iterator9 = products[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                var _product3 = _step9.value;\n                var _iteratorNormalCompletion10 = true;\n                var _didIteratorError10 = false;\n                var _iteratorError10 = undefined;\n\n                try {\n                  for (var _iterator10 = _product3.barcode[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                    var _barcodeItem = _step10.value;\n\n                    if (_barcodeItem[name] && _barcodeItem[name].trim().toLowerCase().search(searchProduct[name].trim().toLowerCase()) !== -1) {\n                      var _index3 = false;\n                      var _iteratorNormalCompletion11 = true;\n                      var _didIteratorError11 = false;\n                      var _iteratorError11 = undefined;\n\n                      try {\n                        for (var _iterator11 = _searchProductResult[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                          var _item5 = _step11.value;\n\n                          if (_product3.id === _item5.id) {\n                            _index3 = true;\n                          }\n                        }\n                      } catch (err) {\n                        _didIteratorError11 = true;\n                        _iteratorError11 = err;\n                      } finally {\n                        try {\n                          if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n                            _iterator11.return();\n                          }\n                        } finally {\n                          if (_didIteratorError11) {\n                            throw _iteratorError11;\n                          }\n                        }\n                      }\n\n                      if (!_index3) {\n                        _searchProductResult.push(_product3);\n                      }\n                    } else {\n                      dispatch(searchProductError(name));\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError10 = true;\n                  _iteratorError10 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n                      _iterator10.return();\n                    }\n                  } finally {\n                    if (_didIteratorError10) {\n                      throw _iteratorError10;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError9 = true;\n              _iteratorError9 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                  _iterator9.return();\n                }\n              } finally {\n                if (_didIteratorError9) {\n                  throw _iteratorError9;\n                }\n              }\n            }\n          }\n\n          dispatch(AddSearchResult(_searchProductResult));\n          break;\n        }\n\n      default:\n        break;\n    }\n  };\n}\nexport function searchProductError(name) {\n  return {\n    type: SEARCH_ERROR,\n    name: name\n  };\n}\nexport function AddSearchResult(result) {\n  return {\n    type: ADD_RESULT,\n    result: result\n  };\n}\nexport function AddValue(data) {\n  return {\n    type: ADD_VALUE,\n    data: data\n  };\n}\nexport function selectClassifiersGroup(group) {\n  return {\n    type: SELECT_GROUP,\n    group: group\n  };\n}\nexport function selectGroupsNode(elemsIdInArray) {\n  return {\n    type: SELECT_ID_IN_ARRAY,\n    elemsIdInArray: elemsIdInArray\n  };\n}\nexport function createClassifiers() {\n  return function (dispatch, getState) {\n    var object = [];\n    var elemsIdInArray = getState().products.elemsIdInArray ? _toConsumableArray(getState().products.elemsIdInArray) : null;\n\n    var group = _objectSpread({}, getState().products.group);\n\n    var advancedSearchConfig = _objectSpread({}, getState().products.advancedSearchConfig);\n\n    var groups = _toConsumableArray(getState().group.groups);\n\n    var subGroups = getState().group.subGroups;\n\n    if (elemsIdInArray) {\n      var _iteratorNormalCompletion12 = true;\n      var _didIteratorError12 = false;\n      var _iteratorError12 = undefined;\n\n      try {\n        for (var _iterator12 = elemsIdInArray[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n          var itemId = _step12.value;\n          var _iteratorNormalCompletion13 = true;\n          var _didIteratorError13 = false;\n          var _iteratorError13 = undefined;\n\n          try {\n            for (var _iterator13 = groups[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n              var item = _step13.value;\n\n              if (parseInt(item.id) === parseInt(itemId)) {\n                object.push(item);\n              }\n            }\n          } catch (err) {\n            _didIteratorError13 = true;\n            _iteratorError13 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n                _iterator13.return();\n              }\n            } finally {\n              if (_didIteratorError13) {\n                throw _iteratorError13;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion14 = true;\n          var _didIteratorError14 = false;\n          var _iteratorError14 = undefined;\n\n          try {\n            for (var _iterator14 = subGroups[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n              var _item6 = _step14.value;\n\n              if (parseInt(_item6.id) === parseInt(itemId)) {\n                object.push(_item6);\n              }\n            }\n          } catch (err) {\n            _didIteratorError14 = true;\n            _iteratorError14 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion14 && _iterator14.return != null) {\n                _iterator14.return();\n              }\n            } finally {\n              if (_didIteratorError14) {\n                throw _iteratorError14;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError12 = true;\n        _iteratorError12 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n            _iterator12.return();\n          }\n        } finally {\n          if (_didIteratorError12) {\n            throw _iteratorError12;\n          }\n        }\n      }\n    } else {\n      if (group) {\n        object.push(group);\n      } else {\n        dispatch(createClassifiersError());\n      }\n    }\n\n    advancedSearchConfig['classifiers'] = object;\n    dispatch(createClassifiersSuccess(advancedSearchConfig));\n  };\n}\nexport function removeSelectedClassifier(data) {\n  return function (dispatch, getState) {\n    var advancedSearchConfig = _objectSpread({}, getState().products.advancedSearchConfig);\n\n    for (var _i = 0, _Object$entries = Object.entries(advancedSearchConfig.classifiers); _i < _Object$entries.length; _i++) {\n      var _ref3 = _Object$entries[_i];\n\n      var _ref2 = _slicedToArray(_ref3, 2);\n\n      var key = _ref2[0];\n      var value = _ref2[1];\n\n      if (data.id === value.id) {\n        advancedSearchConfig.classifiers.splice(key, 1);\n      }\n    }\n\n    if (advancedSearchConfig.classifiers.length === 0) {\n      delete advancedSearchConfig.classifiers;\n      dispatch(createClassifiersSuccess(advancedSearchConfig));\n    } else {\n      dispatch(createClassifiersSuccess(advancedSearchConfig));\n    }\n  };\n}\nexport function toggleSwitchValue(name, value) {\n  return function (dispatch, getState) {\n    var advancedSearchConfig = _objectSpread({}, getState().products.advancedSearchConfig);\n\n    advancedSearchConfig[name] = !advancedSearchConfig[name];\n    dispatch(createClassifiersSuccess(advancedSearchConfig));\n  };\n}\nexport function toggleCheckBoxValue(name, check) {\n  return function (dispatch, getState) {\n    var advancedSearchConfig = _objectSpread({}, getState().products.advancedSearchConfig);\n\n    if (check) {\n      advancedSearchConfig[name] = check;\n    } else {\n      delete advancedSearchConfig[name];\n    }\n\n    dispatch(createClassifiersSuccess(advancedSearchConfig));\n  };\n}\nexport function changePageSize(value) {\n  return function (dispatch, getState) {\n    var advancedSearchConfig = _objectSpread({}, getState().products.advancedSearchConfig);\n\n    if (value !== 'all') {\n      advancedSearchConfig.pageSize = +value;\n    } else {\n      advancedSearchConfig.pageSize = value;\n    }\n\n    dispatch(createClassifiersSuccess(advancedSearchConfig));\n  };\n}\nexport function createClassifiersError() {\n  return {\n    type: CREATE_CLASSIFIERS_ERROR\n  };\n}\nexport function createClassifiersSuccess(data) {\n  sessionStorage.setItem('advancedSearchConfig', JSON.stringify(data));\n  return {\n    type: CREATE_CLASSIFIERS_SUCCESS,\n    data: data\n  };\n}\nexport function setSearchText(text) {\n  return function (dispatch, getState) {\n    var advancedSearchText = _objectSpread({}, getState().products.advancedSearchText);\n\n    advancedSearchText = text;\n    dispatch(addSearchText(advancedSearchText));\n  };\n}\nexport function addSearchText(advancedSearchText) {\n  return {\n    type: ADD_SEARCH_TEXT,\n    advancedSearchText: advancedSearchText\n  };\n}\nexport function classifiersToggleModal() {\n  return {\n    type: CLASSIFIERS_TOGGLE_MODAL\n  };\n}\n/*----------------------------------*/\n\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_PRODUCT_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/products/actions.js"],"names":["ADD_BARCODE","ADD_MEASUREMENT_VALUE","ADD_POINTS_VALUE","ADD_PRODUCT_FAIL","ADD_PRODUCT_REQUEST","ADD_PRODUCT_SUCCESS","ADD_RESULT","ADD_SEARCH_TEXT","ADD_UPLOAD_IMAGES","ADD_VALUE","CLASSIFIERS_TOGGLE_MODAL","CREATE_CLASSIFIERS_ERROR","CREATE_CLASSIFIERS_SUCCESS","DELETE_BARCODE","DELETE_PRODUCT_FAIL","DELETE_PRODUCT_REQUEST","DELETE_PRODUCT_SUCCESS","EDIT_PRODUCT_FAIL","EDIT_PRODUCT_REQUEST","EDIT_PRODUCT_SUCCESS","GET_BARCODE_TYPES_FAIL","GET_BARCODE_TYPES_REQUEST","GET_BARCODE_TYPES_SUCCESS","GET_PRODUCT_FAIL","GET_PRODUCT_REQUEST","GET_PRODUCT_SUCCESS","GET_PRODUCTS_FAIL","GET_PRODUCTS_REQUEST","GET_PRODUCTS_SUCCESS","SEARCH_ERROR","SELECT_GROUP","SELECT_ID_IN_ARRAY","SET_BARCODE","SET_PRODUCT_MODAL","TOGGLE_PRODUCT_MODAL","productActions","type","data","types","promise","apiClient","gett","id","posttAdd","putt","deletee","barcodeActions","code","setModalValues","key","value","removeBarcode","index","dispatch","getState","product","products","barcode","splice","setBarcode","setMeasurementValue","name","addMeasurementValue","setPointsValue","addPointValue","SetUploadImages","images","names","item","push","AddUploadImages","deleteUploadImages","imageItem","upImages","forEach","setMainImage","imageFile","setSearchProductValue","searchProduct","AddValue","searchProductResult","test","search","searchProductError","trim","toLowerCase","AddSearchResult","barcodeItem","result","selectClassifiersGroup","group","selectGroupsNode","elemsIdInArray","createClassifiers","object","advancedSearchConfig","groups","subGroups","itemId","parseInt","createClassifiersError","createClassifiersSuccess","removeSelectedClassifier","Object","entries","classifiers","length","toggleSwitchValue","toggleCheckBoxValue","check","changePageSize","pageSize","sessionStorage","setItem","JSON","stringify","setSearchText","text","advancedSearchText","addSearchText","classifiersToggleModal","toggleModal","modalType","obj"],"mappings":"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","sourcesContent":["import {\r\n    ADD_BARCODE,\r\n    ADD_MEASUREMENT_VALUE,\r\n    ADD_POINTS_VALUE,\r\n    ADD_PRODUCT_FAIL,\r\n    ADD_PRODUCT_REQUEST,\r\n    ADD_PRODUCT_SUCCESS,\r\n    ADD_RESULT,\r\n    ADD_SEARCH_TEXT,\r\n    ADD_UPLOAD_IMAGES,\r\n    ADD_VALUE,\r\n    CLASSIFIERS_TOGGLE_MODAL,\r\n    CREATE_CLASSIFIERS_ERROR,\r\n    CREATE_CLASSIFIERS_SUCCESS,\r\n    DELETE_BARCODE,\r\n    DELETE_PRODUCT_FAIL,\r\n    DELETE_PRODUCT_REQUEST,\r\n    DELETE_PRODUCT_SUCCESS,\r\n    EDIT_PRODUCT_FAIL,\r\n    EDIT_PRODUCT_REQUEST,\r\n    EDIT_PRODUCT_SUCCESS,\r\n    GET_BARCODE_TYPES_FAIL,\r\n    GET_BARCODE_TYPES_REQUEST,\r\n    GET_BARCODE_TYPES_SUCCESS,\r\n    GET_PRODUCT_FAIL,\r\n    GET_PRODUCT_REQUEST,\r\n    GET_PRODUCT_SUCCESS,\r\n    GET_PRODUCTS_FAIL,\r\n    GET_PRODUCTS_REQUEST,\r\n    GET_PRODUCTS_SUCCESS,\r\n    SEARCH_ERROR,\r\n    SELECT_GROUP,\r\n    SELECT_ID_IN_ARRAY,\r\n    SET_BARCODE,\r\n    SET_PRODUCT_MODAL,\r\n    TOGGLE_PRODUCT_MODAL\r\n} from \"./actionTypes\";\r\n\r\nexport const productActions = (type, data) => {\r\n    switch (type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`product/${data.id}`)\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`product/?page_size=10000`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`product/`, data)\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`product/${data.id}`, data)\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletee(`product/${data.id}`),\r\n                data\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\nexport const barcodeActions = (type, code) => {\r\n    switch (type) {\r\n        case \"getTypes\":\r\n            return {\r\n                types: [GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`barcode`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                type: ADD_BARCODE,\r\n                code\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                type: DELETE_BARCODE,\r\n                code\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\n\r\nexport const setModalValues = (key, value) => {\r\n\r\n    return {\r\n        type: SET_PRODUCT_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n\r\n/*----------------------------------*/\r\n\r\nexport function removeBarcode(data, index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product};\r\n        product.barcode.splice(index, 1);\r\n        dispatch(setBarcode(product))\r\n    }\r\n}\r\n\r\nexport function setBarcode(product) {\r\n\r\n    return {\r\n        type: SET_BARCODE,\r\n        product\r\n    }\r\n}\r\n\r\nexport function setMeasurementValue(name, data) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product[name] = data.id;\r\n        dispatch(addMeasurementValue(product))\r\n    }\r\n}\r\n\r\nexport function addMeasurementValue(product) {\r\n\r\n    return {\r\n        type: ADD_MEASUREMENT_VALUE,\r\n        product\r\n    }\r\n}\r\n\r\nexport function setPointsValue(name, value) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product[name] = value;\r\n        dispatch(addPointValue(product))\r\n    }\r\n}\r\n\r\nexport function addPointValue(data) {\r\n\r\n    return {\r\n        type: ADD_POINTS_VALUE,\r\n        data\r\n    }\r\n}\r\n\r\nexport function SetUploadImages(name, images) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        let names = []\r\n        for (let item of images) {\r\n            names.push(item.name)\r\n        }\r\n        product[name] = names;\r\n        dispatch(AddUploadImages(product))\r\n    }\r\n}\r\n\r\nexport function deleteUploadImages(imageItem) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product.upImages.forEach(\r\n            (item, index) => {\r\n                if (item.name === imageItem.name) {\r\n                    product.upImages.splice(index, 1);\r\n                }\r\n            }\r\n        )\r\n        dispatch(AddUploadImages(product))\r\n    }\r\n}\r\n\r\nexport function AddUploadImages(product) {\r\n\r\n    return {\r\n        type: ADD_UPLOAD_IMAGES,\r\n        product\r\n    }\r\n}\r\n\r\nexport function setMainImage(imageFile) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product['image'] = imageFile.name;\r\n        dispatch(AddUploadImages(product))\r\n\r\n    }\r\n}\r\n\r\nexport function setSearchProductValue(value, name) {\r\n\r\n    return (dispatch, getState) => {\r\n        let searchProduct = {...getState().products.searchProduct};\r\n        let products = [...getState().products.products];\r\n        searchProduct[name] = value;\r\n        dispatch(AddValue(searchProduct))\r\n        switch (name) {\r\n\r\n            case 'sku':\r\n            case 'name':\r\n            case 'suppliers':\r\n            case 'description': {\r\n                let searchProductResult = [];\r\n                for (let item in searchProduct) {\r\n                    if (item !== name) {\r\n                        searchProduct[item] = '';\r\n                    }\r\n                }\r\n                searchProduct[name] = value;\r\n                if (/\\d/.test(value)) {\r\n                    for (let product of products) {\r\n                        if (product[name] && product[name].search(searchProduct[name]) !== -1) {\r\n                            let index = false;\r\n                            for (let item of searchProductResult) {\r\n                                if (product.id === item.id) {\r\n                                    index = true\r\n                                }\r\n                            }\r\n                            if (!index) {\r\n                                searchProductResult.push(product)\r\n                            }\r\n                        } else {\r\n                            dispatch(searchProductError(name))\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let product of products) {\r\n                        if (product[name] && product[name].trim().toLowerCase().search(searchProduct[name].trim().toLowerCase()) !== -1) {\r\n                            let index = false;\r\n                            for (let item of searchProductResult) {\r\n                                if (product.id === item.id) {\r\n                                    index = true\r\n                                }\r\n                            }\r\n                            if (!index) {\r\n                                searchProductResult.push(product)\r\n                            }\r\n                        } else {\r\n                            dispatch(searchProductError(name))\r\n                        }\r\n                    }\r\n                }\r\n                dispatch(AddSearchResult(searchProductResult))\r\n                break;\r\n            }\r\n            case 'barcode': {\r\n                let searchProductResult = [];\r\n                for (let item in searchProduct) {\r\n                    if (item !== name) {\r\n                        searchProduct[item] = '';\r\n                    }\r\n                }\r\n                searchProduct[name] = value;\r\n                if (/\\d/.test(value)) {\r\n                    for (let product of products) {\r\n                        for(let barcodeItem of product.barcode) {\r\n                            if (barcodeItem[name] && barcodeItem[name].search(searchProduct[name]) !== -1) {\r\n                                let index = false;\r\n                                for (let item of searchProductResult) {\r\n                                    if (product.id === item.id) {\r\n                                        index = true\r\n                                    }\r\n                                }\r\n                                if (!index) {\r\n                                    searchProductResult.push(product)\r\n                                }\r\n                            } else {\r\n                                dispatch(searchProductError(name))\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let product of products) {\r\n                        for(let barcodeItem of product.barcode) {\r\n                            if (barcodeItem[name] && barcodeItem[name].trim().toLowerCase().search(searchProduct[name].trim().toLowerCase()) !== -1) {\r\n                                let index = false;\r\n                                for (let item of searchProductResult) {\r\n                                    if (product.id === item.id) {\r\n                                        index = true\r\n                                    }\r\n                                }\r\n                                if (!index) {\r\n                                    searchProductResult.push(product)\r\n                                }\r\n                            } else {\r\n                                dispatch(searchProductError(name))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dispatch(AddSearchResult(searchProductResult))\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function searchProductError(name) {\r\n\r\n    return {\r\n        type: SEARCH_ERROR,\r\n        name\r\n    }\r\n}\r\n\r\nexport function AddSearchResult(result) {\r\n\r\n    return {\r\n        type: ADD_RESULT,\r\n        result\r\n    }\r\n}\r\n\r\nexport function AddValue(data) {\r\n\r\n    return {\r\n        type: ADD_VALUE,\r\n        data\r\n    }\r\n}\r\n\r\nexport function selectClassifiersGroup(group) {\r\n\r\n    return {\r\n        type: SELECT_GROUP,\r\n        group\r\n    }\r\n}\r\n\r\nexport function selectGroupsNode(elemsIdInArray) {\r\n\r\n    return {\r\n        type: SELECT_ID_IN_ARRAY,\r\n        elemsIdInArray\r\n    }\r\n}\r\n\r\nexport function createClassifiers() {\r\n\r\n    return (dispatch, getState) => {\r\n        let object = [];\r\n        let elemsIdInArray = getState().products.elemsIdInArray ? [...getState().products.elemsIdInArray] : null;\r\n        let group = {...getState().products.group};\r\n        let advancedSearchConfig = {...getState().products.advancedSearchConfig};\r\n        let groups = [...getState().group.groups];\r\n        let subGroups = getState().group.subGroups;\r\n        if (elemsIdInArray) {\r\n            for (let itemId of elemsIdInArray) {\r\n                for (let item of groups) {\r\n                    if (parseInt(item.id) === parseInt(itemId)) {\r\n                        object.push(item)\r\n                    }\r\n                }\r\n                for (let item of subGroups) {\r\n                    if (parseInt(item.id) === parseInt(itemId)) {\r\n                        object.push(item)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (group) {\r\n                object.push(group)\r\n            } else {\r\n                dispatch(createClassifiersError())\r\n            }\r\n        }\r\n        advancedSearchConfig['classifiers'] = object\r\n        dispatch(createClassifiersSuccess(advancedSearchConfig))\r\n    }\r\n}\r\n\r\nexport function removeSelectedClassifier(data) {\r\n\r\n    return (dispatch, getState) => {\r\n        let advancedSearchConfig = {...getState().products.advancedSearchConfig}\r\n\r\n        for(let [key, value] of Object.entries(advancedSearchConfig.classifiers)) {\r\n\r\n            if (data.id === value.id) {\r\n                advancedSearchConfig.classifiers.splice(key, 1);\r\n            }\r\n        }\r\n        if (advancedSearchConfig.classifiers.length === 0 ) {\r\n            delete advancedSearchConfig.classifiers\r\n            dispatch(createClassifiersSuccess(advancedSearchConfig))\r\n        } else {\r\n            dispatch(createClassifiersSuccess(advancedSearchConfig))\r\n        }\r\n    }\r\n}\r\n\r\nexport function toggleSwitchValue(name, value) {\r\n\r\n    return (dispatch, getState) => {\r\n        let advancedSearchConfig = {...getState().products.advancedSearchConfig}\r\n        advancedSearchConfig[name] = !advancedSearchConfig[name]\r\n        dispatch(createClassifiersSuccess(advancedSearchConfig))\r\n    }\r\n}\r\n\r\nexport function toggleCheckBoxValue(name, check) {\r\n\r\n    return (dispatch, getState) => {\r\n        let advancedSearchConfig = {...getState().products.advancedSearchConfig}\r\n\r\n        if (check) {\r\n            advancedSearchConfig[name] = check\r\n        } else {\r\n            delete advancedSearchConfig[name]\r\n        }\r\n        dispatch(createClassifiersSuccess(advancedSearchConfig))\r\n    }\r\n}\r\n\r\nexport function changePageSize(value) {\r\n\r\n    return (dispatch, getState) => {\r\n        let advancedSearchConfig = {...getState().products.advancedSearchConfig}\r\n\r\n        if (value !== 'all') {\r\n            advancedSearchConfig.pageSize = +value\r\n        } else {\r\n            advancedSearchConfig.pageSize = value\r\n        }\r\n        dispatch(createClassifiersSuccess(advancedSearchConfig))\r\n    }\r\n}\r\n\r\nexport function createClassifiersError() {\r\n\r\n    return {\r\n        type: CREATE_CLASSIFIERS_ERROR\r\n    }\r\n}\r\n\r\nexport function createClassifiersSuccess(data) {\r\n    sessionStorage.setItem('advancedSearchConfig', JSON.stringify(data))\r\n    return {\r\n        type: CREATE_CLASSIFIERS_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nexport function setSearchText(text) {\r\n\r\n    return (dispatch, getState) => {\r\n        let advancedSearchText = {...getState().products.advancedSearchText}\r\n\r\n        advancedSearchText = text\r\n        dispatch(addSearchText(advancedSearchText))\r\n    }\r\n}\r\n\r\nexport function addSearchText(advancedSearchText) {\r\n\r\n    return {\r\n        type: ADD_SEARCH_TEXT,\r\n        advancedSearchText\r\n    }\r\n}\r\n\r\nexport function classifiersToggleModal() {\r\n\r\n    return {\r\n        type: CLASSIFIERS_TOGGLE_MODAL\r\n    }\r\n}\r\n\r\n/*----------------------------------*/\r\n\r\nexport const toggleModal = (modalType, id) => {\r\n    let obj = {\"id\": id};\r\n    return {\r\n        type: TOGGLE_PRODUCT_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}