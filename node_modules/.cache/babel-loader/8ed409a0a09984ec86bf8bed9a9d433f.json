{"ast":null,"code":"import { GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS, GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS, ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS, EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS, DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS, GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS, ADD_BARCODE, DELETE_BARCODE, SET_PRODUCT_MODAL, TOGGLE_PRODUCT_MODAL } from \"./actionTypes\";\nvar cols = 'id,name,firstname,lastname';\nvar url = \"products/product\";\nexport var productActions = function productActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.get(url, {\n            param: {\n              id: data.id\n            }\n          });\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.get(url, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.post(url, JSON.stringify({\n            data: data,\n            cols: cols\n          }));\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.put(url, JSON.stringify({\n            id: data.id,\n            data: data,\n            cols: cols\n          }));\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.delete(url, JSON.stringify({\n            id: data.id,\n            data: data,\n            cols: cols\n          }));\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var barcodeActions = function barcodeActions(type, code) {\n  switch (type) {\n    case \"getTypes\":\n      return {\n        types: [GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.get(\"Products/BarcodeType\");\n        }\n      };\n\n    case \"add\":\n      return {\n        type: ADD_BARCODE,\n        code: code\n      };\n\n    case \"delete\":\n      return {\n        type: DELETE_BARCODE,\n        code: code\n      };\n\n    default:\n      return;\n  }\n};\nexport var setModalValues = function setModalValues(key, value) {\n  return {\n    type: SET_PRODUCT_MODAL,\n    key: key,\n    value: value\n  };\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_PRODUCT_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/products/actions.js"],"names":["GET_PRODUCTS_REQUEST","GET_PRODUCTS_FAIL","GET_PRODUCTS_SUCCESS","GET_PRODUCT_REQUEST","GET_PRODUCT_FAIL","GET_PRODUCT_SUCCESS","ADD_PRODUCT_REQUEST","ADD_PRODUCT_FAIL","ADD_PRODUCT_SUCCESS","EDIT_PRODUCT_REQUEST","EDIT_PRODUCT_FAIL","EDIT_PRODUCT_SUCCESS","DELETE_PRODUCT_REQUEST","DELETE_PRODUCT_FAIL","DELETE_PRODUCT_SUCCESS","GET_BARCODE_TYPES_REQUEST","GET_BARCODE_TYPES_FAIL","GET_BARCODE_TYPES_SUCCESS","ADD_BARCODE","DELETE_BARCODE","SET_PRODUCT_MODAL","TOGGLE_PRODUCT_MODAL","cols","url","productActions","type","data","types","promise","apiClient","get","param","id","post","JSON","stringify","put","delete","barcodeActions","code","setModalValues","key","value","toggleModal","modalType","obj"],"mappings":"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","sourcesContent":["import {\r\n    GET_PRODUCTS_REQUEST,GET_PRODUCTS_FAIL,GET_PRODUCTS_SUCCESS,\r\n    GET_PRODUCT_REQUEST,GET_PRODUCT_FAIL,GET_PRODUCT_SUCCESS,\r\n    ADD_PRODUCT_REQUEST,ADD_PRODUCT_FAIL,ADD_PRODUCT_SUCCESS,\r\n    EDIT_PRODUCT_REQUEST,EDIT_PRODUCT_FAIL,EDIT_PRODUCT_SUCCESS,\r\n    DELETE_PRODUCT_REQUEST,DELETE_PRODUCT_FAIL,DELETE_PRODUCT_SUCCESS,\r\n    GET_BARCODE_TYPES_REQUEST,GET_BARCODE_TYPES_FAIL,GET_BARCODE_TYPES_SUCCESS,\r\n    ADD_BARCODE,DELETE_BARCODE,\r\n    SET_PRODUCT_MODAL,TOGGLE_PRODUCT_MODAL\r\n} from \"./actionTypes\";\r\n\r\nlet cols =  'id,name,firstname,lastname';\r\nlet url = `products/product`;\r\nexport const productActions = (type,data) => {\r\n    switch(type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_PRODUCT_REQUEST,GET_PRODUCT_FAIL,GET_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.get(url, { param:{id:data.id} })\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_PRODUCTS_REQUEST,GET_PRODUCTS_FAIL,GET_PRODUCTS_SUCCESS],\r\n                promise: (apiClient) => apiClient.get(url, { cols })\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_PRODUCT_REQUEST,ADD_PRODUCT_FAIL,ADD_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.post(url, JSON.stringify({data, cols}))\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_PRODUCT_REQUEST,EDIT_PRODUCT_FAIL,EDIT_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.put(url,JSON.stringify({id:data.id,data,cols}))\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_PRODUCT_REQUEST,DELETE_PRODUCT_FAIL,DELETE_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.delete(url, JSON.stringify({id:data.id, data,cols }))\r\n            }\r\n        default:\r\n            return ;\r\n    }\r\n};\r\nexport const barcodeActions = (type,code ) => {\r\n    switch(type) {\r\n        case \"getTypes\":\r\n            return {\r\n                types: [GET_BARCODE_TYPES_REQUEST,GET_BARCODE_TYPES_FAIL,GET_BARCODE_TYPES_SUCCESS],\r\n                promise: (apiClient) => apiClient.get(`Products/BarcodeType`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                type: ADD_BARCODE,\r\n                code\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                type: DELETE_BARCODE,\r\n                code\r\n            }\r\n        default:\r\n            return ;\r\n    }\r\n}\r\n\r\n\r\nexport const setModalValues = (key,value) => {\r\n    return {\r\n        type: SET_PRODUCT_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType,id) => {\r\n    let obj = {\"id\":id};\r\n    return {\r\n        type: TOGGLE_PRODUCT_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}