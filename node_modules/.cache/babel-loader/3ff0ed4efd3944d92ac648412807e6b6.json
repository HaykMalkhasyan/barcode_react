{"ast":null,"code":"import { GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS, GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS, SET_ACTIVE_LANGUAGE, SET_MODAL_LANGUAGE, TOGGLE_MODAL_LANGUAGE, SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS, TOGGLE_TRANSLATION_MODAL, SET_TRANSLATION_MODAL, GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS, EDIT_TRANSLATION_REQUEST, SET_TRANSLATE, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS, DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS, GET_TRANSLATION_SIZE_REQUEST, GET_TRANSLATION_SIZE_FAIL, GET_TRANSLATION_SIZE_SUCCESS, SET_TRANSLATION_SIZE_COUNT } from \"./actionTypes\";\nimport SessionStorage from \"../../services/SessionStorage\";\nvar col = 'key, value, lang';\nexport var getLanguages = function getLanguages() {\n  return {\n    types: [GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"languages\");\n    }\n  };\n};\nexport var getTranslations = function getTranslations() {\n  return {\n    types: [GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"translations/?page_size=100000\");\n    }\n  };\n};\nexport var getTranslationsWithSize = function getTranslationsWithSize(size) {\n  return {\n    types: [GET_TRANSLATION_SIZE_REQUEST, GET_TRANSLATION_SIZE_FAIL, GET_TRANSLATION_SIZE_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"translations/?page_size=\".concat(size));\n    }\n  };\n};\nexport var setCount = function setCount(count) {\n  return {\n    type: SET_TRANSLATION_SIZE_COUNT,\n    count: count\n  };\n};\nexport var checkTranslation = function checkTranslation(object) {\n  var index = false;\n  return function (dispatch, getState) {\n    if (getState().languages.translations.length > 0) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = getState().languages.translations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (object.key.toLowerCase() === item.key && object.language === item.language) {\n            index = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (index === false && object.key.length > 0) {\n        index = false;\n        dispatch(AddTraslationFind(object));\n        dispatch(setTranslations(object));\n      }\n    }\n  };\n};\nexport function AddTraslationFind(result) {\n  return {\n    type: SET_TRANSLATE,\n    result: result\n  };\n}\nexport var setTranslations = function setTranslations(data) {\n  return {\n    types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.posttAdd(\"translations/\", data, {\n        col: col\n      });\n    }\n  };\n};\nexport var setLanguage = function setLanguage(lang) {\n  SessionStorage.set(\"lang\", lang);\n  return {\n    type: SET_ACTIVE_LANGUAGE,\n    lang: lang\n  };\n};\nexport var setModalLanguage = function setModalLanguage(lang) {\n  return {\n    type: SET_MODAL_LANGUAGE,\n    lang: lang\n  };\n};\nexport var toggleModalLanguage = function toggleModalLanguage() {\n  return {\n    type: TOGGLE_MODAL_LANGUAGE\n  };\n};\nexport var toggleTranslationModal = function toggleTranslationModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_TRANSLATION_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport var setTranslationsModal = function setTranslationsModal(key, value) {\n  return {\n    type: SET_TRANSLATION_MODAL,\n    key: key,\n    value: value\n  };\n};\nexport var translationActions = function translationActions(type, data) {\n  switch (type) {\n    case 'get':\n      return {\n        types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"translations/\".concat(data.id), {\n            col: col\n          });\n        }\n      };\n\n    case 'edit':\n      return {\n        types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    case 'delete':\n      return {\n        types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/lang/actions.js"],"names":["GET_LANGUAGES_REQUEST","GET_LANGUAGES_FAIL","GET_LANGUAGES_SUCCESS","GET_TRANSLATIONS_REQUEST","GET_TRANSLATIONS_FAIL","GET_TRANSLATIONS_SUCCESS","SET_ACTIVE_LANGUAGE","SET_MODAL_LANGUAGE","TOGGLE_MODAL_LANGUAGE","SET_TRANSLATIONS_REQUEST","SET_TRANSLATIONS_FAIL","SET_TRANSLATIONS_SUCCESS","TOGGLE_TRANSLATION_MODAL","SET_TRANSLATION_MODAL","GET_TRANSLATION_REQUEST","GET_TRANSLATION_FAIL","GET_TRANSLATION_SUCCESS","EDIT_TRANSLATION_REQUEST","SET_TRANSLATE","EDIT_TRANSLATION_FAIL","EDIT_TRANSLATION_SUCCESS","DELETE_TRANSLATION_REQUEST","DELETE_TRANSLATION_FAIL","DELETE_TRANSLATION_SUCCESS","GET_TRANSLATION_SIZE_REQUEST","GET_TRANSLATION_SIZE_FAIL","GET_TRANSLATION_SIZE_SUCCESS","SET_TRANSLATION_SIZE_COUNT","SessionStorage","col","getLanguages","types","promise","apiClient","gett","getTranslations","getTranslationsWithSize","size","setCount","count","type","checkTranslation","object","index","dispatch","getState","languages","translations","length","item","key","toLowerCase","language","AddTraslationFind","setTranslations","result","data","posttAdd","setLanguage","lang","set","setModalLanguage","toggleModalLanguage","toggleTranslationModal","modalType","id","obj","setTranslationsModal","value","translationActions","putt","deletee"],"mappings":"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","sourcesContent":["import {\r\n    GET_LANGUAGES_REQUEST,\r\n    GET_LANGUAGES_FAIL,\r\n    GET_LANGUAGES_SUCCESS,\r\n    GET_TRANSLATIONS_REQUEST,\r\n    GET_TRANSLATIONS_FAIL,\r\n    GET_TRANSLATIONS_SUCCESS,\r\n    SET_ACTIVE_LANGUAGE,\r\n    SET_MODAL_LANGUAGE,\r\n    TOGGLE_MODAL_LANGUAGE,\r\n    SET_TRANSLATIONS_REQUEST,\r\n    SET_TRANSLATIONS_FAIL,\r\n    SET_TRANSLATIONS_SUCCESS,\r\n    TOGGLE_TRANSLATION_MODAL,\r\n    SET_TRANSLATION_MODAL,\r\n    GET_TRANSLATION_REQUEST,\r\n    GET_TRANSLATION_FAIL,\r\n    GET_TRANSLATION_SUCCESS,\r\n    EDIT_TRANSLATION_REQUEST,\r\n    SET_TRANSLATE,\r\n    EDIT_TRANSLATION_FAIL,\r\n    EDIT_TRANSLATION_SUCCESS,\r\n    DELETE_TRANSLATION_REQUEST,\r\n    DELETE_TRANSLATION_FAIL,\r\n    DELETE_TRANSLATION_SUCCESS,\r\n    GET_TRANSLATION_SIZE_REQUEST,\r\n    GET_TRANSLATION_SIZE_FAIL,\r\n    GET_TRANSLATION_SIZE_SUCCESS,\r\n    SET_TRANSLATION_SIZE_COUNT\r\n} from \"./actionTypes\";\r\nimport SessionStorage from \"../../services/SessionStorage\";\r\n\r\nlet col = 'key, value, lang';\r\n\r\nexport const getLanguages = () => {\r\n    return {\r\n        types: [GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`languages`)\r\n    }\r\n};\r\n\r\nexport const getTranslations = () => {\r\n    return {\r\n        types: [GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`translations/?page_size=100000`)\r\n    }\r\n}\r\n\r\nexport const getTranslationsWithSize = size => {\r\n    return {\r\n        types: [GET_TRANSLATION_SIZE_REQUEST, GET_TRANSLATION_SIZE_FAIL, GET_TRANSLATION_SIZE_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`translations/?page_size=${size}`)\r\n    }\r\n}\r\n\r\nexport const setCount = count => {\r\n\r\n    return {\r\n        type: SET_TRANSLATION_SIZE_COUNT,\r\n        count\r\n    }\r\n}\r\n\r\nexport const checkTranslation = object => {\r\n\r\n    let index = false;\r\n\r\n    return (dispatch, getState) => {\r\n\r\n        if (getState().languages.translations.length > 0) {\r\n            for (let item of getState().languages.translations) {\r\n                if (object.key.toLowerCase() === item.key && object.language === item.language) {\r\n                    index = true;\r\n                }\r\n            }\r\n            if (index === false && object.key.length > 0) {\r\n                index = false;\r\n                dispatch(AddTraslationFind(object))\r\n                dispatch(setTranslations(object))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function AddTraslationFind(result) {\r\n\r\n    return {\r\n        type: SET_TRANSLATE,\r\n        result\r\n    }\r\n}\r\n\r\nexport const setTranslations = (data) => {\r\n    return {\r\n        types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.posttAdd(`translations/`, data, {col})\r\n    }\r\n}\r\n\r\nexport const setLanguage = (lang) => {\r\n    SessionStorage.set(\"lang\", lang)\r\n    return {\r\n        type: SET_ACTIVE_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const setModalLanguage = (lang) => {\r\n    return {\r\n        type: SET_MODAL_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const toggleModalLanguage = () => {\r\n    return {\r\n        type: TOGGLE_MODAL_LANGUAGE,\r\n    }\r\n};\r\n\r\nexport const toggleTranslationModal = (modalType, id) => {\r\n    let obj = {\"id\": id};\r\n    return {\r\n        type: TOGGLE_TRANSLATION_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const setTranslationsModal = (key, value) => {\r\n\r\n    return {\r\n        type: SET_TRANSLATION_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n\r\nexport const translationActions = (type, data) => {\r\n\r\n    switch (type) {\r\n        case 'get':\r\n            return {\r\n                types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`translations/${data.id}`, {col})\r\n            };\r\n        case 'edit':\r\n            return {\r\n                types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.putt(`translations/${data.id}`, data, {col})\r\n            }\r\n        case 'delete':\r\n            return {\r\n                types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.deletee(`translations/${data.id}`, data, {col})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}