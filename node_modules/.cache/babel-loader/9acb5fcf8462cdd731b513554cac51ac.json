{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\Translate.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\n\nfunction Translate(props) {\n  var checkWord = function checkWord(translations) {\n    if (translations[props.name]) {\n      return translations[props.name];\n    }\n\n    if (translations.length > 0) {\n      var index = false;\n      var lang = SessionStorage.get('lang') || \"am\";\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = translations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (item.key === props.name.toLowerCase() && item.value === props.name && item.language === lang) {\n            index = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (index === false) {\n        props.setTranslations(props.name.toLowerCase(), props.name);\n      }\n    }\n\n    return props.name;\n  };\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, checkWord(props.translations));\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","connect","bindActionCreators","setTranslations","SessionStorage","Translate","props","checkWord","translations","name","length","index","lang","get","item","key","toLowerCase","value","language","mapDispatchToProps","dispatch","mapStateToProps","state","languages"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,eAAR,QAA8B,sBAA9B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,YAAY,EAAI;AAC9B,QAAIA,YAAY,CAACF,KAAK,CAACG,IAAP,CAAhB,EAA8B;AAC1B,aAAOD,YAAY,CAACF,KAAK,CAACG,IAAP,CAAnB;AACH;;AACD,QAAID,YAAY,CAACE,MAAb,GAAsB,CAA1B,EAA6B;AACzB,UAAIC,KAAK,GAAG,KAAZ;AACA,UAAIC,IAAI,GAAGR,cAAc,CAACS,GAAf,CAAmB,MAAnB,KAA8B,IAAzC;AAFyB;AAAA;AAAA;;AAAA;AAGzB,6BAAiBL,YAAjB,8HAA+B;AAAA,cAAtBM,IAAsB;;AAC3B,cAAIA,IAAI,CAACC,GAAL,KAAaT,KAAK,CAACG,IAAN,CAAWO,WAAX,EAAb,IAAyCF,IAAI,CAACG,KAAL,KAAeX,KAAK,CAACG,IAA9D,IAAsEK,IAAI,CAACI,QAAL,KAAkBN,IAA5F,EAAkG;AAC9FD,YAAAA,KAAK,GAAG,IAAR;AACH;AACJ;AAPwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQzB,UAAIA,KAAK,KAAK,KAAd,EAAqB;AACjBL,QAAAA,KAAK,CAACH,eAAN,CAAsBG,KAAK,CAACG,IAAN,CAAWO,WAAX,EAAtB,EAAgDV,KAAK,CAACG,IAAtD;AACH;AACJ;;AACD,WAAOH,KAAK,CAACG,IAAb;AACH,GAjBD;;AAkBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,SAAS,CAACD,KAAK,CAACE,YAAP,CADd,CADJ;AAKH;;AAED,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAOlB,kBAAkB,CACrB;AACIC,IAAAA,eAAe,EAAfA;AADJ,GADqB,EAIrBiB,QAJqB,CAAzB;AAMH,CAPD;;AASA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHd,IAAAA,YAAY,EAAEc,KAAK,CAACC,SAAN,CAAgBf;AAD3B,GAAP;AAGH,CAJD;;AAMA,eAAeP,OAAO,CAACoB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6Cd,SAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\n\r\nfunction Translate(props) {\r\n    const checkWord = translations => {\r\n        if (translations[props.name]) {\r\n            return translations[props.name]\r\n        }\r\n        if (translations.length > 0) {\r\n            let index = false;\r\n            let lang = SessionStorage.get('lang') || \"am\";\r\n            for (let item of translations) {\r\n                if (item.key === props.name.toLowerCase() && item.value === props.name && item.language === lang) {\r\n                    index = true;\r\n                }\r\n            }\r\n            if (index === false) {\r\n                props.setTranslations(props.name.toLowerCase(), props.name);\r\n            }\r\n        }\r\n        return props.name;\r\n    }\r\n    return (\r\n        <span>\r\n            {checkWord(props.translations)}\r\n        </span>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}