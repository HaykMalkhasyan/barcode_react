{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\components\\\\buttonWithSpinnerUi\\\\buttonWithSpinnerUi.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { green } from '@material-ui/core/colors';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport SaveIcon from '@material-ui/icons/Save';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    wrapper: {\n      margin: theme.spacing(1),\n      position: 'relative'\n    },\n    buttonSuccess: {\n      backgroundColor: green[500],\n      '&:hover': {\n        backgroundColor: green[700]\n      }\n    },\n    fabProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: -6,\n      left: -6,\n      zIndex: 1\n    },\n    buttonProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12\n    }\n  };\n});\nexport default function ButtonWithSpinnerUi() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      success = _React$useState4[0],\n      setSuccess = _React$useState4[1];\n\n  var timer = React.useRef();\n  var buttonClassname = clsx(_defineProperty({}, classes.buttonSuccess, success));\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(timer.current);\n    };\n  }, []);\n\n  var handleButtonClick = function handleButtonClick() {\n    if (!loading) {\n      setSuccess(false);\n      setLoading(true);\n      timer.current = setTimeout(function () {\n        setSuccess(true);\n        setLoading(false);\n      }, 2000);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.wrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    style: {\n      outline: 'none'\n    },\n    \"aria-label\": \"save\",\n    color: \"primary\",\n    className: buttonClassname,\n    onClick: handleButtonClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, success ? React.createElement(CheckIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }) : React.createElement(SaveIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), loading && React.createElement(CircularProgress, {\n    size: 68,\n    className: classes.fabProgress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/components/buttonWithSpinnerUi/buttonWithSpinnerUi.js"],"names":["React","clsx","makeStyles","CircularProgress","green","Button","Fab","CheckIcon","SaveIcon","useStyles","theme","root","display","alignItems","wrapper","margin","spacing","position","buttonSuccess","backgroundColor","fabProgress","color","top","left","zIndex","buttonProgress","marginTop","marginLeft","ButtonWithSpinnerUi","classes","useState","loading","setLoading","success","setSuccess","timer","useRef","buttonClassname","useEffect","clearTimeout","current","handleButtonClick","setTimeout","outline"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    wrapper: {\r\n        margin: theme.spacing(1),\r\n        position: 'relative',\r\n    },\r\n    buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        '&:hover': {\r\n            backgroundColor: green[700],\r\n        },\r\n    },\r\n    fabProgress: {\r\n        color: green[500],\r\n        position: 'absolute',\r\n        top: -6,\r\n        left: -6,\r\n        zIndex: 1,\r\n    },\r\n    buttonProgress: {\r\n        color: green[500],\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n}));\r\n\r\nexport default function ButtonWithSpinnerUi() {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [success, setSuccess] = React.useState(false);\r\n    const timer = React.useRef();\r\n\r\n    const buttonClassname = clsx({\r\n        [classes.buttonSuccess]: success,\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        return () => {\r\n            clearTimeout(timer.current);\r\n        };\r\n    }, []);\r\n\r\n    const handleButtonClick = () => {\r\n        if (!loading) {\r\n            setSuccess(false);\r\n            setLoading(true);\r\n            timer.current = setTimeout(() => {\r\n                setSuccess(true);\r\n                setLoading(false);\r\n            }, 2000);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.wrapper}>\r\n                <Fab\r\n                    style={{outline: 'none'}}\r\n                    aria-label=\"save\"\r\n                    color=\"primary\"\r\n                    className={buttonClassname}\r\n                    onClick={handleButtonClick}\r\n                >\r\n                    {success ? <CheckIcon /> : <SaveIcon />}\r\n                </Fab>\r\n                {loading && <CircularProgress size={68} className={classes.fabProgress} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}