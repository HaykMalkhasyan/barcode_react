{"ast":null,"code":"import { GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS, GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS, ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS, EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS, DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS, GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS, SET_SUPPLIER_MODAL, TOGGLE_SUPPLIER_MODAL } from \"./actionTypes\";\nvar cols = 'id,name,type,hh,address,phone'; // let url = `Supplier/Suppliers`;\n\nvar url = \"supplier/\";\nexport var supplierActions = function supplierActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"suppliers/\".concat(data.id), {\n            cols: cols\n          });\n        }\n      };\n    // case \"getAll\":\n    //     return {\n    //         types: [GET_SUPPLIERS_REQUEST,GET_SUPPLIERS_FAIL,GET_SUPPLIERS_SUCCESS],\n    //         promise: (apiClient) => apiClient.get(url, { cols })\n    //     }\n\n    case \"getAll\":\n      return {\n        types: [GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett('suppliers/', {\n            cols: cols\n          });\n        }\n      };\n\n    case \"add\":\n      console.log(type, data);\n      return {\n        types: [ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.postt(\"suppliers/\", JSON.stringify(data), {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"suppliers/\".concat(data.id), data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.delete(\"suppliers/\".concat(data.id), {\n            cols: cols\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var getBanks = function getBanks() {\n  return {\n    types: [GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.get('Supplier/Banks');\n    }\n  };\n};\nexport var setModalValues = function setModalValues(key, value, index, add) {\n  return {\n    type: SET_SUPPLIER_MODAL,\n    key: key,\n    value: value,\n    index: index,\n    add: add\n  };\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_SUPPLIER_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/suppliers/actions.js"],"names":["GET_SUPPLIERS_REQUEST","GET_SUPPLIERS_FAIL","GET_SUPPLIERS_SUCCESS","GET_SUPPLIER_REQUEST","GET_SUPPLIER_FAIL","GET_SUPPLIER_SUCCESS","ADD_SUPPLIER_REQUEST","ADD_SUPPLIER_FAIL","ADD_SUPPLIER_SUCCESS","EDIT_SUPPLIER_REQUEST","EDIT_SUPPLIER_FAIL","EDIT_SUPPLIER_SUCCESS","DELETE_SUPPLIER_REQUEST","DELETE_SUPPLIER_FAIL","DELETE_SUPPLIER_SUCCESS","GET_BANKS_REQUEST","GET_BANKS_FAIL","GET_BANKS_SUCCESS","SET_SUPPLIER_MODAL","TOGGLE_SUPPLIER_MODAL","cols","url","supplierActions","type","data","types","promise","apiClient","gett","id","console","log","postt","JSON","stringify","putt","delete","getBanks","get","setModalValues","key","value","index","add","toggleModal","modalType","obj"],"mappings":"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","sourcesContent":["import {\r\n    GET_SUPPLIERS_REQUEST,GET_SUPPLIERS_FAIL,GET_SUPPLIERS_SUCCESS,\r\n    GET_SUPPLIER_REQUEST,GET_SUPPLIER_FAIL,GET_SUPPLIER_SUCCESS,\r\n    ADD_SUPPLIER_REQUEST,ADD_SUPPLIER_FAIL,ADD_SUPPLIER_SUCCESS,\r\n    EDIT_SUPPLIER_REQUEST,EDIT_SUPPLIER_FAIL,EDIT_SUPPLIER_SUCCESS,\r\n    DELETE_SUPPLIER_REQUEST,DELETE_SUPPLIER_FAIL,DELETE_SUPPLIER_SUCCESS,\r\n    GET_BANKS_REQUEST,GET_BANKS_FAIL,GET_BANKS_SUCCESS,\r\n    SET_SUPPLIER_MODAL,TOGGLE_SUPPLIER_MODAL\r\n} from \"./actionTypes\";\r\nlet cols =  'id,name,type,hh,address,phone';\r\n// let url = `Supplier/Suppliers`;\r\nlet url = `supplier/`;\r\n\r\nexport const supplierActions = (type,data) => {\r\n    switch(type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_SUPPLIER_REQUEST,GET_SUPPLIER_FAIL,GET_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`suppliers/${data.id}`, {cols} )\r\n            }\r\n        // case \"getAll\":\r\n        //     return {\r\n        //         types: [GET_SUPPLIERS_REQUEST,GET_SUPPLIERS_FAIL,GET_SUPPLIERS_SUCCESS],\r\n        //         promise: (apiClient) => apiClient.get(url, { cols })\r\n        //     }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_SUPPLIERS_REQUEST,GET_SUPPLIERS_FAIL,GET_SUPPLIERS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett('suppliers/', {cols})\r\n            }\r\n        case \"add\":\r\n            console.log(type, data)\r\n            return {\r\n                types: [ADD_SUPPLIER_REQUEST,ADD_SUPPLIER_FAIL,ADD_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.postt(`suppliers/`, JSON.stringify(data), {cols})\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_SUPPLIER_REQUEST,EDIT_SUPPLIER_FAIL,EDIT_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`suppliers/${data.id}`,data,{cols})\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_SUPPLIER_REQUEST,DELETE_SUPPLIER_FAIL,DELETE_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.delete(`suppliers/${data.id}`, {cols} )\r\n            }\r\n        default: return ;\r\n    }\r\n};\r\n\r\nexport const getBanks = () => {\r\n    return {\r\n        types: [GET_BANKS_REQUEST,GET_BANKS_FAIL,GET_BANKS_SUCCESS],\r\n        promise: (apiClient) => apiClient.get('Supplier/Banks')\r\n    }\r\n}\r\n\r\nexport const setModalValues = (key,value,index,add) => {\r\n    return {\r\n        type: SET_SUPPLIER_MODAL,\r\n        key,\r\n        value,\r\n        index,\r\n        add\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType,id) => {\r\n    let obj = {\"id\":id};\r\n    return {\r\n        type: TOGGLE_SUPPLIER_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}