{"ast":null,"code":"import { GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS, GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS, ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS, EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS, DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS, GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS, ADD_BARCODE, DELETE_BARCODE, SET_PRODUCT_MODAL, TOGGLE_PRODUCT_MODAL } from \"./actionTypes\";\nvar url = \"Products/Product\";\nexport var productActions = function productActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.get(url, {\n            param: {\n              id: data.id\n            }\n          });\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.get(url);\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.post(url, data);\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.put(url, data, {\n            param: {\n              id: data.id\n            }\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.delete(url, {\n            param: {\n              id: data.id\n            }\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var barcodeActions = function barcodeActions(type, code) {\n  switch (type) {\n    case \"getTypes\":\n      return {\n        types: [GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.get(\"Products/BarcodeType\");\n        }\n      };\n\n    case \"add\":\n      return {\n        type: ADD_BARCODE,\n        code: code\n      };\n\n    case \"delete\":\n      return {\n        type: DELETE_BARCODE,\n        code: code\n      };\n\n    default:\n      return;\n  }\n};\nexport var setModalValues = function setModalValues(key, value) {\n  console.log('aaaaaaaaa', key, value);\n  return {\n    type: SET_PRODUCT_MODAL,\n    key: key,\n    value: value\n  };\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_PRODUCT_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/products/actions.js"],"names":["GET_PRODUCTS_REQUEST","GET_PRODUCTS_FAIL","GET_PRODUCTS_SUCCESS","GET_PRODUCT_REQUEST","GET_PRODUCT_FAIL","GET_PRODUCT_SUCCESS","ADD_PRODUCT_REQUEST","ADD_PRODUCT_FAIL","ADD_PRODUCT_SUCCESS","EDIT_PRODUCT_REQUEST","EDIT_PRODUCT_FAIL","EDIT_PRODUCT_SUCCESS","DELETE_PRODUCT_REQUEST","DELETE_PRODUCT_FAIL","DELETE_PRODUCT_SUCCESS","GET_BARCODE_TYPES_REQUEST","GET_BARCODE_TYPES_FAIL","GET_BARCODE_TYPES_SUCCESS","ADD_BARCODE","DELETE_BARCODE","SET_PRODUCT_MODAL","TOGGLE_PRODUCT_MODAL","url","productActions","type","data","types","promise","apiClient","get","param","id","post","put","delete","barcodeActions","code","setModalValues","key","value","console","log","toggleModal","modalType","obj"],"mappings":"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","sourcesContent":["import {\r\n    GET_PRODUCTS_REQUEST,GET_PRODUCTS_FAIL,GET_PRODUCTS_SUCCESS,\r\n    GET_PRODUCT_REQUEST,GET_PRODUCT_FAIL,GET_PRODUCT_SUCCESS,\r\n    ADD_PRODUCT_REQUEST,ADD_PRODUCT_FAIL,ADD_PRODUCT_SUCCESS,\r\n    EDIT_PRODUCT_REQUEST,EDIT_PRODUCT_FAIL,EDIT_PRODUCT_SUCCESS,\r\n    DELETE_PRODUCT_REQUEST,DELETE_PRODUCT_FAIL,DELETE_PRODUCT_SUCCESS,\r\n    GET_BARCODE_TYPES_REQUEST,GET_BARCODE_TYPES_FAIL,GET_BARCODE_TYPES_SUCCESS,\r\n    ADD_BARCODE,DELETE_BARCODE,\r\n    SET_PRODUCT_MODAL,TOGGLE_PRODUCT_MODAL\r\n} from \"./actionTypes\";\r\n\r\nlet url = `Products/Product`;\r\nexport const productActions = (type,data) => {\r\n    switch(type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_PRODUCT_REQUEST,GET_PRODUCT_FAIL,GET_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.get(url, { param:{id:data.id} })\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_PRODUCTS_REQUEST,GET_PRODUCTS_FAIL,GET_PRODUCTS_SUCCESS],\r\n                promise: (apiClient) => apiClient.get(url)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_PRODUCT_REQUEST,ADD_PRODUCT_FAIL,ADD_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.post(url,data)\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_PRODUCT_REQUEST,EDIT_PRODUCT_FAIL,EDIT_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.put(url,data,{param:{id:data.id}})\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_PRODUCT_REQUEST,DELETE_PRODUCT_FAIL,DELETE_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.delete(url, { param:{id:data.id} })\r\n            }\r\n        default:\r\n            return ;\r\n    }\r\n};\r\nexport const barcodeActions = (type,code ) => {\r\n    switch(type) {\r\n        case \"getTypes\":\r\n            return {\r\n                types: [GET_BARCODE_TYPES_REQUEST,GET_BARCODE_TYPES_FAIL,GET_BARCODE_TYPES_SUCCESS],\r\n                promise: (apiClient) => apiClient.get(`Products/BarcodeType`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                type: ADD_BARCODE,\r\n                code\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                type: DELETE_BARCODE,\r\n                code\r\n            }\r\n        default:\r\n            return ;\r\n    }\r\n}\r\n\r\n\r\nexport const setModalValues = (key,value) => {\r\n    console.log('aaaaaaaaa',key, value)\r\n    return {\r\n        type: SET_PRODUCT_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType,id) => {\r\n    let obj = {\"id\":id};\r\n    return {\r\n        type: TOGGLE_PRODUCT_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}