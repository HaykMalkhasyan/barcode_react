{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\pages\\\\users\\\\userModal.js\";\nimport React, { useState } from \"react\";\nimport { Col, Row, FormGroup, Label, Button, ModalBody, ModalFooter, Input, Modal, ModalHeader } from \"reactstrap\";\nimport Translate from \"../../../Translate\"; // import jwt from \"jwt-simple\";\n\nvar UserModal = function UserModal(props) {\n  console.log('props.positions', props.positions);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var modalBodyContent = function modalBodyContent() {\n    if (props.type === \"delete\") {\n      return React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        className: \"form-control  \".concat(props.errors.password ? 'is-invalid' : ''),\n        type: \"password\",\n        id: \"password\",\n        onBlur: function onBlur(event) {\n          return event.target.value.length < 8 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        } // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\");\n        } // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\n        ,\n        value: props.user.password ? props.user.password : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: 'Դուք համոզված ե՞ք ջնջել',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"firstName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"firstname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(props.errors.first_name ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"firstName\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"first_name\", event.target.value);\n        },\n        value: props.user.first_name ? props.user.first_name : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"lastName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"lastname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(props.errors.last_name ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"lastName\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"last_name\", event.target.value);\n        },\n        value: props.user.last_name ? props.user.last_name : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 || !event.target.value.includes('@') || !event.target.value.includes('.') ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(props.errors.email ? 'is-invalid' : ''),\n        type: \"email\",\n        id: \"email\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"email\", event.target.value);\n        },\n        value: props.user.email ? props.user.email : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"company\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"company\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"form-control  \".concat(props.errors.company_id ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"company\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"company_id\", event.target.value);\n        },\n        value: props.user.company_id ? props.user.company_id : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(props.errors.username ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"username\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"username\", event.target.value);\n        },\n        value: props.user.username ? props.user.username : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        className: \"form-control  \".concat(props.errors.password ? 'is-invalid' : ''),\n        type: \"password\",\n        id: \"password\",\n        onBlur: function onBlur(event) {\n          return event.target.value.length < 8 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        } // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\");\n        } // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\n        ,\n        value: props.user.password ? props.user.password : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"position\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"positions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      })), React.createElement(Input, {\n        type: \"select\",\n        id: \"position\",\n        value: props.user.position_id || \"0\" // defaultValue={\"0\"}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"position_id\", event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: 'choose',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      })), props.positions ? props.positions.map(function (item, key) {\n        return React.createElement(\"option\", {\n          value: item.id,\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, item.name);\n      }) : React.createElement(Translate, {\n        name: 'empty',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      })), React.createElement(Input, {\n        type: \"select\",\n        id: \"active\",\n        value: props.user.active || \"0\" // defaultValue={\"0\"}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"active\", event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: 'yes',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      })), React.createElement(\"option\", {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: 'no',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }))))))));\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    isOpen: props.modal[props.type],\n    toggle: function toggle() {\n      props.toggleModal(props.type);\n    },\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: function toggle() {\n      props.toggleModal(props.type);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: props.type + \"User\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  })), modalBodyContent(), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    outline: true,\n    type: \"submit\",\n    onClick: function onClick() {\n      console.log(props.user.username);\n\n      if (props.typ !== 'delete' && props.user.first_name && props.user.first_name.length && props.user.last_name && props.user.last_name.length && props.user.email && props.user.email.length && props.user.email.includes('@') && props.user.email.includes('.') && props.user.username && props.user.username.length && props.user.password && props.user.password.length >= 8) {\n        setStatus('');\n        props.userActions(props.type, props.user);\n      } else {\n        setStatus('#f44');\n      }\n\n      if (props.type === 'delete') {\n        props.userActions(props.type, props.user);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: \"confirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  })))));\n};\n\nexport default UserModal;","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/pages/users/userModal.js"],"names":["React","useState","Col","Row","FormGroup","Label","Button","ModalBody","ModalFooter","Input","Modal","ModalHeader","Translate","UserModal","props","console","log","positions","status","setStatus","modalBodyContent","type","borderColor","errors","password","event","target","value","length","style","setModalValues","user","first_name","last_name","includes","email","company_id","username","position_id","map","item","key","id","name","active","modal","toggleModal","typ","userActions"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {\r\n    Col,\r\n    Row,\r\n    FormGroup,\r\n    Label,\r\n    Button,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Input,\r\n    Modal,\r\n    ModalHeader\r\n} from \"reactstrap\";\r\nimport Translate from \"../../../Translate\";\r\n// import jwt from \"jwt-simple\";\r\n\r\nconst UserModal = (props) => {\r\n    console.log('props.positions', props.positions);\r\n    const [status, setStatus] = useState('')\r\n    const modalBodyContent = () => {\r\n        if (props.type === \"delete\") {\r\n            return (\r\n                <ModalBody>\r\n                    <FormGroup>\r\n                        <Label for=\"password\"><Translate name=\"password\"/></Label>\r\n                        <input\r\n                            style={{borderColor: status}}\r\n                            className={`form-control  ${props.errors.password ? 'is-invalid' : ''}`}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            onBlur={event => event.target.value.length < 8 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                            // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\r\n                            onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\")}\r\n                            // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\r\n                            value={props.user.password ? props.user.password : \"\"}\r\n\r\n                        />\r\n                    </FormGroup>\r\n                    <p>\r\n                        <Translate name={'Դուք համոզված ե՞ք ջնջել'}/>\r\n                    </p>\r\n                </ModalBody>\r\n            )\r\n        } else {\r\n\r\n            return (\r\n\r\n                <ModalBody>\r\n                    <form>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"firstName\"><Translate name=\"firstname\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        onBlur={event => event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${props.errors.first_name ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"firstName\"\r\n                                        onChange={event => props.setModalValues(\"first_name\", event.target.value)}\r\n                                        value={props.user.first_name ? props.user.first_name : ''}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"lastName\"><Translate name=\"lastname\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        onBlur={event => event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${props.errors.last_name ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"lastName\"\r\n                                        onChange={event => props.setModalValues(\"last_name\", event.target.value)}\r\n                                        value={props.user.last_name ? props.user.last_name : \"\"}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"email\"><Translate name=\"email\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        onBlur={event => event.target.value.length === 0 || !event.target.value.includes('@') || !event.target.value.includes('.') ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${props.errors.email ? 'is-invalid' : ''}`}\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        onChange={event => props.setModalValues(\"email\", event.target.value)}\r\n                                        value={props.user.email ? props.user.email : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"company\"><Translate name=\"company\"/></Label>\r\n                                    <input\r\n                                        className={`form-control  ${props.errors.company_id ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"company\"\r\n                                        onChange={event => props.setModalValues(\"company_id\", event.target.value)}\r\n                                        value={props.user.company_id ? props.user.company_id : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"username\"><Translate name=\"username\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        onBlur={event => event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${props.errors.username ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"username\"\r\n                                        onChange={event => props.setModalValues(\"username\", event.target.value)}\r\n                                        value={props.user.username ? props.user.username : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"password\"><Translate name=\"password\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        className={`form-control  ${props.errors.password ? 'is-invalid' : ''}`}\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        onBlur={event => event.target.value.length < 8 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\r\n                                        onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\")}\r\n                                        // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\r\n                                        value={props.user.password ? props.user.password : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"position\"><Translate name=\"positions\"/></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        id=\"position\"\r\n                                        value={props.user.position_id || \"0\"}\r\n                                        // defaultValue={\"0\"}\r\n                                        onChange={event => props.setModalValues(\"position_id\", event.target.value)}\r\n                                    >\r\n                                        <option value=\"0\"><Translate name={'choose'}/></option>\r\n                                        {\r\n                                            props.positions ?\r\n                                                props.positions.map(\r\n                                                    (item, key) => {\r\n                                                        return <option value={item.id} key={key}>{item.name}</option>\r\n                                                    }\r\n                                                )\r\n                                                :\r\n                                                <Translate name={'empty'} />\r\n                                        }\r\n                                    </Input>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"active\"><Translate name=\"active\"/></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        id=\"active\"\r\n                                        value={props.user.active || \"0\"}\r\n                                        // defaultValue={\"0\"}\r\n                                        onChange={event => props.setModalValues(\"active\", event.target.value)}\r\n                                    >\r\n                                        <option value=\"0\"><Translate name={'yes'}/></option>\r\n                                        <option value=\"1\"><Translate name={'no'}/></option>\r\n                                    </Input>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n                    </form>\r\n\r\n                </ModalBody>\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Modal isOpen={props.modal[props.type]} toggle={() => {\r\n                props.toggleModal(props.type)\r\n            }} size=\"lg\">\r\n                <ModalHeader toggle={() => {\r\n                    props.toggleModal(props.type)\r\n                }}><Translate\r\n                    name={props.type + \"User\"}/></ModalHeader>\r\n                {modalBodyContent()}\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        outline\r\n                        type=\"submit\"\r\n                        onClick={function () {\r\n                            console.log(props.user.username)\r\n                            if (props.typ !== 'delete' && (props.user.first_name && props.user.first_name.length) && (props.user.last_name && props.user.last_name.length) && (props.user.email && props.user.email.length && props.user.email.includes('@') && props.user.email.includes('.')) && (props.user.username && props.user.username.length) && (props.user.password && props.user.password.length >= 8)) {\r\n                                setStatus('')\r\n                                props.userActions(props.type, props.user);\r\n                            } else {\r\n                                setStatus('#f44')\r\n                            }\r\n                            if (props.type === 'delete') {\r\n                                props.userActions(props.type, props.user);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Translate name=\"confirm\"/>\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n        </React.Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default UserModal;"]},"metadata":{},"sourceType":"module"}