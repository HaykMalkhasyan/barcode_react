{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\Translate.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\n\nvar Translate =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Translate, _Component);\n\n  function Translate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Translate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Translate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.checkWord = function () {\n      if (_this.props.translations[_this.props.name]) {\n        return _this.props.translations[_this.props.name];\n      }\n\n      if (_this.props.translations.length > 0) {\n        var index = false;\n        var lang = SessionStorage.get('lang') || \"am\";\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _this.props.translations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.key === _this.props.name.toLowerCase() && item.value === _this.props.name && item.language === lang) {\n              index = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (index === false) {\n          _this.props.setTranslations(_this.props.name.toLowerCase(), _this.props.name, lang);\n        }\n      }\n\n      return _this.props.name;\n    };\n\n    return _this;\n  }\n\n  _createClass(Translate, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, ret);\n    }\n  }]);\n\n  return Translate;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","Component","connect","bindActionCreators","setTranslations","SessionStorage","Translate","checkWord","props","translations","name","length","index","lang","get","item","key","toLowerCase","value","language","ret","mapDispatchToProps","dispatch","mapStateToProps","state","languages"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,eAAR,QAA8B,sBAA9B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;IAGMC,S;;;;;;;;;;;;;;;;;;UACFC,S,GAAY,YAAM;AACd,UAAI,MAAKC,KAAL,CAAWC,YAAX,CAAwB,MAAKD,KAAL,CAAWE,IAAnC,CAAJ,EAA8C;AAC1C,eAAO,MAAKF,KAAL,CAAWC,YAAX,CAAwB,MAAKD,KAAL,CAAWE,IAAnC,CAAP;AACH;;AACD,UAAI,MAAKF,KAAL,CAAWC,YAAX,CAAwBE,MAAxB,GAAiC,CAArC,EAAwC;AACpC,YAAIC,KAAK,GAAG,KAAZ;AACA,YAAIC,IAAI,GAAGR,cAAc,CAACS,GAAf,CAAmB,MAAnB,KAA8B,IAAzC;AAFoC;AAAA;AAAA;;AAAA;AAGpC,+BAAiB,MAAKN,KAAL,CAAWC,YAA5B,8HAA0C;AAAA,gBAAjCM,IAAiC;;AACtC,gBAAIA,IAAI,CAACC,GAAL,KAAa,MAAKR,KAAL,CAAWE,IAAX,CAAgBO,WAAhB,EAAb,IAA8CF,IAAI,CAACG,KAAL,KAAe,MAAKV,KAAL,CAAWE,IAAxE,IAAgFK,IAAI,CAACI,QAAL,KAAkBN,IAAtG,EAA4G;AACxGD,cAAAA,KAAK,GAAG,IAAR;AACH;AACJ;AAPmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQpC,YAAIA,KAAK,KAAK,KAAd,EAAqB;AACjB,gBAAKJ,KAAL,CAAWJ,eAAX,CAA2B,MAAKI,KAAL,CAAWE,IAAX,CAAgBO,WAAhB,EAA3B,EAA0D,MAAKT,KAAL,CAAWE,IAArE,EAA2EG,IAA3E;AACH;AACJ;;AACD,aAAO,MAAKL,KAAL,CAAWE,IAAlB;AACH,K;;;;;;;6BACO;AAEL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGQU,GAHR,CADJ;AAQH;;;;EA7BoBnB,S;;AAgCxB,IAAMoB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAOnB,kBAAkB,CACrB;AACIC,IAAAA,eAAe,EAAfA;AADJ,GADqB,EAIrBkB,QAJqB,CAAzB;AAMH,CAPD;;AASA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHf,IAAAA,YAAY,EAAEe,KAAK,CAACC,SAAN,CAAgBhB;AAD3B,GAAP;AAGH,CAJD;;AAMA,eAAeP,OAAO,CAACqB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6Cf,SAA7C,CAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\n\r\nclass Translate extends Component {\r\n    checkWord = () => {\r\n        if (this.props.translations[this.props.name]) {\r\n            return this.props.translations[this.props.name]\r\n        }\r\n        if (this.props.translations.length > 0) {\r\n            let index = false;\r\n            let lang = SessionStorage.get('lang') || \"am\";\r\n            for (let item of this.props.translations) {\r\n                if (item.key === this.props.name.toLowerCase() && item.value === this.props.name && item.language === lang) {\r\n                    index = true;\r\n                }\r\n            }\r\n            if (index === false) {\r\n                this.props.setTranslations(this.props.name.toLowerCase(), this.props.name, lang);\r\n            }\r\n        }\r\n        return this.props.name;\r\n    }\r\n   render() {\r\n\r\n       return (\r\n           <span>\r\n            {/*{checkWord()}*/}\r\n               {\r\n                   ret\r\n               }\r\n        </span>\r\n       )\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}