{"ast":null,"code":"import { GET_USERS_REQUEST, GET_USERS_FAIL, GET_USERS_SUCCESS, GET_USER_REQUEST, GET_USER_FAIL, GET_USER_SUCCESS, ADD_USER_REQUEST, ADD_USER_FAIL, ADD_USER_SUCCESS, EDIT_USER_REQUEST, EDIT_USER_FAIL, EDIT_USER_SUCCESS, DELETE_USER_REQUEST, DELETE_USER_FAIL, DELETE_USER_SUCCESS, SET_MODAL_VALUES } from \"./actionTypes\";\nvar cols = 'id,username,firstname,lastname';\nvar url = \"User/Users\";\nexport var getUsers = function getUsers() {\n  return {\n    types: [GET_USERS_REQUEST, GET_USERS_FAIL, GET_USERS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.get(url, JSON.stringify({\n        cols: cols\n      }));\n    }\n  };\n};\nexport var getUser = function getUser(id) {\n  return {\n    types: [GET_USER_REQUEST, GET_USER_FAIL, GET_USER_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.get(url, JSON.stringify({\n        param: {\n          id: id\n        }\n      }));\n    }\n  };\n};\nexport var addUser = function addUser(data) {\n  console.log(data);\n  var errors = {};\n\n  switch (data) {\n    case 'name':\n      errors.fullName = value.length < 5 ? 'Full Name must be 5 characters long!' : '';\n      break;\n\n    case 'email':\n      errors.email = validEmailRegex.test(value) ? '' : 'Email is not valid!';\n      break;\n\n    case 'password':\n      errors.password = value.length < 8 ? 'Password must be 8 characters long!' : '';\n      break;\n\n    default:\n      break;\n  }\n\n  if (!data.active) {\n    data.active = 0;\n  }\n\n  var types = [ADD_USER_REQUEST, ADD_USER_FAIL, ADD_USER_SUCCESS];\n\n  var promise = function promise(apiClient) {\n    return apiClient.post(url, JSON.stringify({\n      data: data,\n      cols: cols\n    }));\n  };\n\n  if (data.id) {\n    types = [EDIT_USER_REQUEST, EDIT_USER_FAIL, EDIT_USER_SUCCESS];\n\n    promise = function promise(apiClient) {\n      return apiClient.put(url, JSON.stringify({\n        data: data,\n        cols: cols,\n        id: data.id\n      }));\n    };\n  }\n\n  return {\n    types: types,\n    promise: promise\n  };\n};\nexport var deleteUser = function deleteUser(id) {\n  return {\n    types: [DELETE_USER_REQUEST, DELETE_USER_FAIL, DELETE_USER_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.delete(url, JSON.stringify({\n        id: id,\n        cols: cols\n      }));\n    }\n  };\n};\nexport var userModal = function userModal(type, modal) {\n  return {\n    type: type.toUpperCase() + '_MODAL',\n    modal: modal\n  };\n};\nexport var setModalValues = function setModalValues(value) {\n  return {\n    type: SET_MODAL_VALUES,\n    value: value\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/users/actions.js"],"names":["GET_USERS_REQUEST","GET_USERS_FAIL","GET_USERS_SUCCESS","GET_USER_REQUEST","GET_USER_FAIL","GET_USER_SUCCESS","ADD_USER_REQUEST","ADD_USER_FAIL","ADD_USER_SUCCESS","EDIT_USER_REQUEST","EDIT_USER_FAIL","EDIT_USER_SUCCESS","DELETE_USER_REQUEST","DELETE_USER_FAIL","DELETE_USER_SUCCESS","SET_MODAL_VALUES","cols","url","getUsers","types","promise","apiClient","get","JSON","stringify","getUser","id","param","addUser","data","console","log","errors","fullName","value","length","email","validEmailRegex","test","password","active","post","put","deleteUser","delete","userModal","type","modal","toUpperCase","setModalValues"],"mappings":"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","sourcesContent":["import {\r\n    GET_USERS_REQUEST,GET_USERS_FAIL,GET_USERS_SUCCESS,\r\n    GET_USER_REQUEST,GET_USER_FAIL,GET_USER_SUCCESS,\r\n    ADD_USER_REQUEST,ADD_USER_FAIL,ADD_USER_SUCCESS,\r\n    EDIT_USER_REQUEST,EDIT_USER_FAIL,EDIT_USER_SUCCESS,\r\n    DELETE_USER_REQUEST,DELETE_USER_FAIL,DELETE_USER_SUCCESS,\r\n    SET_MODAL_VALUES\r\n} from \"./actionTypes\";\r\n\r\nlet cols =  'id,username,firstname,lastname';\r\nlet url = `User/Users`;\r\nexport const getUsers = () => {\r\n    return {\r\n        types: [GET_USERS_REQUEST,GET_USERS_FAIL,GET_USERS_SUCCESS],\r\n        promise: (apiClient) => apiClient.get(url, JSON.stringify({ cols }))\r\n    }\r\n};\r\n\r\nexport const getUser = ( id ) => {\r\n    return {\r\n        types: [GET_USER_REQUEST,GET_USER_FAIL,GET_USER_SUCCESS],\r\n        promise: (apiClient) => apiClient.get(url, JSON.stringify({ param:{id} }))\r\n    }\r\n};\r\n\r\nexport const addUser = (data) => {\r\n    console.log(data)\r\n    let errors = {}\r\n    switch (data) {\r\n        case 'name':\r\n            errors.fullName =\r\n                value.length < 5\r\n                    ? 'Full Name must be 5 characters long!'\r\n                    : '';\r\n            break;\r\n        case 'email':\r\n            errors.email =\r\n                validEmailRegex.test(value)\r\n                    ? ''\r\n                    : 'Email is not valid!';\r\n            break;\r\n        case 'password':\r\n            errors.password =\r\n                value.length < 8\r\n                    ? 'Password must be 8 characters long!'\r\n                    : '';\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    if(!data.active){\r\n       data.active = 0\r\n    }\r\n    let types = [ADD_USER_REQUEST,ADD_USER_FAIL,ADD_USER_SUCCESS];\r\n    let promise = (apiClient) => apiClient.post(url,JSON.stringify({data,cols}))\r\n    if(data.id){\r\n        types = [EDIT_USER_REQUEST,EDIT_USER_FAIL,EDIT_USER_SUCCESS];\r\n        promise = (apiClient) => apiClient.put(url,JSON.stringify({data,cols,id:data.id}));\r\n    }\r\n    return {\r\n        types: types,\r\n        promise: promise\r\n    }\r\n};\r\n\r\nexport const deleteUser = ( id ) => {\r\n    return {\r\n        types: [DELETE_USER_REQUEST,DELETE_USER_FAIL,DELETE_USER_SUCCESS],\r\n        promise: (apiClient) => apiClient.delete(url, JSON.stringify({ id,cols }))\r\n    }\r\n};\r\n\r\n\r\nexport const userModal = (type,modal) => {\r\n    return {\r\n        type: type.toUpperCase()+'_MODAL',\r\n        modal\r\n    }\r\n}\r\n\r\nexport const setModalValues = (value) => {\r\n    return {\r\n        type: SET_MODAL_VALUES,\r\n        value\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}