{"ast":null,"code":"import { GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS, GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS, SET_ACTIVE_LANGUAGE, SET_MODAL_LANGUAGE, TOGGLE_MODAL_LANGUAGE, SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS, TOGGLE_TRANSLATION_MODAL, SET_TRANSLATION_MODAL, GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS, EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS, DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS } from \"./actionTypes\";\nimport SessionStorage from \"../../services/SessionStorage\";\nvar col = 'key, value, lang';\nexport var getLanguages = function getLanguages() {\n  return {\n    types: [GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"languages\");\n    }\n  };\n};\nexport var getTranslations = function getTranslations() {\n  return {\n    types: [GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"translations/?page_size=100000\");\n    }\n  };\n};\nvar index = false;\nvar falseCount = 0;\nvar trueCount = 0;\nvar obj = [];\nexport var checkTranslation = function checkTranslation(object) {\n  return function (dispatch, getState) {\n    if (getState().languages.status === true) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = getState().languages.translations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (object.key === item.key && object.value === item.value && object.language === item.language) {\n            index = true;\n            trueCount++;\n          } else {\n            falseCount++;\n          }\n\n          if (index === true) {\n            obj.push(object);\n            index = false;\n            trueCount = 0;\n            falseCount = 0;\n          }\n\n          console.log('index: ', index, 'true count: ', trueCount, 'false count: ' + falseCount);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  };\n};\nexport var setTranslations = function setTranslations(key, value, language) {\n  return {\n    types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.posttAdd(\"translations/\", {\n        key: key,\n        value: value,\n        language: language\n      }, {\n        col: col\n      });\n    }\n  };\n};\nexport var setLanguage = function setLanguage(lang) {\n  SessionStorage.set(\"lang\", lang);\n  return {\n    type: SET_ACTIVE_LANGUAGE,\n    lang: lang\n  };\n};\nexport var setModalLanguage = function setModalLanguage(lang) {\n  return {\n    type: SET_MODAL_LANGUAGE,\n    lang: lang\n  };\n};\nexport var toggleModalLanguage = function toggleModalLanguage() {\n  return {\n    type: TOGGLE_MODAL_LANGUAGE\n  };\n};\nexport var toggleTranslationModal = function toggleTranslationModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_TRANSLATION_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport var setTranslationsModal = function setTranslationsModal(key, value) {\n  return {\n    type: SET_TRANSLATION_MODAL,\n    key: key,\n    value: value\n  };\n};\nexport var translationActions = function translationActions(type, data) {\n  switch (type) {\n    case 'get':\n      return {\n        types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"translations/\".concat(data.id), {\n            col: col\n          });\n        }\n      };\n\n    case 'edit':\n      return {\n        types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    case 'delete':\n      return {\n        types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/lang/actions.js"],"names":["GET_LANGUAGES_REQUEST","GET_LANGUAGES_FAIL","GET_LANGUAGES_SUCCESS","GET_TRANSLATIONS_REQUEST","GET_TRANSLATIONS_FAIL","GET_TRANSLATIONS_SUCCESS","SET_ACTIVE_LANGUAGE","SET_MODAL_LANGUAGE","TOGGLE_MODAL_LANGUAGE","SET_TRANSLATIONS_REQUEST","SET_TRANSLATIONS_FAIL","SET_TRANSLATIONS_SUCCESS","TOGGLE_TRANSLATION_MODAL","SET_TRANSLATION_MODAL","GET_TRANSLATION_REQUEST","GET_TRANSLATION_FAIL","GET_TRANSLATION_SUCCESS","EDIT_TRANSLATION_REQUEST","EDIT_TRANSLATION_FAIL","EDIT_TRANSLATION_SUCCESS","DELETE_TRANSLATION_REQUEST","DELETE_TRANSLATION_FAIL","DELETE_TRANSLATION_SUCCESS","SessionStorage","col","getLanguages","types","promise","apiClient","gett","getTranslations","index","falseCount","trueCount","obj","checkTranslation","object","dispatch","getState","languages","status","translations","item","key","value","language","push","console","log","setTranslations","posttAdd","setLanguage","lang","set","type","setModalLanguage","toggleModalLanguage","toggleTranslationModal","modalType","id","setTranslationsModal","translationActions","data","putt","deletee"],"mappings":"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","sourcesContent":["import {\r\n    GET_LANGUAGES_REQUEST,\r\n    GET_LANGUAGES_FAIL,\r\n    GET_LANGUAGES_SUCCESS,\r\n    GET_TRANSLATIONS_REQUEST,\r\n    GET_TRANSLATIONS_FAIL,\r\n    GET_TRANSLATIONS_SUCCESS,\r\n    SET_ACTIVE_LANGUAGE,\r\n    SET_MODAL_LANGUAGE,\r\n    TOGGLE_MODAL_LANGUAGE,\r\n    SET_TRANSLATIONS_REQUEST,\r\n    SET_TRANSLATIONS_FAIL,\r\n    SET_TRANSLATIONS_SUCCESS,\r\n    TOGGLE_TRANSLATION_MODAL,\r\n    SET_TRANSLATION_MODAL,\r\n    GET_TRANSLATION_REQUEST,\r\n    GET_TRANSLATION_FAIL,\r\n    GET_TRANSLATION_SUCCESS,\r\n    EDIT_TRANSLATION_REQUEST,\r\n    EDIT_TRANSLATION_FAIL,\r\n    EDIT_TRANSLATION_SUCCESS, DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS\r\n} from \"./actionTypes\";\r\nimport SessionStorage from \"../../services/SessionStorage\";\r\n\r\nlet col = 'key, value, lang';\r\n\r\nexport const getLanguages = () => {\r\n    return {\r\n        types: [GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`languages`)\r\n    }\r\n};\r\n\r\nexport const getTranslations = () => {\r\n    return {\r\n        types: [GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`translations/?page_size=100000`)\r\n    }\r\n}\r\nlet index = false;\r\nlet falseCount = 0;\r\nlet trueCount = 0;\r\nlet obj =[];\r\n\r\nexport const checkTranslation = object => {\r\n\r\n    return (dispatch, getState) => {\r\n        if (getState().languages.status === true) {\r\n            for (let item of getState().languages.translations) {\r\n                if (object.key === item.key && object.value === item.value && object.language === item.language) {\r\n                    index = true;\r\n                    trueCount++;\r\n                } else {\r\n                    falseCount++;\r\n                }\r\n            if (index === true) {\r\n                obj.push(object);\r\n                index = false;\r\n                trueCount = 0;\r\n                falseCount = 0;\r\n            }\r\n            console.log('index: ', index, 'true count: ', trueCount, 'false count: ' + falseCount);\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const setTranslations = (key, value, language) => {\r\n    return {\r\n        types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.posttAdd(`translations/`, {key, value, language}, {col})\r\n    }\r\n}\r\n\r\nexport const setLanguage = (lang) => {\r\n    SessionStorage.set(\"lang\", lang)\r\n    return {\r\n        type: SET_ACTIVE_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const setModalLanguage = (lang) => {\r\n    return {\r\n        type: SET_MODAL_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const toggleModalLanguage = () => {\r\n    return {\r\n        type: TOGGLE_MODAL_LANGUAGE,\r\n    }\r\n};\r\n\r\nexport const toggleTranslationModal = (modalType, id) => {\r\n    let obj = {\"id\": id};\r\n    return {\r\n        type: TOGGLE_TRANSLATION_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const setTranslationsModal = (key, value) => {\r\n\r\n    return {\r\n        type: SET_TRANSLATION_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n\r\nexport const translationActions = (type, data) => {\r\n\r\n    switch (type) {\r\n        case 'get':\r\n            return {\r\n                types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`translations/${data.id}`, {col})\r\n            };\r\n        case 'edit':\r\n            return {\r\n                types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.putt(`translations/${data.id}`, data, {col})\r\n            }\r\n        case 'delete':\r\n            return {\r\n                types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.deletee(`translations/${data.id}`, data, {col})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}