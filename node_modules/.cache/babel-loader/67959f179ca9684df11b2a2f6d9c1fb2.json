{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\pages\\\\group\\\\subGroupMenuNew.js\";\nimport React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nvar useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n    maxWidth: '100%'\n  }\n});\n\nvar Menu = function Menu(props) {\n  var classes = useStyles();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expanded = _React$useState2[0],\n      setExpanded = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selected = _React$useState4[0],\n      setSelected = _React$useState4[1];\n\n  var handleToggle = function handleToggle(event, nodeIds) {\n    setExpanded(nodeIds);\n  };\n\n  var handleSelect = function handleSelect(event, nodeIds) {\n    setSelected(nodeIds);\n  };\n\n  var treeItemRender = function treeItemRender(id, group_id) {\n    var result = props.data.map(function (item) {\n      if (parseInt(item.parent_id) === parseInt(id)) {\n        var groupId = item.group_id ? item.group_id.id : false;\n\n        if (parseInt(groupId) === parseInt(group_id)) {\n          console.log(item);\n          return React.createElement(TreeItem, {\n            key: item.id,\n            nodeId: \"\".concat(item.id),\n            label: item.name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37\n            },\n            __self: this\n          }, treeItemRender(item.id, item.group_id.id));\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    });\n    var arr = [];\n    result.map(function (item, index) {\n      if (item !== null) {\n        arr.push(item);\n      }\n\n      return result;\n    });\n    return arr;\n  };\n\n  return React.createElement(React.Fragment, null, props.data && props.data.length > 0 ? React.createElement(TreeView, {\n    className: classes.root,\n    defaultCollapseIcon: React.createElement(ExpandMoreIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }),\n    defaultExpandIcon: React.createElement(ChevronRightIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }),\n    expanded: expanded,\n    selected: selected,\n    onNodeToggle: handleToggle,\n    onNodeSelect: handleSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, props.data.map(function (item) {\n    return item.parent_id.length === 0 ? React.createElement(TreeItem, {\n      key: item.id,\n      nodeId: \"\".concat(item.id),\n      label: item.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, treeItemRender(item.id, item.group_id.id)) : null;\n  })) : null); // if (props.data && props.data.length > 0) {\n  //     return <ul className=\"list-group \">\n  //         {props.data.map((value, index) => {\n  //             return value.parent_id.length === 0 ?\n  //                 <SubMenu\n  //                     key={index}\n  //                     data={value}\n  //                     perm={props.perm}\n  //                     actions={props.actions}\n  //                     handleOpen={props.handleOpen}\n  //                     selectGroup={props.selectGroup}\n  //                     toggleSubModal={props.toggleSubModal}\n  //                     selected={props.selected}\n  //                     lang={props.lang}\n  //                     page={props.page}\n  //                 />\n  //                 :\n  //                 null\n  //         })}\n  //\n  //     </ul>\n  //\n  // } else {\n  //     return <div></div>\n  // }\n};\n\nexport default Menu;\n/*---------------------------------------------------*/","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/pages/group/subGroupMenuNew.js"],"names":["React","makeStyles","TreeView","ExpandMoreIcon","ChevronRightIcon","TreeItem","useStyles","root","flexGrow","maxWidth","Menu","props","classes","useState","expanded","setExpanded","selected","setSelected","handleToggle","event","nodeIds","handleSelect","treeItemRender","id","group_id","result","data","map","item","parseInt","parent_id","groupId","console","log","name","arr","index","push","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n        maxWidth: '100%',\r\n    },\r\n});\r\n\r\nconst Menu = props => {\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState([]);\r\n    const [selected, setSelected] = React.useState([]);\r\n\r\n    const handleToggle = (event, nodeIds) => {\r\n        setExpanded(nodeIds);\r\n    };\r\n\r\n    const handleSelect = (event, nodeIds) => {\r\n        setSelected(nodeIds);\r\n    };\r\n\r\n    const treeItemRender = (id, group_id) => {\r\n\r\n        let result = props.data.map(\r\n            item => {\r\n                if (parseInt(item.parent_id) === parseInt(id)) {\r\n                    let groupId = item.group_id ? item.group_id.id : false\r\n                    if(parseInt(groupId) === parseInt(group_id)) {\r\n                        console.log(item)\r\n                        return (\r\n                            <TreeItem\r\n                                key={item.id}\r\n                                nodeId={`${item.id}`}\r\n                                label={item.name}\r\n                            >\r\n                                {treeItemRender(item.id, item.group_id.id)}\r\n                            </TreeItem>\r\n                        )\r\n                    } else {\r\n                        return null\r\n                    }\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n        )\r\n        let arr = []\r\n        result.map(\r\n            (item, index) => {\r\n                if (item !== null) {\r\n                    arr.push(item)\r\n                }\r\n                return result;\r\n            }\r\n        )\r\n        return arr\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.data && props.data.length > 0 ?\r\n\r\n                    <TreeView\r\n                        className={classes.root}\r\n                        defaultCollapseIcon={<ExpandMoreIcon />}\r\n                        defaultExpandIcon={<ChevronRightIcon />}\r\n                        expanded={expanded}\r\n                        selected={selected}\r\n                        onNodeToggle={handleToggle}\r\n                        onNodeSelect={handleSelect}\r\n                    >\r\n                        {\r\n                            props.data.map(\r\n                                (item) => {\r\n\r\n                                    return item.parent_id.length === 0 ?\r\n                                        <TreeItem\r\n                                            key={item.id}\r\n                                            nodeId={`${item.id}`}\r\n                                            label={item.name}\r\n                                        >\r\n                                            {treeItemRender(item.id, item.group_id.id)}\r\n                                        </TreeItem>\r\n                                        :\r\n                                        null\r\n                                }\r\n                            )\r\n                        }\r\n\r\n                    </TreeView>\r\n                    :\r\n                    null\r\n            }\r\n        </>\r\n    )\r\n\r\n    // if (props.data && props.data.length > 0) {\r\n    //     return <ul className=\"list-group \">\r\n    //         {props.data.map((value, index) => {\r\n    //             return value.parent_id.length === 0 ?\r\n    //                 <SubMenu\r\n    //                     key={index}\r\n    //                     data={value}\r\n    //                     perm={props.perm}\r\n    //                     actions={props.actions}\r\n    //                     handleOpen={props.handleOpen}\r\n    //                     selectGroup={props.selectGroup}\r\n    //                     toggleSubModal={props.toggleSubModal}\r\n    //                     selected={props.selected}\r\n    //                     lang={props.lang}\r\n    //                     page={props.page}\r\n    //                 />\r\n    //                 :\r\n    //                 null\r\n    //         })}\r\n    //\r\n    //     </ul>\r\n    //\r\n    // } else {\r\n    //     return <div></div>\r\n    // }\r\n}\r\n\r\n\r\nexport default Menu;\r\n\r\n/*---------------------------------------------------*/\r\n\r\n"]},"metadata":{},"sourceType":"module"}