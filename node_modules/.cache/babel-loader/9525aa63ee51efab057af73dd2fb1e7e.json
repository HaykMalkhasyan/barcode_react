{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS, GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS, ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS, EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS, DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS, GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS, ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS, EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS, DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS, SET_GROUP_MODAL, TOGGLE_GROUP_MODAL, TOGGLE_SUB_GROUP_MODAL, OPEN_MENU, SELECT_GROUP, GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS } from \"./actionTypes\";\nvar cols = 'id,name'; // let url = `Group/Group`;\n\nvar url1 = \"Group/SubGroup\";\nexport var groupActions = function groupActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"group/\".concat(data.id));\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"group/?page_size=10000\", {\n            cols: cols\n          });\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.postt(\"group/\", data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"group/\".concat(data.id), data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletre(\"group/\".concat(data.id), {\n            cols: cols\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var subGroupActions = function subGroupActions(type, data) {\n  switch (type) {\n    case \"getAll\":\n      return {\n        types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"subgroup/?page_size=10000\");\n        }\n      };\n\n    case \"get\":\n      return {\n        types: [GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"subgroup/\".concat(data.id));\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.postt(\"subgroup/\", data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"subgroup/\".concat(data.id), data, {\n            param: {\n              id: data.id,\n              group_id: data.group_id\n            },\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletre(\"subgroup/?page_size=10000\", {\n            param: {\n              id: data.id,\n              group_id: data.group_id\n            },\n            cols: cols\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var setModalValues = function setModalValues(key, value, lang) {\n  return {\n    type: SET_GROUP_MODAL,\n    key: key,\n    value: value,\n    lang: lang\n  };\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = id ? {\n    \"id\": id\n  } : {};\n  return {\n    type: TOGGLE_GROUP_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport var toggleSubModal = function toggleSubModal(modalType, id, group_id) {\n  var obj = modalType === \"add\" ? {\n    parent_id: id\n  } : {\n    id: id\n  };\n\n  if (group_id) {\n    obj = _objectSpread({}, obj, {\n      group_id: group_id\n    });\n  }\n\n  return {\n    type: TOGGLE_SUB_GROUP_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport var handleOpen = function handleOpen(id, group_id) {\n  return {\n    type: OPEN_MENU,\n    id: id,\n    group_id: group_id\n  };\n};\nexport var selectGroup = function selectGroup(group_id, value) {\n  return {\n    type: SELECT_GROUP,\n    group_id: group_id,\n    value: value\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/group/actions.js"],"names":["GET_GROUPS_REQUEST","GET_GROUPS_FAIL","GET_GROUPS_SUCCESS","GET_GROUP_REQUEST","GET_GROUP_FAIL","GET_GROUP_SUCCESS","ADD_GROUP_REQUEST","ADD_GROUP_FAIL","ADD_GROUP_SUCCESS","EDIT_GROUP_REQUEST","EDIT_GROUP_FAIL","EDIT_GROUP_SUCCESS","DELETE_GROUP_REQUEST","DELETE_GROUP_FAIL","DELETE_GROUP_SUCCESS","GET_SUB_GROUP_REQUEST","GET_SUB_GROUP_FAIL","GET_SUB_GROUP_SUCCESS","ADD_SUB_GROUP_REQUEST","ADD_SUB_GROUP_FAIL","ADD_SUB_GROUP_SUCCESS","EDIT_SUB_GROUP_REQUEST","EDIT_SUB_GROUP_FAIL","EDIT_SUB_GROUP_SUCCESS","DELETE_SUB_GROUP_REQUEST","DELETE_SUB_GROUP_FAIL","DELETE_SUB_GROUP_SUCCESS","SET_GROUP_MODAL","TOGGLE_GROUP_MODAL","TOGGLE_SUB_GROUP_MODAL","OPEN_MENU","SELECT_GROUP","GET_SUB_GROUPS_REQUEST","GET_SUB_GROUPS_FAIL","GET_SUB_GROUPS_SUCCESS","cols","url1","groupActions","type","data","types","promise","apiClient","gett","id","postt","putt","deletre","subGroupActions","param","group_id","setModalValues","key","value","lang","toggleModal","modalType","obj","toggleSubModal","parent_id","handleOpen","selectGroup"],"mappings":"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","sourcesContent":["import {\r\n    GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS,\r\n    GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS,\r\n    ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS,\r\n    EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS,\r\n    DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS,\r\n    GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS,\r\n    ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS,\r\n    EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS,\r\n    DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS,\r\n    SET_GROUP_MODAL, TOGGLE_GROUP_MODAL, TOGGLE_SUB_GROUP_MODAL, OPEN_MENU,\r\n    SELECT_GROUP, GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS\r\n} from \"./actionTypes\";\r\n\r\n\r\nlet cols = 'id,name';\r\n// let url = `Group/Group`;\r\nlet url1 = `Group/SubGroup`\r\n\r\nexport const groupActions = (type, data) => {\r\n    switch (type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`group/${data.id}`)\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`group/?page_size=10000`, {cols})\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.postt(`group/`, data, {cols})\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`group/${data.id}`, data, {cols})\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletre(`group/${data.id}`, {cols})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\nexport const subGroupActions = (type, data) => {\r\n    switch (type) {\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`subgroup/?page_size=10000`)\r\n            }\r\n        case \"get\":\r\n            return {\r\n                types: [GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`subgroup/${data.id}`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.postt(`subgroup/`, data, {cols})\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`subgroup/${data.id}`, data, {\r\n                    param: {id: data.id, group_id: data.group_id},\r\n                    cols\r\n                })\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletre(`subgroup/?page_size=10000`, {param: {id: data.id, group_id: data.group_id}, cols})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\n\r\nexport const setModalValues = (key, value, lang) => {\r\n    return {\r\n        type: SET_GROUP_MODAL,\r\n        key,\r\n        value,\r\n        lang\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType, id) => {\r\n    let obj = (id) ? {\"id\": id} : {};\r\n    return {\r\n        type: TOGGLE_GROUP_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const toggleSubModal = (modalType, id, group_id) => {\r\n    let obj = (modalType === \"add\") ? {parent_id: id} : {id}\r\n    if (group_id) {\r\n        obj = {\r\n            ...obj,\r\n            group_id\r\n        };\r\n    }\r\n    return {\r\n        type: TOGGLE_SUB_GROUP_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const handleOpen = (id, group_id) => {\r\n    return {\r\n        type: OPEN_MENU,\r\n        id,\r\n        group_id,\r\n    }\r\n}\r\n\r\nexport const selectGroup = (group_id, value) => {\r\n    return {\r\n        type: SELECT_GROUP,\r\n        group_id,\r\n        value,\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}