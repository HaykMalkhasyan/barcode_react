{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport qs from \"qs\";\nimport SessionStorage from \"./SessionStorage\";\nimport axios from \"axios\";\n\nvar ApiClient =\n/*#__PURE__*/\nfunction () {\n  function ApiClient() {\n    _classCallCheck(this, ApiClient);\n\n    this.configs = {};\n    this.defaultConfigs = {};\n    this.API_URI = process.env.REACT_APP_API_URL;\n    var token = SessionStorage.get(\"token\");\n    var headers = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (token) {\n      headers[\"token\"] = token;\n    }\n\n    this.defaultConfigs = {\n      headers: headers,\n      params: {}\n    };\n    this.resetConfigs();\n  }\n\n  _createClass(ApiClient, [{\n    key: \"getRuntimeConfigs\",\n    value: function getRuntimeConfigs() {\n      var token = SessionStorage.get(\"token\");\n      var headers = {\n        \"Content-Type\": \"application/json\"\n      };\n\n      if (token) {\n        headers[\"token\"] = token;\n      }\n\n      return Object.assign({}, this.configs, {\n        headers: headers\n      });\n    }\n  }, {\n    key: \"resetConfigs\",\n    value: function resetConfigs() {\n      this.configs = Object.assign({}, this.defaultConfigs);\n    }\n  }, {\n    key: \"setConfig\",\n    value: function setConfig(key, value) {\n      console.log(key, value);\n      this.configs = Object.assign({}, this.configs, _defineProperty({}, key, value));\n    }\n  }, {\n    key: \"mergeConfigs\",\n    value: function mergeConfigs(params, headers, configs) {\n      var runtimeConfigs = this.getRuntimeConfigs();\n      var responseType = {};\n\n      if (params && params.responseType) {\n        responseType = params.responseType;\n      }\n\n      return Object.assign({}, runtimeConfigs, Object.assign({}, configs, _objectSpread({}, responseType, {\n        params: Object.assign({}, runtimeConfigs.params, params),\n        headers: Object.assign({}, runtimeConfigs.headers, headers),\n        paramsSerializer: function paramsSerializer(params) {\n          return qs.stringify(params, {\n            arrayFormat: \"brackets\"\n          });\n        }\n      })));\n    }\n  }, {\n    key: \"get\",\n    value: function get(uri) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var configs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      // return axios.get(`${this.API_URI}/${uri}`,\n      //     this.mergeConfigs(params, headers, configs)\n      // ).then(response => response.data);\n      var token_request = \"\"; // if (token == 1){\n      //     token_request = '&token='+sessionStorage.getItem(\"token\");\n      // }\n\n      var company = {};\n      company.id = 0;\n      company = JSON.stringify(company);\n      var url = \"http://192.168.1.196:8099/api/index.php\";\n      return fetch(url + \"?action=\\\"get\\\"&data=\".concat(params, \"&path=\\\"Login/Login\\\"\") + token_request + \"&company=\".concat(company), {\n        method: \"GET\",\n        dataType: \"json\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        mode: \"cors\",\n        // no-cors, cors, *same-origin\n        credentials: \"same-origin\"\n      });\n    }\n  }, {\n    key: \"post\",\n    value: function post(uri, data) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var configs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n        hasFile: false\n      };\n      var formData = new FormData();\n\n      if (configs.hasFile) {\n        for (var key in data) {\n          if (Array.isArray(data[key])) {\n            for (var i = 0; i < data[key].length; i++) {\n              formData.append(\"\".concat(key, \"[]\"), data[key][i]);\n            }\n          } else {\n            formData.set(key, data[key]);\n          }\n        }\n\n        data = formData;\n      }\n\n      console.log(this.mergeConfigs(params, headers, configs));\n      return axios.post(\"\".concat(this.API_URI, \"/\").concat(uri), data, this.mergeConfigs(params, headers, configs)).then(function (response) {\n        return response.data;\n      });\n    }\n  }, {\n    key: \"put\",\n    value: function put(uri, data) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var configs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n        hasFile: false\n      };\n      var formData = new FormData();\n\n      if (configs.hasFile) {\n        for (var key in data) {\n          if (Array.isArray(data[key])) {\n            for (var i = 0; i < data[key].length; i++) {\n              formData.append(\"\".concat(key, \"[]\"), data[key][i]);\n            }\n          } else {\n            formData.set(key, data[key]);\n          }\n        }\n\n        data = formData;\n      }\n\n      return axios.put(\"\".concat(this.API_URI, \"/\").concat(uri), data, this.mergeConfigs(params, headers, configs)).then(function (response) {\n        return response.data;\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(uri) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var configs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return axios.delete(\"\".concat(this.API_URI, \"/\").concat(uri), this.mergeConfigs(params, headers, configs)).then(function (response) {\n        return response.data;\n      });\n    }\n  }, {\n    key: \"upload\",\n    value: function upload(uri, form, data) {\n      var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var configs = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {\n        multiple: false\n      };\n      var files = form.files;\n\n      if (!Array.isArray(files)) {\n        files = new Array(files);\n      }\n\n      var formData = new FormData(); // formData.append('files', files);\n\n      files.forEach(function (item, i) {\n        formData.append(\"data[\" + i + \"][file]\", item);\n        formData.append(\"data[\" + i + \"][type]\", form.type);\n        formData.append(\"data[\" + i + \"][caption]\", \"caption \" + i);\n        formData.append(\"data[\" + i + \"][credit]\", \"credit \" + i);\n      });\n      return this.post(uri, formData, params, headers, configs);\n    }\n  }], [{\n    key: \"cancelToken\",\n    value: function cancelToken() {\n      var CancelToken = axios.CancelToken;\n      return CancelToken.source();\n    }\n  }]);\n\n  return ApiClient;\n}();\n\nexport { ApiClient as default };","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/services/Api.js"],"names":["qs","SessionStorage","axios","ApiClient","configs","defaultConfigs","API_URI","process","env","REACT_APP_API_URL","token","get","headers","params","resetConfigs","Object","assign","key","value","console","log","runtimeConfigs","getRuntimeConfigs","responseType","paramsSerializer","stringify","arrayFormat","uri","token_request","company","id","JSON","url","fetch","method","dataType","Accept","mode","credentials","data","hasFile","formData","FormData","Array","isArray","i","length","append","set","mergeConfigs","post","then","response","put","delete","form","multiple","files","forEach","item","type","CancelToken","source"],"mappings":"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","sourcesContent":["import qs from \"qs\";\r\nimport SessionStorage from \"./SessionStorage\";\r\nimport axios from \"axios\";\r\n\r\nexport default class ApiClient {\r\n    configs = {};\r\n    defaultConfigs = {};\r\n    API_URI = process.env.REACT_APP_API_URL;\r\n\r\n    constructor() {\r\n        const token = SessionStorage.get(\"token\");\r\n        let headers = {\r\n            \"Content-Type\": \"application/json\"\r\n        };\r\n\r\n        if (token) {\r\n            headers[\"token\"] = token;\r\n        }\r\n\r\n        this.defaultConfigs = {\r\n            headers,\r\n            params: {}\r\n        };\r\n\r\n        this.resetConfigs();\r\n    }\r\n\r\n    getRuntimeConfigs() {\r\n        const token = SessionStorage.get(\"token\");\r\n        let headers = {\r\n            \"Content-Type\": \"application/json\"\r\n        };\r\n\r\n        if (token) {\r\n            headers[\"token\"] = token;\r\n        }\r\n\r\n        return Object.assign({}, this.configs, {\r\n            headers\r\n        });\r\n    }\r\n\r\n    resetConfigs() {\r\n        this.configs = Object.assign({}, this.defaultConfigs);\r\n    }\r\n\r\n    setConfig(key, value) {\r\n        console.log(key, value);\r\n        this.configs = Object.assign({}, this.configs, {\r\n            [key]: value\r\n        });\r\n    }\r\n\r\n    mergeConfigs(params, headers, configs) {\r\n        const runtimeConfigs = this.getRuntimeConfigs();\r\n        let responseType = {};\r\n        if (params && params.responseType) {\r\n            responseType = params.responseType;\r\n        }\r\n        return Object.assign(\r\n            {},\r\n            runtimeConfigs,\r\n            Object.assign(\r\n                {},\r\n                configs,\r\n                {\r\n                    ...responseType,\r\n                    params: Object.assign({}, runtimeConfigs.params, params),\r\n                    headers: Object.assign({}, runtimeConfigs.headers, headers),\r\n                    paramsSerializer: function(params) {\r\n                        return qs.stringify(params, { arrayFormat: \"brackets\" });\r\n                    }\r\n                }\r\n            )\r\n        );\r\n    }\r\n\r\n    static cancelToken() {\r\n        const CancelToken = axios.CancelToken;\r\n        return CancelToken.source();\r\n    }\r\n\r\n    get(uri, params = {}, headers = {}, configs = {}) {\r\n        // return axios.get(`${this.API_URI}/${uri}`,\r\n        //     this.mergeConfigs(params, headers, configs)\r\n        // ).then(response => response.data);\r\n        let token_request = \"\";\r\n        // if (token == 1){\r\n        //     token_request = '&token='+sessionStorage.getItem(\"token\");\r\n        // }\r\n        let company =  {};\r\n        company.id = 0;\r\n        company = JSON.stringify(company);\r\n        let url =  \"http://192.168.1.196:8099/api/index.php\";\r\n        return fetch(\r\n            url + `?action=\"get\"&data=${params}&path=\"Login/Login\"` + token_request + `&company=${company}`,\r\n            {\r\n                method: \"GET\",\r\n                dataType: \"json\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                mode: \"cors\", // no-cors, cors, *same-origin\r\n                credentials: \"same-origin\"\r\n            }\r\n        );\r\n    }\r\n\r\n    post(uri, data, params = {}, headers = {}, configs = { hasFile: false }) {\r\n        let formData = new FormData();\r\n\r\n        if (configs.hasFile) {\r\n            for (let key in data) {\r\n                if (Array.isArray(data[key])) {\r\n                    for (let i = 0; i < data[key].length; i++) {\r\n                        formData.append(`${key}[]`, data[key][i]);\r\n                    }\r\n                } else {\r\n                    formData.set(key, data[key]);\r\n                }\r\n            }\r\n            data = formData;\r\n        }\r\n        console.log(this.mergeConfigs(params, headers, configs));\r\n        return axios.post(`${this.API_URI}/${uri}`, data,\r\n            this.mergeConfigs(params, headers, configs)\r\n        ).then(response => response.data);\r\n    }\r\n\r\n    put(uri, data, params = {}, headers = {}, configs = { hasFile: false }) {\r\n        let formData = new FormData();\r\n\r\n        if (configs.hasFile) {\r\n            for (let key in data) {\r\n                if (Array.isArray(data[key])) {\r\n                    for (let i = 0; i < data[key].length; i++) {\r\n                        formData.append(`${key}[]`, data[key][i]);\r\n                    }\r\n                } else {\r\n                    formData.set(key, data[key]);\r\n                }\r\n            }\r\n            data = formData;\r\n        }\r\n        return axios.put(`${this.API_URI}/${uri}`, data,\r\n            this.mergeConfigs(params, headers, configs)\r\n        ).then(response => response.data);\r\n    }\r\n\r\n    delete(uri, params = {}, headers = {}, configs = {}) {\r\n        return axios.delete(`${this.API_URI}/${uri}`,\r\n            this.mergeConfigs(params, headers, configs)\r\n        ).then(response => response.data);\r\n    }\r\n\r\n    upload(uri, form, data, params = {}, headers = {}, configs = { multiple: false }) {\r\n        let files = form.files;\r\n        if (!Array.isArray(files)) {\r\n            files = new Array(files);\r\n        }\r\n        let formData = new FormData();\r\n        // formData.append('files', files);\r\n        files.forEach((item, i) => {\r\n            formData.append(\"data[\" + i + \"][file]\", item);\r\n            formData.append(\"data[\" + i + \"][type]\", form.type);\r\n            formData.append(\"data[\" + i + \"][caption]\", \"caption \" + i);\r\n            formData.append(\"data[\" + i + \"][credit]\", \"credit \" + i);\r\n        });\r\n\r\n        return this.post(uri, formData, params, headers, configs);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}