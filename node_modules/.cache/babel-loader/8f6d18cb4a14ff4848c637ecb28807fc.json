{"ast":null,"code":"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations, checkTranslation, getTranslations } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\n\nvar Translate = function Translate(name, translations, checkTranslation) {\n  // const contentRender = name => {\n  var lang = SessionStorage.get('lang') ? SessionStorage.get('lang') : 'am';\n\n  if (name !== undefined) {\n    if (translations.length > 0) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = translations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (item.key === name.toLowerCase() && item.language === lang) {\n            return item.value;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      checkTranslation({\n        key: name.toLowerCase(),\n        value: name,\n        language: SessionStorage.get('lang') || \"am\"\n      });\n      return name;\n    } else {\n      // props.checkTranslation({key: name.toLowerCase(), value: name, language: SessionStorage.get('lang') || \"am\"})\n      return name;\n    }\n  } // }\n  // return contentRender(props.name)\n\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations,\n    checkTranslation: checkTranslation,\n    getTranslations: getTranslations\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations,\n    status: state.languages.status\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","connect","bindActionCreators","setTranslations","checkTranslation","getTranslations","SessionStorage","Translate","name","translations","lang","get","undefined","length","item","key","toLowerCase","language","value","mapDispatchToProps","dispatch","mapStateToProps","state","languages","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,eAAR,EAAyBC,gBAAzB,EAA2CC,eAA3C,QAAiE,sBAAjE;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAOC,YAAP,EAAqBL,gBAArB,EAA0C;AAGxD;AACI,MAAIM,IAAI,GAAGJ,cAAc,CAACK,GAAf,CAAmB,MAAnB,IAA6BL,cAAc,CAACK,GAAf,CAAmB,MAAnB,CAA7B,GAA0D,IAArE;;AACA,MAAIH,IAAI,KAAKI,SAAb,EAAwB;AACpB,QAAIH,YAAY,CAACI,MAAb,GAAsB,CAA1B,EAA6B;AAAA;AAAA;AAAA;;AAAA;AACzB,6BAAiBJ,YAAjB,8HAA+B;AAAA,cAAtBK,IAAsB;;AAC3B,cAAIA,IAAI,CAACC,GAAL,KAAaP,IAAI,CAACQ,WAAL,EAAb,IAAmCF,IAAI,CAACG,QAAL,KAAkBP,IAAzD,EAA+D;AAC3D,mBAAOI,IAAI,CAACI,KAAZ;AACH;AACJ;AALwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMzBd,MAAAA,gBAAgB,CAAC;AACbW,QAAAA,GAAG,EAAEP,IAAI,CAACQ,WAAL,EADQ;AAEbE,QAAAA,KAAK,EAAEV,IAFM;AAGbS,QAAAA,QAAQ,EAAEX,cAAc,CAACK,GAAf,CAAmB,MAAnB,KAA8B;AAH3B,OAAD,CAAhB;AAKA,aAAOH,IAAP;AACH,KAZD,MAYO;AACH;AACA,aAAOA,IAAP;AACH;AACJ,GAtBmD,CAuBxD;AACA;;AAEH,CA1BD;;AA4BA,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAOlB,kBAAkB,CACrB;AACIC,IAAAA,eAAe,EAAfA,eADJ;AAEIC,IAAAA,gBAAgB,EAAhBA,gBAFJ;AAGIC,IAAAA,eAAe,EAAfA;AAHJ,GADqB,EAMrBe,QANqB,CAAzB;AAQH,CATD;;AAWA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHb,IAAAA,YAAY,EAAEa,KAAK,CAACC,SAAN,CAAgBd,YAD3B;AAEHe,IAAAA,MAAM,EAAEF,KAAK,CAACC,SAAN,CAAgBC;AAFrB,GAAP;AAIH,CALD;;AAOA,eAAevB,OAAO,CAACoB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CZ,SAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations, checkTranslation, getTranslations} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\n\r\nconst Translate = (name, translations, checkTranslation) => {\r\n\r\n\r\n    // const contentRender = name => {\r\n        let lang = SessionStorage.get('lang') ? SessionStorage.get('lang') : 'am'\r\n        if (name !== undefined) {\r\n            if (translations.length > 0) {\r\n                for (let item of translations) {\r\n                    if (item.key === name.toLowerCase() && item.language === lang) {\r\n                        return item.value\r\n                    }\r\n                }\r\n                checkTranslation({\r\n                    key: name.toLowerCase(),\r\n                    value: name,\r\n                    language: SessionStorage.get('lang') || \"am\"\r\n                })\r\n                return name;\r\n            } else {\r\n                // props.checkTranslation({key: name.toLowerCase(), value: name, language: SessionStorage.get('lang') || \"am\"})\r\n                return name\r\n            }\r\n        }\r\n    // }\r\n    // return contentRender(props.name)\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations,\r\n            checkTranslation,\r\n            getTranslations\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n        status: state.languages.status\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}