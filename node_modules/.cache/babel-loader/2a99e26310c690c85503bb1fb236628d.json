{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\pages\\\\users\\\\userModal.js\";\nimport React from \"react\";\nimport { Col, Row, FormGroup, Label, Button, ModalBody, ModalFooter, Input, Modal, ModalHeader } from \"reactstrap\";\nimport Translate from \"../../../Translate\";\nimport { Formik, Field, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport jwt from \"jwt-simple\";\n\nvar UserModal = function UserModal(props) {\n  var formSchema = Yup.object().shape({\n    firstname: Yup.string().required(\"Required\"),\n    username: Yup.string() // .email(\"Invalid email\")\n    .required(\"Required\"),\n    password: Yup.number().min(4, \"Too Short!\").required(\"Required\")\n  });\n\n  function modalBodyContent() {\n    if (props.type === \"delete\") {\n      return React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"\\u0534\\u0578\\u0582\\u0584 \\u0570\\u0561\\u0574\\u0578\\u0566\\u057E\\u0561\\u056E \\u0565\\u055E\\u0584 \\u057B\\u0576\\u057B\\u0565\\u056C\");\n    } else {\n      return React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(Formik, {\n        initialValues: {\n          required: \"\",\n          email: \"\",\n          url: \"\",\n          number: \"\",\n          date: \"\",\n          minlength: \"\",\n          maxlength: \"\"\n        },\n        validationSchema: formSchema,\n        onSubmit: function onSubmit(values) {\n          // same shape as initial values\n          console.log(values);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, function (_ref) {\n        var errors = _ref.errors,\n            touched = _ref.touched;\n        return React.createElement(Form, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(Col, {\n          md: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(Label, {\n          for: \"firstName\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(Translate, {\n          name: \"firstname\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        })), React.createElement(Field, {\n          name: \"firstname\",\n          id: \"firstName\",\n          className: \"form-control \".concat(errors.firstname && touched.firstname && 'is-invalid'),\n          value: props.user.firstname,\n          onChange: function onChange(event) {\n            return props.setModalValues(\"firstname\", event.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }), errors.firstname && touched.firstname ? React.createElement(\"div\", {\n          className: \"invalid-feedback\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, errors.firstname) : null)), React.createElement(Col, {\n          md: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(Label, {\n          for: \"lastName\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(Translate, {\n          name: \"lastname\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        })), React.createElement(\"input\", {\n          className: \"form-control\",\n          type: \"text\",\n          id: \"lastName\",\n          onChange: function onChange(event) {\n            return props.setModalValues(\"lastname\", event.target.value);\n          },\n          value: props.user.lastname ? props.user.lastname : \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        })))), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(Col, {\n          md: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, React.createElement(Label, {\n          for: \"username\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, React.createElement(Translate, {\n          name: \"username\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        })), React.createElement(\"input\", {\n          className: \"form-control\",\n          type: \"text\",\n          id: \"username\",\n          onChange: function onChange(event) {\n            return props.setModalValues(\"username\", event.target.value);\n          },\n          value: props.user.username ? props.user.username : \"\",\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }))), React.createElement(Col, {\n          md: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(Label, {\n          for: \"password\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(Translate, {\n          name: \"password\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        })), React.createElement(\"input\", {\n          className: \"form-control\",\n          type: \"password\",\n          id: \"password\",\n          onChange: function onChange(event) {\n            return props.setModalValues(\"password\", jwt.encode(event.target.value, \"password\"));\n          },\n          value: props.user.password ? jwt.decode(props.user.password, \"password\") : \"\",\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        })))), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(Col, {\n          md: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(Label, {\n          for: \"position\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(Translate, {\n          name: \"position\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        })), React.createElement(Input, {\n          type: \"select\",\n          id: \"position\",\n          defaultValue: props.user.position ? props.user.position : 0,\n          onChange: function onChange(event) {\n            return props.setModalValues(\"position_id\", event.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          key: 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, \"\\u0538\\u0576\\u057F\\u0580\\u0565\\u056C\"), props.positions.map(function (item, key) {\n          console.log(parseInt(props.user.position_id), item.id === parseInt(props.user.position_id));\n          return React.createElement(\"option\", {\n            value: item.id,\n            key: key,\n            selected: item.id === parseInt(props.user.position_id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120\n            },\n            __self: this\n          }, item.name);\n        })))), React.createElement(Col, {\n          md: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(Label, {\n          for: \"active\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(Translate, {\n          name: \"active\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        })), React.createElement(Input, {\n          type: \"select\",\n          id: \"active\",\n          defaultValue: 0,\n          onChange: function onChange(event) {\n            return props.setModalValues(\"active\", event.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"0\",\n          selected: 0 === props.user.active,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"\\u0531\\u0575\\u0578\"), React.createElement(\"option\", {\n          value: \"1\",\n          selected: 1 === props.user.active,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, \"\\u0548\\u0579\"))))));\n      }));\n    }\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    isOpen: props.modal[props.type],\n    toggle: function toggle() {\n      return props.toggleModal(props.type);\n    },\n    size: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: function toggle() {\n      return props.toggleModal(props.type);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: \"addUser\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })), modalBodyContent(), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    type: \"submit\",\n    onClick: function onClick() {\n      props.userActions(props.type, props.user);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: \"confirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })))));\n};\n\nexport default UserModal;","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/pages/users/userModal.js"],"names":["React","Col","Row","FormGroup","Label","Button","ModalBody","ModalFooter","Input","Modal","ModalHeader","Translate","Formik","Field","Form","Yup","jwt","UserModal","props","formSchema","object","shape","firstname","string","required","username","password","number","min","modalBodyContent","type","email","url","date","minlength","maxlength","values","console","log","errors","touched","user","event","setModalValues","target","value","lastname","encode","decode","position","positions","map","item","key","parseInt","position_id","id","name","active","modal","toggleModal","userActions"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {Col, Row, FormGroup, Label, Button, ModalBody, ModalFooter, Input, Modal, ModalHeader} from \"reactstrap\";\r\nimport Translate from \"../../../Translate\";\r\nimport {Formik, Field, Form} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport jwt from \"jwt-simple\";\r\n\r\nconst UserModal = (props) => {\r\n    const formSchema = Yup.object().shape({\r\n        firstname: Yup.string()\r\n            .required(\"Required\"),\r\n        username: Yup.string()\r\n            // .email(\"Invalid email\")\r\n            .required(\"Required\"),\r\n        password: Yup.number()\r\n            .min(4, \"Too Short!\")\r\n            .required(\"Required\")\r\n    });\r\n\r\n    function modalBodyContent() {\r\n        if (props.type === \"delete\") {\r\n            return (\r\n                <ModalBody>Դուք համոզված ե՞ք ջնջել</ModalBody>\r\n            )\r\n\r\n        } else {\r\n            return (\r\n                <ModalBody>\r\n                    <Formik\r\n                        initialValues={{\r\n                            required: \"\",\r\n                            email: \"\",\r\n                            url: \"\",\r\n                            number: \"\",\r\n                            date: \"\",\r\n                            minlength: \"\",\r\n                            maxlength: \"\"\r\n                        }}\r\n                        validationSchema={formSchema}\r\n                        onSubmit={values => {\r\n                            // same shape as initial values\r\n                            console.log(values);\r\n                        }}\r\n                    >\r\n                        {({errors, touched}) => (\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"firstName\"><Translate name=\"firstname\"/></Label>\r\n                                            {/*<input*/}\r\n                                            {/*    className=\"form-control\"*/}\r\n                                            {/*    type=\"text\"*/}\r\n                                            {/*    id=\"firstName\"*/}\r\n                                            {/*    value={props.user.firstname}*/}\r\n                                            {/*    onChange={event => props.setModalValues(\"firstname\", event.target.value)}*/}\r\n\r\n                                            {/*/>*/}\r\n                                            <Field\r\n                                                name=\"firstname\"\r\n                                                id=\"firstName\"\r\n                                                className={`form-control ${errors.firstname && touched.firstname && 'is-invalid'}`}\r\n                                                value={props.user.firstname}\r\n                                                onChange={event => props.setModalValues(\"firstname\", event.target.value)}\r\n                                            />\r\n                                            {errors.firstname && touched.firstname ? <div className=\"invalid-feedback\">{errors.firstname}</div> : null}\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"lastName\"><Translate name=\"lastname\"/></Label>\r\n                                            <input\r\n                                                className=\"form-control\"\r\n                                                type=\"text\"\r\n                                                id=\"lastName\"\r\n                                                onChange={event => props.setModalValues(\"lastname\", event.target.value)}\r\n                                                value={props.user.lastname ? props.user.lastname : \"\"}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"username\"><Translate name=\"username\"/></Label>\r\n                                            <input\r\n                                                className=\"form-control\"\r\n                                                type=\"text\"\r\n                                                id=\"username\"\r\n                                                onChange={event => props.setModalValues(\"username\", event.target.value)}\r\n                                                value={props.user.username ? props.user.username : \"\"}\r\n                                                required\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"password\"><Translate name=\"password\"/></Label>\r\n                                            <input\r\n                                                className=\"form-control\"\r\n                                                type=\"password\"\r\n                                                id=\"password\"\r\n                                                onChange={event => props.setModalValues(\"password\", jwt.encode(event.target.value, \"password\"))}\r\n                                                value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\r\n                                                required\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"position\"><Translate name=\"position\"/></Label>\r\n                                            <Input type=\"select\" id=\"position\"\r\n                                                   defaultValue={props.user.position ? props.user.position : 0}\r\n                                                   onChange={event => props.setModalValues(\"position_id\", event.target.value)}>\r\n                                                <option key={0}>Ընտրել</option>\r\n                                                {props.positions.map((item, key) => {\r\n                                                    console.log(parseInt(props.user.position_id), item.id === parseInt(props.user.position_id))\r\n                                                    return <option value={item.id} key={key}\r\n                                                                   selected={item.id === parseInt(props.user.position_id)}>{item.name}</option>\r\n                                                })}\r\n                                            </Input>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"active\"><Translate name=\"active\"/></Label>\r\n                                            <Input type=\"select\" id=\"active\" defaultValue={0}\r\n                                                   onChange={event => props.setModalValues(\"active\", event.target.value)}>\r\n\r\n                                                <option value=\"0\" selected={0 === props.user.active}>Այո</option>\r\n                                                <option value=\"1\" selected={1 === props.user.active}>Ոչ</option>\r\n                                            </Input>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n\r\n                </ModalBody>\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Modal isOpen={props.modal[props.type]} toggle={() => props.toggleModal(props.type)} size=\"md\">\r\n                <ModalHeader toggle={() => props.toggleModal(props.type)}><Translate name=\"addUser\"/></ModalHeader>\r\n                {modalBodyContent()}\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" type=\"submit\" onClick={function () {\r\n                        props.userActions(props.type, props.user);\r\n                    }}>\r\n                        <Translate name=\"confirm\"/>\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n        </React.Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default UserModal;"]},"metadata":{},"sourceType":"module"}