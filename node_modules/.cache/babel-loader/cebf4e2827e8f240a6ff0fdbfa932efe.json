{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\localize\\\\localizeInput.js\";\nimport React from \"react\"; // import {connect} from \"react-redux\";\n\nvar LocalizeInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LocalizeInput, _React$Component);\n\n  function LocalizeInput() {\n    _classCallCheck(this, LocalizeInput);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LocalizeInput).apply(this, arguments));\n  }\n\n  _createClass(LocalizeInput, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, props.lang.languages.map(function (lang) {\n        return React.createElement(\"input\", {\n          className: \"form-control  \".concat(props.errors ? 'is-invalid' : '', \" \").concat(lang.code !== props.lang.modalLang ? 'd-none' : ''),\n          type: \"text\",\n          value: props.name && props.name[props.lang.modalLang] ? props.name[props.lang.modalLang] : \"\",\n          onChange: function onChange(event) {\n            return props.setValue(\"name\", event.target.value, props.lang.modalLang);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return LocalizeInput;\n}(React.Component); // const mapStateToProps = state => {\n//     return {\n//         languages: state.languages.languages,\n//         modalLang:state.languages.modalLang,\n//     }\n// };\n\n\nexport default LocalizeInput;","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/localize/localizeInput.js"],"names":["React","LocalizeInput","props","console","log","lang","languages","map","errors","code","modalLang","name","event","setValue","target","value","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAmB,OAAnB,C,CACA;;IAEMC,a;;;;;;;;;;;;;6BACO;AACL,UAAIC,KAAK,GAAG,KAAKA,KAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAjB;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKA,KAAK,CAACG,IAAN,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,UAAUF,IAAV,EAAgB;AAEtC,eAAO;AACH,UAAA,SAAS,0BAAmBH,KAAK,CAACM,MAAN,GAAe,YAAf,GAA8B,EAAjD,cAAuDH,IAAI,CAACI,IAAL,KAAcP,KAAK,CAACG,IAAN,CAAWK,SAAzB,GAAqC,QAArC,GAAgD,EAAvG,CADN;AAEH,UAAA,IAAI,EAAC,MAFF;AAGH,UAAA,KAAK,EAAER,KAAK,CAACS,IAAN,IAAcT,KAAK,CAACS,IAAN,CAAWT,KAAK,CAACG,IAAN,CAAWK,SAAtB,CAAd,GAAiDR,KAAK,CAACS,IAAN,CAAWT,KAAK,CAACG,IAAN,CAAWK,SAAtB,CAAjD,GAAoF,EAHxF;AAIH,UAAA,QAAQ,EAAE,kBAAAE,KAAK;AAAA,mBAAIV,KAAK,CAACW,QAAN,CAAe,MAAf,EAAuBD,KAAK,CAACE,MAAN,CAAaC,KAApC,EAA2Cb,KAAK,CAACG,IAAN,CAAWK,SAAtD,CAAJ;AAAA,WAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAOH,OATA,CADL,CADJ;AAcH;;;;EAlBuBV,KAAK,CAACgB,S,GAsBlC;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAef,aAAf","sourcesContent":["import React  from \"react\";\r\n// import {connect} from \"react-redux\";\r\n\r\nclass LocalizeInput extends React.Component {\r\n    render() {\r\n        let props = this.props\r\n        console.log(this.props)\r\n        return (\r\n            <div>\r\n                {props.lang.languages.map(function (lang) {\r\n\r\n                    return <input\r\n                        className={`form-control  ${props.errors ? 'is-invalid' : ''} ${lang.code !== props.lang.modalLang ? 'd-none' : ''}`}\r\n                        type=\"text\"\r\n                        value={props.name && props.name[props.lang.modalLang] ? props.name[props.lang.modalLang] : \"\"}\r\n                        onChange={event => props.setValue(\"name\", event.target.value, props.lang.modalLang)}\r\n\r\n                    />\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         languages: state.languages.languages,\r\n//         modalLang:state.languages.modalLang,\r\n//     }\r\n// };\r\n\r\nexport default LocalizeInput;"]},"metadata":{},"sourceType":"module"}