{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS, GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS, ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS, EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS, DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS, GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS, ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS, EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS, DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS, SET_GROUP_MODAL, TOGGLE_GROUP_MODAL, TOGGLE_SUB_GROUP_MODAL, OPEN_MENU, SELECT_GROUP, GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS, SELECT_GROUPS_REQUEST, SELECT_GROUPS_FAIL, SELECT_GROUPS_SUCCESS, SET_TOGGLE_SUB_MODAL_VALUE, SET_SUB_MODAL_NAME_VALUE } from \"./actionTypes\";\nvar cols = 'id,name'; // let url = `Group/Group`;\n\nvar url1 = \"Group/SubGroup\";\nexport var groupActions = function groupActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"group/\".concat(data.id));\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"group/?page_size=10000\", {\n            cols: cols\n          });\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"group/\", data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"group/\".concat(data.id), data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"group/\".concat(data.id), {\n            cols: cols\n          });\n        },\n        data: data\n      };\n\n    default:\n      return;\n  }\n};\nexport var getSeletGroup = function getSeletGroup(id) {\n  return {\n    types: [SELECT_GROUPS_REQUEST, SELECT_GROUPS_FAIL, SELECT_GROUPS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"group/\".concat(id));\n    }\n  };\n};\nexport var getSubGroup = function getSubGroup(id) {\n  return {\n    types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"subgroup/?group_id=\".concat(id));\n    }\n  };\n};\nexport var subGroupActions = function subGroupActions(type, data) {\n  switch (type) {\n    case \"getAll\":\n      return {\n        types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"subgroup/?page_size=10000\");\n        }\n      };\n\n    case \"get\":\n      return {\n        types: [GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"subgroup/\".concat(data.id));\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"subgroup/\", data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"subgroup/\".concat(data.id), data, {\n            param: {\n              id: data.id,\n              group_id: data.group_id\n            },\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"subgroup/?page_size=10000\", {\n            param: {\n              id: data.id,\n              group_id: data.group_id\n            },\n            cols: cols\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var setModalValues = function setModalValues(key, value) {\n  return {\n    type: SET_GROUP_MODAL,\n    key: key,\n    value: value\n  };\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = id ? {\n    \"id\": id\n  } : {};\n  return {\n    type: TOGGLE_GROUP_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\n/*---------------------------------------------------------------------------*/\n\nexport var setAddToggleSubModal = function setAddToggleSubModal(modalType, group_id) {\n  return function (dispatch, getState) {\n    var modal = getState().group.subModal;\n    var subGroup = getState().group.subGroup;\n    modal[modalType] = !modal[modalType];\n    subGroup = {\n      name: '',\n      group_id: {\n        id: group_id\n      }\n    };\n    dispatch(setToggleSubModalValue(modal, subGroup));\n  };\n};\nexport function setToggleSubModalValue(modal, subGroup) {\n  return {\n    type: SET_TOGGLE_SUB_MODAL_VALUE,\n    modal: modal,\n    subGroup: subGroup\n  };\n}\nexport function setSubModalName(type, value) {\n  return function (dispatch, getState) {\n    var subGroup = getState().group.subGroup;\n    subGroup[type] = value;\n    dispatch(setSubModalNameValue(subGroup));\n  };\n}\nexport function setSubModalNameValue(subGroup) {\n  return {\n    type: SET_SUB_MODAL_NAME_VALUE,\n    subGroup: subGroup\n  };\n}\n/*---------------------------------------------------------------------------*/\n\nexport var toggleSubModal = function toggleSubModal(modalType, id, group_id) {\n  var obj = modalType === \"add\" ? {\n    parent_id: id\n  } : {\n    id: id\n  };\n\n  if (group_id) {\n    obj = _objectSpread({}, obj, {\n      group_id: group_id\n    });\n  }\n\n  return {\n    type: TOGGLE_SUB_GROUP_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport var handleOpen = function handleOpen(id, group_id) {\n  return {\n    type: OPEN_MENU,\n    id: id,\n    group_id: group_id\n  };\n};\nexport var selectGroup = function selectGroup(group_id, value) {\n  return {\n    type: SELECT_GROUP,\n    group_id: group_id,\n    value: value\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/group/actions.js"],"names":["GET_GROUPS_REQUEST","GET_GROUPS_FAIL","GET_GROUPS_SUCCESS","GET_GROUP_REQUEST","GET_GROUP_FAIL","GET_GROUP_SUCCESS","ADD_GROUP_REQUEST","ADD_GROUP_FAIL","ADD_GROUP_SUCCESS","EDIT_GROUP_REQUEST","EDIT_GROUP_FAIL","EDIT_GROUP_SUCCESS","DELETE_GROUP_REQUEST","DELETE_GROUP_FAIL","DELETE_GROUP_SUCCESS","GET_SUB_GROUP_REQUEST","GET_SUB_GROUP_FAIL","GET_SUB_GROUP_SUCCESS","ADD_SUB_GROUP_REQUEST","ADD_SUB_GROUP_FAIL","ADD_SUB_GROUP_SUCCESS","EDIT_SUB_GROUP_REQUEST","EDIT_SUB_GROUP_FAIL","EDIT_SUB_GROUP_SUCCESS","DELETE_SUB_GROUP_REQUEST","DELETE_SUB_GROUP_FAIL","DELETE_SUB_GROUP_SUCCESS","SET_GROUP_MODAL","TOGGLE_GROUP_MODAL","TOGGLE_SUB_GROUP_MODAL","OPEN_MENU","SELECT_GROUP","GET_SUB_GROUPS_REQUEST","GET_SUB_GROUPS_FAIL","GET_SUB_GROUPS_SUCCESS","SELECT_GROUPS_REQUEST","SELECT_GROUPS_FAIL","SELECT_GROUPS_SUCCESS","SET_TOGGLE_SUB_MODAL_VALUE","SET_SUB_MODAL_NAME_VALUE","cols","url1","groupActions","type","data","types","promise","apiClient","gett","id","posttAdd","putt","deletee","getSeletGroup","getSubGroup","subGroupActions","param","group_id","setModalValues","key","value","toggleModal","modalType","obj","setAddToggleSubModal","dispatch","getState","modal","group","subModal","subGroup","name","setToggleSubModalValue","setSubModalName","setSubModalNameValue","toggleSubModal","parent_id","handleOpen","selectGroup"],"mappings":"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","sourcesContent":["import {\r\n    GET_GROUPS_REQUEST,\r\n    GET_GROUPS_FAIL,\r\n    GET_GROUPS_SUCCESS,\r\n    GET_GROUP_REQUEST,\r\n    GET_GROUP_FAIL,\r\n    GET_GROUP_SUCCESS,\r\n    ADD_GROUP_REQUEST,\r\n    ADD_GROUP_FAIL,\r\n    ADD_GROUP_SUCCESS,\r\n    EDIT_GROUP_REQUEST,\r\n    EDIT_GROUP_FAIL,\r\n    EDIT_GROUP_SUCCESS,\r\n    DELETE_GROUP_REQUEST,\r\n    DELETE_GROUP_FAIL,\r\n    DELETE_GROUP_SUCCESS,\r\n    GET_SUB_GROUP_REQUEST,\r\n    GET_SUB_GROUP_FAIL,\r\n    GET_SUB_GROUP_SUCCESS,\r\n    ADD_SUB_GROUP_REQUEST,\r\n    ADD_SUB_GROUP_FAIL,\r\n    ADD_SUB_GROUP_SUCCESS,\r\n    EDIT_SUB_GROUP_REQUEST,\r\n    EDIT_SUB_GROUP_FAIL,\r\n    EDIT_SUB_GROUP_SUCCESS,\r\n    DELETE_SUB_GROUP_REQUEST,\r\n    DELETE_SUB_GROUP_FAIL,\r\n    DELETE_SUB_GROUP_SUCCESS,\r\n    SET_GROUP_MODAL,\r\n    TOGGLE_GROUP_MODAL,\r\n    TOGGLE_SUB_GROUP_MODAL,\r\n    OPEN_MENU,\r\n    SELECT_GROUP,\r\n    GET_SUB_GROUPS_REQUEST,\r\n    GET_SUB_GROUPS_FAIL,\r\n    GET_SUB_GROUPS_SUCCESS,\r\n    SELECT_GROUPS_REQUEST,\r\n    SELECT_GROUPS_FAIL,\r\n    SELECT_GROUPS_SUCCESS,\r\n    SET_TOGGLE_SUB_MODAL_VALUE,\r\n    SET_SUB_MODAL_NAME_VALUE\r\n} from \"./actionTypes\";\r\n\r\n\r\nlet cols = 'id,name';\r\n// let url = `Group/Group`;\r\nlet url1 = `Group/SubGroup`\r\n\r\nexport const groupActions = (type, data) => {\r\n    switch (type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`group/${data.id}`)\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`group/?page_size=10000`, {cols})\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`group/`, data, {cols})\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`group/${data.id}`, data, {cols})\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletee(`group/${data.id}`, {cols}),\r\n                data\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\nexport const getSeletGroup = id => {\r\n\r\n    return {\r\n        types: [SELECT_GROUPS_REQUEST, SELECT_GROUPS_FAIL, SELECT_GROUPS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`group/${id}`)\r\n    }\r\n}\r\n\r\nexport const getSubGroup =id => {\r\n\r\n    return {\r\n        types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`subgroup/?group_id=${id}`)\r\n    }\r\n}\r\n\r\nexport const subGroupActions = (type, data) => {\r\n    switch (type) {\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`subgroup/?page_size=10000`)\r\n            }\r\n        case \"get\":\r\n            return {\r\n                types: [GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`subgroup/${data.id}`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`subgroup/`, data, {cols})\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`subgroup/${data.id}`, data, {\r\n                    param: {id: data.id, group_id: data.group_id},\r\n                    cols\r\n                })\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletee(`subgroup/?page_size=10000`, {param: {id: data.id, group_id: data.group_id}, cols})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexport const setModalValues = (key, value) => {\r\n    return {\r\n        type: SET_GROUP_MODAL,\r\n        key,\r\n        value,\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType, id) => {\r\n    let obj = (id) ? {\"id\": id} : {};\r\n    return {\r\n        type: TOGGLE_GROUP_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n/*---------------------------------------------------------------------------*/\r\nexport const setAddToggleSubModal = (modalType, group_id) => {\r\n\r\n    return (dispatch, getState) => {\r\n        let modal = getState().group.subModal;\r\n        let subGroup = getState().group.subGroup;\r\n        modal[modalType] = ! modal[modalType];\r\n        subGroup = {\r\n            name: '',\r\n            group_id: {\r\n                id: group_id\r\n            }\r\n        }\r\n        dispatch(setToggleSubModalValue(modal, subGroup))\r\n    }\r\n}\r\n\r\nexport function setToggleSubModalValue(modal, subGroup) {\r\n\r\n    return {\r\n        type: SET_TOGGLE_SUB_MODAL_VALUE,\r\n        modal,\r\n        subGroup\r\n    }\r\n}\r\n\r\nexport function setSubModalName(type, value) {\r\n\r\n    return (dispatch, getState) => {\r\n        let subGroup = getState().group.subGroup;\r\n        subGroup[type] = value;\r\n        dispatch(setSubModalNameValue(subGroup))\r\n    }\r\n}\r\n\r\nexport function setSubModalNameValue(subGroup) {\r\n\r\n    return {\r\n        type: SET_SUB_MODAL_NAME_VALUE,\r\n        subGroup\r\n    }\r\n}\r\n/*---------------------------------------------------------------------------*/\r\nexport const toggleSubModal = (modalType, id, group_id) => {\r\n    let obj = (modalType === \"add\") ? {parent_id: id} : {id}\r\n    if (group_id) {\r\n        obj = {\r\n            ...obj,\r\n            group_id\r\n        };\r\n    }\r\n    return {\r\n        type: TOGGLE_SUB_GROUP_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const handleOpen = (id, group_id) => {\r\n    return {\r\n        type: OPEN_MENU,\r\n        id,\r\n        group_id,\r\n    }\r\n}\r\n\r\nexport const selectGroup = (group_id, value) => {\r\n    return {\r\n        type: SELECT_GROUP,\r\n        group_id,\r\n        value,\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}