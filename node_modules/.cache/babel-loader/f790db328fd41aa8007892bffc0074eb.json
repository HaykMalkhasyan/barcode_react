{"ast":null,"code":"export var IsJsonString = function IsJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\nexport var IsRequiredField = function IsRequiredField(requiredFields, field, errors) {\n  if (requiredFields.includes(field.key) && field.value === \"\") {\n    errors[field.key] = \"Required\";\n  } else {\n    delete errors[field.key];\n  }\n\n  return errors;\n};\nexport var IsRequiredFields = function IsRequiredFields(requiredFields, fields, errors) {\n  requiredFields.forEach(function (val, index) {\n    if (!fields[val] || fields[val] === \"\") {\n      errors[val] = \"Required\";\n    }\n  });\n  return errors;\n};\nexport var ObjectToArray = function ObjectToArray(obj) {\n  var arr = [];\n  /*method map I change to forEach*/\n\n  Object.keys(obj).forEach(function (key) {\n    arr.push(obj[key]);\n  });\n  return arr;\n};\nexport var RenameKeys = function RenameKeys(arr, oldKeys, newKeys) {\n  var newArr = [];\n\n  if (arr.length > 0) {\n    arr.forEach(function (element) {\n      var newEl = {};\n      newKeys.forEach(function (key, index) {\n        newEl[key] = element[oldKeys[index]];\n      });\n      newArr.push(newEl);\n    });\n  }\n\n  return newArr;\n};\nexport var Put = function Put(arr, obj, key) {\n  if (arr.length > 0) {\n    arr.forEach(function (element, index) {\n      if (element[key] === obj[key]) {\n        arr[index] = obj;\n      }\n    });\n  }\n\n  return arr;\n};\nexport var Push = function Push(arr, obj) {\n  arr.unshift(obj);\n  return arr;\n};\nexport var Remove = function Remove(arr, obj, key) {\n  console.log(arr, obj, key);\n\n  if (arr.length > 0) {\n    arr.forEach(function (element, index) {\n      if (element[key] === obj[key]) {\n        arr.splice(index, 1);\n      }\n    });\n  }\n\n  console.log(arr);\n  return arr;\n};\nexport var PutObjectValues = function PutObjectValues(obj, newObj) {\n  var keys = Object.keys(newObj);\n  /*method map I change to forEach*/\n\n  keys.map(function (key) {\n    return obj[key] = newObj[key];\n  });\n  return obj;\n};\nexport var RemoveObjectValues = function RemoveObjectValues(obj, key) {\n  delete obj[key];\n  return obj;\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/utility/utils.js"],"names":["IsJsonString","str","JSON","parse","e","IsRequiredField","requiredFields","field","errors","includes","key","value","IsRequiredFields","fields","forEach","val","index","ObjectToArray","obj","arr","Object","keys","push","RenameKeys","oldKeys","newKeys","newArr","length","element","newEl","Put","Push","unshift","Remove","console","log","splice","PutObjectValues","newObj","map","RemoveObjectValues"],"mappings":"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","sourcesContent":["export const IsJsonString = (str) => {\r\n    try {\r\n        JSON.parse(str);\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const IsRequiredField = (requiredFields,field,errors) => {\r\n        if(requiredFields.includes(field.key) && field.value===\"\"){\r\n            errors[field.key] = \"Required\";\r\n        }else{\r\n            delete errors[field.key];\r\n        }\r\n\r\n    return errors;\r\n}\r\n\r\nexport const IsRequiredFields = (requiredFields,fields,errors) => {\r\n    requiredFields.forEach(function(val, index){\r\n            if(!fields[val] || fields[val]===\"\"){\r\n                errors[val]= \"Required\"\r\n            }\r\n    })\r\n    return errors;\r\n}\r\n\r\nexport const ObjectToArray = (obj) => {\r\n    let arr = [];\r\n    /*method map I change to forEach*/\r\n    Object.keys(obj).forEach((key) => {\r\n        arr.push(obj[key])\r\n    })\r\n    return arr;\r\n}\r\n\r\nexport const RenameKeys = (arr,oldKeys,newKeys) => {\r\n    let newArr = [];\r\n    if(arr.length>0){\r\n        arr.forEach(function(element){\r\n            let newEl = {}\r\n            newKeys.forEach(function(key,index) {\r\n                newEl[key] = element[oldKeys[index]]\r\n            })\r\n            newArr.push(newEl);\r\n        })\r\n    }\r\n    return newArr;\r\n\r\n}\r\n\r\nexport const Put = (arr,obj,key) => {\r\n    if(arr.length>0){\r\n        arr.forEach(function(element,index){\r\n            if(element[key] === obj[key]){\r\n                arr[index] = obj;\r\n            }\r\n        })\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport const Push = (arr,obj) => {\r\n    arr.unshift(obj)\r\n    return arr\r\n}\r\n\r\nexport const Remove = (arr,obj,key) => {\r\n    console.log(arr,obj,key)\r\n    if(arr.length>0){\r\n        arr.forEach(function(element,index){\r\n            if(element[key] === obj[key]){\r\n                arr.splice(index,1)\r\n            }\r\n        })\r\n    }\r\n    console.log(arr)\r\n    return arr;\r\n}\r\n\r\nexport const PutObjectValues = (obj,newObj) => {\r\n    let keys = Object.keys(newObj);\r\n    /*method map I change to forEach*/\r\n    keys.map((key) => {\r\n        return obj[key] = newObj[key];\r\n    })\r\n    return obj;\r\n}\r\nexport const RemoveObjectValues = (obj,key) => {\r\n    delete obj[key];\r\n    return obj;\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}