{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\pages\\\\products\\\\modal\\\\tab\\\\code\\\\content.js\";\nimport React from 'react';\nimport { Input, Table, InputGroup, Button } from 'reactstrap';\nimport Translate from \"../../../../../../Translate\";\nimport { Settings, Plus, Trash2 } from \"react-feather\";\nimport DropdownComponent from \"../../../../../../components/dropdown/dropdown\";\nimport { ListGroup, ListGroupItem, Badge } from 'reactstrap';\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  function Example() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Example)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentInputValue: {\n        barcode: \"\",\n        type: null\n      },\n      error: false\n    };\n\n    _this.addBarcodeType = function (name, id) {\n      var newCurrentInput = _objectSpread({}, _this.state.currentInputValue);\n\n      newCurrentInput.type = id;\n\n      _this.setState({\n        currentInputValue: newCurrentInput\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"addBarcode\",\n    value: function addBarcode() {\n      console.log(this.props.barcodeTypes);\n      console.log(this.state.currentInputValue.barcode); // if (this.state.currentInputValue.barcode !== \"\" && this.state.currentInputValue.type !== null) {\n      //     this.props.barcodeActions(\"add\", this.state.currentInputValue);\n      //     let newCurrentInput = {...this.state.currentInputValue};\n      //     newCurrentInput.barcode = \"\";\n      //     newCurrentInput.type = null;\n      //     this.setState({currentInputValue: newCurrentInput, error: false})\n      // } else {\n      //     this.setState({error: true})\n      // }\n    }\n  }, {\n    key: \"deleteBarcode\",\n    value: function deleteBarcode(code) {\n      this.props.barcodeActions(\"delete\", code);\n    }\n  }, {\n    key: \"changeBarcode\",\n    value: function changeBarcode(value) {\n      var newCurrentInput = _objectSpread({}, this.state.currentInputValue);\n\n      newCurrentInput.barcode = value;\n      this.setState({\n        currentInputValue: newCurrentInput\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      return React.createElement(Table, {\n        borderless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"barcode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Settings, {\n        size: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.props.types ? this.props.product.barcode ? this.props.product.barcode.map(function (value, index) {\n        return React.createElement(\"tr\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          colSpan: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(ListGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, value ? React.createElement(ListGroupItem, {\n          action: true,\n          className: \"border-0 justify-content-between p-0 pl-2 pr-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, value.barcode, React.createElement(Badge, {\n          pill: true,\n          className: \"ml-1 font-small-1 p-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, _this2.props.types.map(function (type) {\n          return type.id === value.type ? type.name : null;\n        })), React.createElement(Button, {\n          size: \"sm\",\n          color: \"danger\",\n          className: \"mb-0 pull-right\",\n          onClick: function onClick() {\n            props.removeBarcode(value, index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(Trash2, {\n          size: 16,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }))) : null)));\n      }) : null : null, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        colSpan: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.state.currentInputValue.type !== null ? React.createElement(\"span\", {\n        className: \"bg-primary\",\n        style: {\n          padding: '3px 5px',\n          borderRadius: '5px 0 0 5px',\n          color: '#444',\n          fontWeight: 600,\n          fontSize: '13px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, this.props.types.map(function (type) {\n        return type.id === _this2.state.currentInputValue.type ? type.name : null;\n      })) : null, React.createElement(Input, {\n        type: \"text\",\n        className: \"form-control  \".concat(this.state.error ? 'is-invalid' : ''),\n        id: \"barcode\",\n        value: this.state.currentInputValue.barcode ? this.state.currentInputValue.barcode || '' : '',\n        onChange: function onChange(event) {\n          return _this2.changeBarcode(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(DropdownComponent // setBarcodeType={this.props.setBarcodeType}\n      , {\n        types: this.props.types // onChange={this.props.setModalValues}\n        ,\n        onClick: this.addBarcodeType,\n        name: \"type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"sm\",\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.addBarcode();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Plus, {\n        size: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport { Example as default };","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/pages/products/modal/tab/code/content.js"],"names":["React","Input","Table","InputGroup","Button","Translate","Settings","Plus","Trash2","DropdownComponent","ListGroup","ListGroupItem","Badge","Example","state","currentInputValue","barcode","type","error","addBarcodeType","name","id","newCurrentInput","setState","console","log","props","barcodeTypes","code","barcodeActions","value","types","product","map","index","removeBarcode","padding","borderRadius","color","fontWeight","fontSize","event","changeBarcode","target","addBarcode","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Input, Table, InputGroup, Button} from 'reactstrap';\r\nimport Translate from \"../../../../../../Translate\";\r\nimport {Settings, Plus, Trash2} from \"react-feather\";\r\nimport DropdownComponent from \"../../../../../../components/dropdown/dropdown\";\r\nimport {ListGroup, ListGroupItem, Badge} from 'reactstrap';\r\n\r\n\r\nexport default class Example extends React.Component {\r\n\r\n    state = {\r\n        currentInputValue: {\r\n            barcode: \"\",\r\n            type: null\r\n        },\r\n        error: false\r\n    }\r\n\r\n    addBarcode() {\r\n        console.log(this.props.barcodeTypes)\r\n        console.log(this.state.currentInputValue.barcode)\r\n        // if (this.state.currentInputValue.barcode !== \"\" && this.state.currentInputValue.type !== null) {\r\n        //     this.props.barcodeActions(\"add\", this.state.currentInputValue);\r\n        //     let newCurrentInput = {...this.state.currentInputValue};\r\n        //     newCurrentInput.barcode = \"\";\r\n        //     newCurrentInput.type = null;\r\n        //     this.setState({currentInputValue: newCurrentInput, error: false})\r\n        // } else {\r\n        //     this.setState({error: true})\r\n        // }\r\n    }\r\n\r\n    addBarcodeType = (name, id) => {\r\n        let newCurrentInput = {...this.state.currentInputValue};\r\n        newCurrentInput.type = id;\r\n        this.setState({\r\n            currentInputValue: newCurrentInput\r\n        })\r\n    }\r\n\r\n    deleteBarcode(code) {\r\n        this.props.barcodeActions(\"delete\", code);\r\n    }\r\n\r\n    changeBarcode(value) {\r\n        let newCurrentInput = {...this.state.currentInputValue};\r\n        newCurrentInput.barcode = value;\r\n        this.setState({currentInputValue: newCurrentInput})\r\n    }\r\n\r\n    render() {\r\n\r\n        let props = this.props;\r\n        return (\r\n            <Table borderless>\r\n                <thead>\r\n                <tr>\r\n                    <th><Translate name={\"barcode\"}/></th>\r\n                    <th><Settings size={20}></Settings></th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n\r\n                    this.props.types ?\r\n                        this.props.product.barcode ?\r\n                            this.props.product.barcode.map(\r\n                                (value, index) => {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td\r\n                                                colSpan={2}\r\n                                            >\r\n                                                <ListGroup>\r\n                                                    {\r\n                                                        value ?\r\n                                                            <ListGroupItem\r\n                                                                action\r\n                                                                className=\"border-0 justify-content-between p-0 pl-2 pr-2\">\r\n                                                                {value.barcode}\r\n                                                                <Badge pill className=\"ml-1 font-small-1 p-1\">\r\n                                                                    {\r\n                                                                        this.props.types.map(\r\n                                                                            type => type.id === value.type ?\r\n                                                                                type.name\r\n                                                                                :\r\n                                                                                null\r\n                                                                        )\r\n                                                                    }\r\n                                                                </Badge>\r\n                                                                <Button\r\n                                                                    size=\"sm\"\r\n                                                                    color=\"danger\"\r\n                                                                    className=\"mb-0 pull-right\"\r\n                                                                    onClick={\r\n                                                                        () => {\r\n                                                                            props.removeBarcode(value, index)\r\n                                                                        }\r\n                                                                    }\r\n                                                                >\r\n                                                                    <Trash2 size={16}/>\r\n                                                                </Button>\r\n                                                            </ListGroupItem>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                </ListGroup>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                            )\r\n                            :\r\n                            null\r\n                        :\r\n                        null\r\n                }\r\n                <tr>\r\n                    <td colSpan={1}>\r\n                        <InputGroup size=\"sm\">\r\n                            {\r\n                                this.state.currentInputValue.type !== null ?\r\n                                    <span\r\n                                        className=\"bg-primary\"\r\n                                        style={{\r\n                                            padding: '3px 5px',\r\n                                            borderRadius: '5px 0 0 5px',\r\n                                            color: '#444',\r\n                                            fontWeight: 600,\r\n                                            fontSize: '13px'\r\n                                        }}\r\n                                    >\r\n                                        {\r\n                                            this.props.types.map(\r\n                                                type => type.id === this.state.currentInputValue.type ?\r\n                                                    type.name\r\n                                                    :\r\n                                                    null\r\n                                            )\r\n                                        }\r\n                                    </span>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            <Input\r\n                                type=\"text\"\r\n                                className={`form-control  ${this.state.error ? 'is-invalid' : ''}`}\r\n                                id=\"barcode\"\r\n                                value={this.state.currentInputValue.barcode ? this.state.currentInputValue.barcode || '' : ''}\r\n                                onChange={event => this.changeBarcode(event.target.value)}\r\n                            />\r\n                            <DropdownComponent\r\n                                // setBarcodeType={this.props.setBarcodeType}\r\n                                types={this.props.types}\r\n                                // onChange={this.props.setModalValues}\r\n                                onClick={this.addBarcodeType}\r\n                                name='type'\r\n                            />\r\n                        </InputGroup>\r\n                    </td>\r\n                    <td>\r\n                        <Button size=\"sm\" color=\"primary\" onClick={() => {\r\n                            this.addBarcode()\r\n                        }}>\r\n                            <Plus size={16}/>\r\n                        </Button>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n\r\n            </Table>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}