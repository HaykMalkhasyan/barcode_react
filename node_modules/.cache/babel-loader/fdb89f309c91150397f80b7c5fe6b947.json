{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS, GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS, SET_ACTIVE_LANGUAGE, SET_MODAL_LANGUAGE, TOGGLE_MODAL_LANGUAGE, SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS, TOGGLE_TRANSLATION_MODAL, SET_TRANSLATION_MODAL, GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS, EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS, DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS } from \"./actionTypes\";\nimport SessionStorage from \"../../services/SessionStorage\";\nvar col = 'key, value, lang';\nexport var getLanguages = function getLanguages() {\n  return {\n    types: [GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"languages\");\n    }\n  };\n};\nexport var getTranslations = function getTranslations() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var x;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                x = function x(apiClient) {\n                  return apiClient.gett(\"translations/?page_size = 1\");\n                };\n\n                console.log('X: ', x.result);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var getAllTranslations = function getAllTranslations(count) {\n  return {\n    types: [GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"translations/?page_size = \".concat(count));\n    }\n  };\n};\nexport var setTranslations = function setTranslations(key, value, language) {\n  console.log({\n    key: key,\n    value: value,\n    language: language\n  });\n  return {\n    types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.posttAdd(\"translations/\", {\n        key: key,\n        value: value,\n        language: language\n      }, {\n        col: col\n      });\n    }\n  };\n};\nexport var setLanguage = function setLanguage(lang) {\n  SessionStorage.set(\"lang\", lang);\n  return {\n    type: SET_ACTIVE_LANGUAGE,\n    lang: lang\n  };\n};\nexport var setModalLanguage = function setModalLanguage(lang) {\n  return {\n    type: SET_MODAL_LANGUAGE,\n    lang: lang\n  };\n};\nexport var toggleModalLanguage = function toggleModalLanguage() {\n  return {\n    type: TOGGLE_MODAL_LANGUAGE\n  };\n};\nexport var toggleTranslationModal = function toggleTranslationModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_TRANSLATION_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport var setTranslationsModal = function setTranslationsModal(key, value) {\n  return {\n    type: SET_TRANSLATION_MODAL,\n    key: key,\n    value: value\n  };\n};\nexport var translationActions = function translationActions(type, data) {\n  switch (type) {\n    case 'get':\n      return {\n        types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"translations/\".concat(data.id), {\n            col: col\n          });\n        }\n      };\n\n    case 'edit':\n      return {\n        types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    case 'delete':\n      return {\n        types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/lang/actions.js"],"names":["GET_LANGUAGES_REQUEST","GET_LANGUAGES_FAIL","GET_LANGUAGES_SUCCESS","GET_TRANSLATIONS_REQUEST","GET_TRANSLATIONS_FAIL","GET_TRANSLATIONS_SUCCESS","SET_ACTIVE_LANGUAGE","SET_MODAL_LANGUAGE","TOGGLE_MODAL_LANGUAGE","SET_TRANSLATIONS_REQUEST","SET_TRANSLATIONS_FAIL","SET_TRANSLATIONS_SUCCESS","TOGGLE_TRANSLATION_MODAL","SET_TRANSLATION_MODAL","GET_TRANSLATION_REQUEST","GET_TRANSLATION_FAIL","GET_TRANSLATION_SUCCESS","EDIT_TRANSLATION_REQUEST","EDIT_TRANSLATION_FAIL","EDIT_TRANSLATION_SUCCESS","DELETE_TRANSLATION_REQUEST","DELETE_TRANSLATION_FAIL","DELETE_TRANSLATION_SUCCESS","SessionStorage","col","getLanguages","types","promise","apiClient","gett","getTranslations","dispatch","x","console","log","result","getAllTranslations","count","setTranslations","key","value","language","posttAdd","setLanguage","lang","set","type","setModalLanguage","toggleModalLanguage","toggleTranslationModal","modalType","id","obj","setTranslationsModal","translationActions","data","putt","deletee"],"mappings":"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","sourcesContent":["import {\r\n    GET_LANGUAGES_REQUEST,\r\n    GET_LANGUAGES_FAIL,\r\n    GET_LANGUAGES_SUCCESS,\r\n    GET_TRANSLATIONS_REQUEST,\r\n    GET_TRANSLATIONS_FAIL,\r\n    GET_TRANSLATIONS_SUCCESS,\r\n    SET_ACTIVE_LANGUAGE,\r\n    SET_MODAL_LANGUAGE,\r\n    TOGGLE_MODAL_LANGUAGE,\r\n    SET_TRANSLATIONS_REQUEST,\r\n    SET_TRANSLATIONS_FAIL,\r\n    SET_TRANSLATIONS_SUCCESS,\r\n    TOGGLE_TRANSLATION_MODAL,\r\n    SET_TRANSLATION_MODAL,\r\n    GET_TRANSLATION_REQUEST,\r\n    GET_TRANSLATION_FAIL,\r\n    GET_TRANSLATION_SUCCESS,\r\n    EDIT_TRANSLATION_REQUEST,\r\n    EDIT_TRANSLATION_FAIL,\r\n    EDIT_TRANSLATION_SUCCESS, DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS\r\n} from \"./actionTypes\";\r\nimport SessionStorage from \"../../services/SessionStorage\";\r\n\r\nlet col = 'key, value, lang';\r\n\r\nexport const getLanguages = () => {\r\n    return {\r\n        types: [GET_LANGUAGES_REQUEST,GET_LANGUAGES_FAIL,GET_LANGUAGES_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`languages`)\r\n    }\r\n};\r\n\r\nexport const getTranslations = () => {\r\n\r\n    return async dispatch => {\r\n        let x =  apiClient => apiClient.gett(`translations/?page_size = 1`)\r\n        console.log('X: ', x.result);\r\n    }\r\n}\r\n\r\nexport const getAllTranslations = count => {\r\n\r\n    return {\r\n        types: [GET_TRANSLATIONS_REQUEST,GET_TRANSLATIONS_FAIL,GET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`translations/?page_size = ${count}`)\r\n    }\r\n}\r\n\r\nexport const setTranslations =(key, value, language) =>{\r\n    console.log({key, value, language})\r\n    return {\r\n        types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.posttAdd(`translations/`, {key, value, language}, {col})\r\n    }\r\n}\r\n\r\nexport const setLanguage = (lang) =>{\r\n    SessionStorage.set(\"lang\" ,lang)\r\n    return {\r\n        type: SET_ACTIVE_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const setModalLanguage = (lang) =>{\r\n    return {\r\n        type: SET_MODAL_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const toggleModalLanguage = () =>{\r\n    return {\r\n        type: TOGGLE_MODAL_LANGUAGE,\r\n    }\r\n};\r\n\r\nexport const toggleTranslationModal = (modalType, id) => {\r\n    let obj = {\"id\": id};\r\n    return {\r\n        type: TOGGLE_TRANSLATION_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const setTranslationsModal = (key, value) => {\r\n\r\n    return {\r\n        type: SET_TRANSLATION_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n\r\nexport const translationActions = (type, data) => {\r\n\r\n    switch (type) {\r\n        case 'get':\r\n            return {\r\n                types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`translations/${data.id}`, {col})\r\n            };\r\n        case 'edit':\r\n            return {\r\n                types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.putt(`translations/${data.id}`, data, {col})\r\n            }\r\n        case 'delete':\r\n            return {\r\n                types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.deletee(`translations/${data.id}`, data, {col})\r\n            }\r\n        default: return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}