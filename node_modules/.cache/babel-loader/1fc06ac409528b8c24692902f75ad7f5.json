{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS, GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS, ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS, EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS, DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS, GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS, ADD_BARCODE, DELETE_BARCODE, SET_PRODUCT_MODAL, TOGGLE_PRODUCT_MODAL, SET_BARCODE, ADD_MEASUREMENT_VALUE, ADD_POINTS_VALUE, ADD_UPLOAD_IMAGES } from \"./actionTypes\";\nvar url = \"Products/Product\";\nexport var productActions = function productActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"product/\".concat(data.id));\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"product/?page_size=10000\");\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"product/\", data);\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"product/\".concat(data.id), data);\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"product/\".concat(data.id));\n        },\n        data: data\n      };\n\n    default:\n      return;\n  }\n};\nexport var barcodeActions = function barcodeActions(type, code) {\n  switch (type) {\n    case \"getTypes\":\n      return {\n        types: [GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"barcode\");\n        }\n      };\n\n    case \"add\":\n      return {\n        type: ADD_BARCODE,\n        code: code\n      };\n\n    case \"delete\":\n      return {\n        type: DELETE_BARCODE,\n        code: code\n      };\n\n    default:\n      return;\n  }\n};\nexport var setModalValues = function setModalValues(key, value) {\n  console.log(key, value);\n  return {\n    type: SET_PRODUCT_MODAL,\n    key: key,\n    value: value\n  };\n};\n/*----------------------------------*/\n\nexport function setBarcodeType(key, value) {\n  return function (dispatch, getState) {\n    var barcode = _objectSpread({}, getState().products.product);\n\n    console.log(key, value, barcode);\n  };\n}\nexport function removeBarcode(data, index) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product.barcode.splice(index, 1);\n    dispatch(setBarcode(product));\n  };\n}\nexport function setBarcode(product) {\n  return {\n    type: SET_BARCODE,\n    product: product\n  };\n}\nexport function setMeasurementValue(name, data) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product[name] = data.id;\n    dispatch(addMeasurementValue(product));\n  };\n}\nexport function addMeasurementValue(product) {\n  return {\n    type: ADD_MEASUREMENT_VALUE,\n    product: product\n  };\n}\nexport function setPointsValue(name, value) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product[name] = value;\n    dispatch(addPointValue(product));\n  };\n}\nexport function addPointValue(data) {\n  return {\n    type: ADD_POINTS_VALUE,\n    data: data\n  };\n}\nexport function SetUploadImages(name, images) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product[name] = images;\n    dispatch(AddUploadImages(product));\n  };\n}\nexport function AddUploadImages(product) {\n  return {\n    type: ADD_UPLOAD_IMAGES,\n    product: product\n  };\n}\n/*----------------------------------*/\n\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_PRODUCT_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/products/actions.js"],"names":["GET_PRODUCTS_REQUEST","GET_PRODUCTS_FAIL","GET_PRODUCTS_SUCCESS","GET_PRODUCT_REQUEST","GET_PRODUCT_FAIL","GET_PRODUCT_SUCCESS","ADD_PRODUCT_REQUEST","ADD_PRODUCT_FAIL","ADD_PRODUCT_SUCCESS","EDIT_PRODUCT_REQUEST","EDIT_PRODUCT_FAIL","EDIT_PRODUCT_SUCCESS","DELETE_PRODUCT_REQUEST","DELETE_PRODUCT_FAIL","DELETE_PRODUCT_SUCCESS","GET_BARCODE_TYPES_REQUEST","GET_BARCODE_TYPES_FAIL","GET_BARCODE_TYPES_SUCCESS","ADD_BARCODE","DELETE_BARCODE","SET_PRODUCT_MODAL","TOGGLE_PRODUCT_MODAL","SET_BARCODE","ADD_MEASUREMENT_VALUE","ADD_POINTS_VALUE","ADD_UPLOAD_IMAGES","url","productActions","type","data","types","promise","apiClient","gett","id","posttAdd","putt","deletee","barcodeActions","code","setModalValues","key","value","console","log","setBarcodeType","dispatch","getState","barcode","products","product","removeBarcode","index","splice","setBarcode","setMeasurementValue","name","addMeasurementValue","setPointsValue","addPointValue","SetUploadImages","images","AddUploadImages","toggleModal","modalType","obj"],"mappings":";AAAA,SACIA,oBADJ,EAC0BC,iBAD1B,EAC6CC,oBAD7C,EAEIC,mBAFJ,EAEyBC,gBAFzB,EAE2CC,mBAF3C,EAGIC,mBAHJ,EAGyBC,gBAHzB,EAG2CC,mBAH3C,EAIIC,oBAJJ,EAI0BC,iBAJ1B,EAI6CC,oBAJ7C,EAKIC,sBALJ,EAK4BC,mBAL5B,EAKiDC,sBALjD,EAMIC,yBANJ,EAM+BC,sBAN/B,EAMuDC,yBANvD,EAOIC,WAPJ,EAOiBC,cAPjB,EAQIC,iBARJ,EAQuBC,oBARvB,EAQ6CC,WAR7C,EAQ0DC,qBAR1D,EAQiFC,gBARjF,EAQmGC,iBARnG,QASO,eATP;AAWA,IAAIC,GAAG,qBAAP;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAMC,IAAN,EAAe;AACzC,UAAOD,IAAP;AACI,SAAK,KAAL;AACI,aAAO;AACHE,QAAAA,KAAK,EAAE,CAAC3B,mBAAD,EAAqBC,gBAArB,EAAsCC,mBAAtC,CADJ;AAEH0B,QAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,iBAAeA,SAAS,CAACC,IAAV,mBAA0BJ,IAAI,CAACK,EAA/B,EAAf;AAAA;AAFN,OAAP;;AAIJ,SAAK,QAAL;AACI,aAAO;AACHJ,QAAAA,KAAK,EAAE,CAAC9B,oBAAD,EAAsBC,iBAAtB,EAAwCC,oBAAxC,CADJ;AAEH6B,QAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,iBAAeA,SAAS,CAACC,IAAV,4BAAf;AAAA;AAFN,OAAP;;AAIJ,SAAK,KAAL;AACI,aAAO;AACHH,QAAAA,KAAK,EAAE,CAACxB,mBAAD,EAAqBC,gBAArB,EAAsCC,mBAAtC,CADJ;AAEHuB,QAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,iBAAeA,SAAS,CAACG,QAAV,aAA8BN,IAA9B,CAAf;AAAA;AAFN,OAAP;;AAIJ,SAAK,MAAL;AACI,aAAO;AACHC,QAAAA,KAAK,EAAE,CAACrB,oBAAD,EAAsBC,iBAAtB,EAAwCC,oBAAxC,CADJ;AAEHoB,QAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,iBAAeA,SAAS,CAACI,IAAV,mBAA0BP,IAAI,CAACK,EAA/B,GAAoCL,IAApC,CAAf;AAAA;AAFN,OAAP;;AAIJ,SAAK,QAAL;AACI,aAAO;AACHC,QAAAA,KAAK,EAAE,CAAClB,sBAAD,EAAwBC,mBAAxB,EAA4CC,sBAA5C,CADJ;AAEHiB,QAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,iBAAeA,SAAS,CAACK,OAAV,mBAA6BR,IAAI,CAACK,EAAlC,EAAf;AAAA,SAFN;AAGHL,QAAAA,IAAI,EAAJA;AAHG,OAAP;;AAKJ;AACI;AA5BR;AA8BH,CA/BM;AAgCP,OAAO,IAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAACV,IAAD,EAAMW,IAAN,EAAgB;AAC1C,UAAOX,IAAP;AACI,SAAK,UAAL;AACI,aAAO;AACHE,QAAAA,KAAK,EAAE,CAACf,yBAAD,EAA2BC,sBAA3B,EAAkDC,yBAAlD,CADJ;AAEHc,QAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,iBAAeA,SAAS,CAACC,IAAV,WAAf;AAAA;AAFN,OAAP;;AAIJ,SAAK,KAAL;AACI,aAAO;AACHL,QAAAA,IAAI,EAAEV,WADH;AAEHqB,QAAAA,IAAI,EAAJA;AAFG,OAAP;;AAIJ,SAAK,QAAL;AACI,aAAO;AACHX,QAAAA,IAAI,EAAET,cADH;AAEHoB,QAAAA,IAAI,EAAJA;AAFG,OAAP;;AAIJ;AACI;AAjBR;AAmBH,CApBM;AAuBP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAKC,KAAL,EAAe;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBC,KAAjB;AACI,SAAO;AACHd,IAAAA,IAAI,EAAER,iBADH;AAEHqB,IAAAA,GAAG,EAAHA,GAFG;AAGHC,IAAAA,KAAK,EAALA;AAHG,GAAP;AAKH,CAPM;AAQP;;AACA,OAAO,SAASG,cAAT,CAAwBJ,GAAxB,EAA6BC,KAA7B,EAAoC;AAEvC,SAAO,UAACI,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAIC,OAAO,qBAAOD,QAAQ,GAAGE,QAAX,CAAoBC,OAA3B,CAAX;;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBC,KAAjB,EAAwBM,OAAxB;AACH,GAHD;AAKH;AAED,OAAO,SAASG,aAAT,CAAuBtB,IAAvB,EAA6BuB,KAA7B,EAAoC;AAEvC,SAAO,UAACN,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAIG,OAAO,qBAAOH,QAAQ,GAAGE,QAAX,CAAoBC,OAA3B,CAAX;;AACAA,IAAAA,OAAO,CAACF,OAAR,CAAgBK,MAAhB,CAAuBD,KAAvB,EAA8B,CAA9B;AACAN,IAAAA,QAAQ,CAACQ,UAAU,CAACJ,OAAD,CAAX,CAAR;AACH,GAJD;AAKH;AAED,OAAO,SAASI,UAAT,CAAoBJ,OAApB,EAA6B;AAEhC,SAAO;AACHtB,IAAAA,IAAI,EAAEN,WADH;AAEH4B,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASK,mBAAT,CAA6BC,IAA7B,EAAmC3B,IAAnC,EAAyC;AAE5C,SAAO,UAACiB,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAIG,OAAO,qBAAOH,QAAQ,GAAGE,QAAX,CAAoBC,OAA3B,CAAX;;AACAA,IAAAA,OAAO,CAACM,IAAD,CAAP,GAAgB3B,IAAI,CAACK,EAArB;AACAY,IAAAA,QAAQ,CAACW,mBAAmB,CAACP,OAAD,CAApB,CAAR;AACH,GAJD;AAKH;AAED,OAAO,SAASO,mBAAT,CAA6BP,OAA7B,EAAsC;AAEzC,SAAO;AACHtB,IAAAA,IAAI,EAAEL,qBADH;AAEH2B,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASQ,cAAT,CAAwBF,IAAxB,EAA8Bd,KAA9B,EAAqC;AAExC,SAAO,UAACI,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAIG,OAAO,qBAAOH,QAAQ,GAAGE,QAAX,CAAoBC,OAA3B,CAAX;;AACAA,IAAAA,OAAO,CAACM,IAAD,CAAP,GAAgBd,KAAhB;AACAI,IAAAA,QAAQ,CAACa,aAAa,CAACT,OAAD,CAAd,CAAR;AACH,GAJD;AAKH;AAED,OAAO,SAASS,aAAT,CAAuB9B,IAAvB,EAA6B;AAEhC,SAAO;AACHD,IAAAA,IAAI,EAAEJ,gBADH;AAEHK,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH;AAED,OAAO,SAAS+B,eAAT,CAAyBJ,IAAzB,EAA+BK,MAA/B,EAAuC;AAE1C,SAAO,UAACf,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAIG,OAAO,qBAAOH,QAAQ,GAAGE,QAAX,CAAoBC,OAA3B,CAAX;;AACAA,IAAAA,OAAO,CAACM,IAAD,CAAP,GAAgBK,MAAhB;AACAf,IAAAA,QAAQ,CAACgB,eAAe,CAACZ,OAAD,CAAhB,CAAR;AACH,GAJD;AAKH;AAED,OAAO,SAASY,eAAT,CAAyBZ,OAAzB,EAAkC;AAErC,SAAO;AACHtB,IAAAA,IAAI,EAAEH,iBADH;AAEHyB,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED;;AAEA,OAAO,IAAMa,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAW9B,EAAX,EAAkB;AACzC,MAAI+B,GAAG,GAAG;AAAC,UAAK/B;AAAN,GAAV;AACA,SAAO;AACHN,IAAAA,IAAI,EAAEP,oBADH;AAEH2C,IAAAA,SAAS,EAATA,SAFG;AAGHC,IAAAA,GAAG,EAAHA;AAHG,GAAP;AAKH,CAPM","sourcesContent":["import {\r\n    GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS,\r\n    GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS,\r\n    ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS,\r\n    EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS,\r\n    DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS,\r\n    GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS,\r\n    ADD_BARCODE, DELETE_BARCODE,\r\n    SET_PRODUCT_MODAL, TOGGLE_PRODUCT_MODAL, SET_BARCODE, ADD_MEASUREMENT_VALUE, ADD_POINTS_VALUE, ADD_UPLOAD_IMAGES\r\n} from \"./actionTypes\";\r\n\r\nlet url = `Products/Product`;\r\nexport const productActions = (type,data) => {\r\n    switch(type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_PRODUCT_REQUEST,GET_PRODUCT_FAIL,GET_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`product/${data.id}`)\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_PRODUCTS_REQUEST,GET_PRODUCTS_FAIL,GET_PRODUCTS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`product/?page_size=10000`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_PRODUCT_REQUEST,ADD_PRODUCT_FAIL,ADD_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`product/`,data)\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_PRODUCT_REQUEST,EDIT_PRODUCT_FAIL,EDIT_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`product/${data.id}`,data)\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_PRODUCT_REQUEST,DELETE_PRODUCT_FAIL,DELETE_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletee(`product/${data.id}`),\r\n                data\r\n            }\r\n        default:\r\n            return ;\r\n    }\r\n};\r\nexport const barcodeActions = (type,code ) => {\r\n    switch(type) {\r\n        case \"getTypes\":\r\n            return {\r\n                types: [GET_BARCODE_TYPES_REQUEST,GET_BARCODE_TYPES_FAIL,GET_BARCODE_TYPES_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`barcode`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                type: ADD_BARCODE,\r\n                code\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                type: DELETE_BARCODE,\r\n                code\r\n            }\r\n        default:\r\n            return ;\r\n    }\r\n}\r\n\r\n\r\nexport const setModalValues = (key,value) => {\r\nconsole.log(key, value)\r\n    return {\r\n        type: SET_PRODUCT_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n/*----------------------------------*/\r\nexport function setBarcodeType(key, value) {\r\n\r\n    return (dispatch, getState) => {\r\n        let barcode = {...getState().products.product};\r\n        console.log(key, value, barcode)\r\n    }\r\n\r\n}\r\n\r\nexport function removeBarcode(data, index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product};\r\n        product.barcode.splice(index, 1);\r\n        dispatch(setBarcode(product))\r\n    }\r\n}\r\n\r\nexport function setBarcode(product) {\r\n\r\n    return {\r\n        type: SET_BARCODE,\r\n        product\r\n    }\r\n}\r\n\r\nexport function setMeasurementValue(name, data) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product[name] = data.id;\r\n        dispatch(addMeasurementValue(product))\r\n    }\r\n}\r\n\r\nexport function addMeasurementValue(product) {\r\n\r\n    return {\r\n        type: ADD_MEASUREMENT_VALUE,\r\n        product\r\n    }\r\n}\r\n\r\nexport function setPointsValue(name, value) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product[name] = value;\r\n        dispatch(addPointValue(product))\r\n    }\r\n}\r\n\r\nexport function addPointValue(data) {\r\n\r\n    return {\r\n        type: ADD_POINTS_VALUE,\r\n        data\r\n    }\r\n}\r\n\r\nexport function SetUploadImages(name, images) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product[name] = images;\r\n        dispatch(AddUploadImages(product))\r\n    }\r\n}\r\n\r\nexport function AddUploadImages(product) {\r\n\r\n    return {\r\n        type: ADD_UPLOAD_IMAGES,\r\n        product\r\n    }\r\n}\r\n\r\n/*----------------------------------*/\r\n\r\nexport const toggleModal = (modalType,id) => {\r\n    let obj = {\"id\":id};\r\n    return {\r\n        type: TOGGLE_PRODUCT_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}