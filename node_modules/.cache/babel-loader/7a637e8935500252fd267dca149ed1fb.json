{"ast":null,"code":"import { GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS, GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS, SET_ACTIVE_LANGUAGE, SET_MODAL_LANGUAGE, TOGGLE_MODAL_LANGUAGE, SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS, TOGGLE_TRANSLATION_MODAL, SET_TRANSLATION_MODAL, GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS, EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS, DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS } from \"./actionTypes\";\nimport SessionStorage from \"../../services/SessionStorage\";\nvar col = 'key, value, lang';\nexport var getLanguages = function getLanguages() {\n  return {\n    types: [GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"languages\");\n    }\n  };\n};\nexport var getTranslations = function getTranslations() {\n  return {\n    types: [GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"translations/?page_size=100000\");\n    }\n  };\n};\nexport var checkTranslation = function checkTranslation(object) {\n  var index = false;\n  return function (dispatch, getState) {\n    if ('getState().languages.status === true') {\n      if ('getState().languages.translations.length > 0') {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = getState().languages.translations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n            console.log('sfsdjfhsdjfh');\n\n            if (item.key == 'language') {\n              dispatch(translationActions('delete', object));\n            }\n\n            if (object.key.toLowerCase() === item.key && object.value === item.value && object.language === item.language) {\n              index = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (index === false && object.key.length > 0) {\n          dispatch(setTranslations(object));\n          index = false;\n        }\n      }\n    }\n  };\n};\nexport var setTranslations = function setTranslations(data) {\n  console.log('DATA', data);\n  return {\n    types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.posttAdd(\"translations/\", data, {\n        col: col\n      });\n    }\n  };\n};\nexport var setLanguage = function setLanguage(lang) {\n  SessionStorage.set(\"lang\", lang);\n  return {\n    type: SET_ACTIVE_LANGUAGE,\n    lang: lang\n  };\n};\nexport var setModalLanguage = function setModalLanguage(lang) {\n  return {\n    type: SET_MODAL_LANGUAGE,\n    lang: lang\n  };\n};\nexport var toggleModalLanguage = function toggleModalLanguage() {\n  return {\n    type: TOGGLE_MODAL_LANGUAGE\n  };\n};\nexport var toggleTranslationModal = function toggleTranslationModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_TRANSLATION_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport var setTranslationsModal = function setTranslationsModal(key, value) {\n  return {\n    type: SET_TRANSLATION_MODAL,\n    key: key,\n    value: value\n  };\n};\nexport var translationActions = function translationActions(type, data) {\n  switch (type) {\n    case 'get':\n      return {\n        types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"translations/\".concat(data.id), {\n            col: col\n          });\n        }\n      };\n\n    case 'edit':\n      return {\n        types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    case 'delete':\n      return {\n        types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/lang/actions.js"],"names":["GET_LANGUAGES_REQUEST","GET_LANGUAGES_FAIL","GET_LANGUAGES_SUCCESS","GET_TRANSLATIONS_REQUEST","GET_TRANSLATIONS_FAIL","GET_TRANSLATIONS_SUCCESS","SET_ACTIVE_LANGUAGE","SET_MODAL_LANGUAGE","TOGGLE_MODAL_LANGUAGE","SET_TRANSLATIONS_REQUEST","SET_TRANSLATIONS_FAIL","SET_TRANSLATIONS_SUCCESS","TOGGLE_TRANSLATION_MODAL","SET_TRANSLATION_MODAL","GET_TRANSLATION_REQUEST","GET_TRANSLATION_FAIL","GET_TRANSLATION_SUCCESS","EDIT_TRANSLATION_REQUEST","EDIT_TRANSLATION_FAIL","EDIT_TRANSLATION_SUCCESS","DELETE_TRANSLATION_REQUEST","DELETE_TRANSLATION_FAIL","DELETE_TRANSLATION_SUCCESS","SessionStorage","col","getLanguages","types","promise","apiClient","gett","getTranslations","checkTranslation","object","index","dispatch","getState","languages","translations","item","console","log","key","translationActions","toLowerCase","value","language","length","setTranslations","data","posttAdd","setLanguage","lang","set","type","setModalLanguage","toggleModalLanguage","toggleTranslationModal","modalType","id","obj","setTranslationsModal","putt","deletee"],"mappings":"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","sourcesContent":["import {\r\n    GET_LANGUAGES_REQUEST,\r\n    GET_LANGUAGES_FAIL,\r\n    GET_LANGUAGES_SUCCESS,\r\n    GET_TRANSLATIONS_REQUEST,\r\n    GET_TRANSLATIONS_FAIL,\r\n    GET_TRANSLATIONS_SUCCESS,\r\n    SET_ACTIVE_LANGUAGE,\r\n    SET_MODAL_LANGUAGE,\r\n    TOGGLE_MODAL_LANGUAGE,\r\n    SET_TRANSLATIONS_REQUEST,\r\n    SET_TRANSLATIONS_FAIL,\r\n    SET_TRANSLATIONS_SUCCESS,\r\n    TOGGLE_TRANSLATION_MODAL,\r\n    SET_TRANSLATION_MODAL,\r\n    GET_TRANSLATION_REQUEST,\r\n    GET_TRANSLATION_FAIL,\r\n    GET_TRANSLATION_SUCCESS,\r\n    EDIT_TRANSLATION_REQUEST,\r\n    EDIT_TRANSLATION_FAIL,\r\n    EDIT_TRANSLATION_SUCCESS, DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS\r\n} from \"./actionTypes\";\r\nimport SessionStorage from \"../../services/SessionStorage\";\r\n\r\nlet col = 'key, value, lang';\r\n\r\nexport const getLanguages = () => {\r\n    return {\r\n        types: [GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`languages`)\r\n    }\r\n};\r\n\r\nexport const getTranslations = () => {\r\n    return {\r\n        types: [GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`translations/?page_size=100000`)\r\n    }\r\n}\r\n\r\nexport const checkTranslation = object => {\r\n\r\n    let index = false;\r\n\r\n    return (dispatch, getState) => {\r\n        if ('getState().languages.status === true') {\r\n            if ('getState().languages.translations.length > 0') {\r\n                for (let item of getState().languages.translations) {\r\n                    console.log('sfsdjfhsdjfh')\r\n                    if (item.key == 'language') {\r\n                        dispatch(translationActions('delete', object))\r\n                    }\r\n                    if (object.key.toLowerCase() === item.key && object.value === item.value && object.language === item.language) {\r\n                        index = true;\r\n                    }\r\n                }\r\n                if (index === false && object.key.length > 0) {\r\n                    dispatch(setTranslations(object))\r\n                    index = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const setTranslations = (data) => {\r\n    console.log('DATA', data)\r\n    return {\r\n        types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.posttAdd(`translations/`, data, {col})\r\n    }\r\n}\r\n\r\nexport const setLanguage = (lang) => {\r\n    SessionStorage.set(\"lang\", lang)\r\n    return {\r\n        type: SET_ACTIVE_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const setModalLanguage = (lang) => {\r\n    return {\r\n        type: SET_MODAL_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const toggleModalLanguage = () => {\r\n    return {\r\n        type: TOGGLE_MODAL_LANGUAGE,\r\n    }\r\n};\r\n\r\nexport const toggleTranslationModal = (modalType, id) => {\r\n    let obj = {\"id\": id};\r\n    return {\r\n        type: TOGGLE_TRANSLATION_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const setTranslationsModal = (key, value) => {\r\n\r\n    return {\r\n        type: SET_TRANSLATION_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n\r\nexport const translationActions = (type, data) => {\r\n\r\n    switch (type) {\r\n        case 'get':\r\n            return {\r\n                types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`translations/${data.id}`, {col})\r\n            };\r\n        case 'edit':\r\n            return {\r\n                types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.putt(`translations/${data.id}`, data, {col})\r\n            }\r\n        case 'delete':\r\n            return {\r\n                types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.deletee(`translations/${data.id}`, data, {col})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}