{"ast":null,"code":"import { GET_USERS_REQUEST, GET_USERS_FAIL, GET_USERS_SUCCESS, GET_USER_REQUEST, GET_USER_FAIL, GET_USER_SUCCESS, ADD_USER_REQUEST, ADD_USER_FAIL, ADD_USER_SUCCESS, EDIT_USER_REQUEST, EDIT_USER_FAIL, EDIT_USER_SUCCESS, DELETE_USER_REQUEST, DELETE_USER_FAIL, DELETE_USER_SUCCESS, SET_MODAL_VALUES } from \"./actionTypes\";\nimport { ADD_CATEGORY_FAIL, ADD_CATEGORY_REQUEST, ADD_CATEGORY_SUCCESS, DELETE_CATEGORY_FAIL, DELETE_CATEGORY_REQUEST, DELETE_CATEGORY_SUCCESS, EDIT_CATEGORY_FAIL, EDIT_CATEGORY_REQUEST, EDIT_CATEGORY_SUCCESS, GET_CATEGORIES_FAIL, GET_CATEGORIES_REQUEST, GET_CATEGORIES_SUCCESS, GET_CATEGORY_FAIL, GET_CATEGORY_REQUEST, GET_CATEGORY_SUCCESS } from \"../categories/actionTypes\";\nvar cols = 'id,username,firstname,lastname';\nvar url = \"User/Users\";\nexport var categoryActions = function categoryActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_USERS_REQUEST, GET_USERS_FAIL, GET_USERS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.get(url, JSON.stringify({\n            cols: cols\n          }));\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_USERS_REQUEST, GET_USERS_FAIL, GET_USERS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.get(url, JSON.stringify({\n            cols: cols\n          }));\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_CATEGORY_REQUEST, ADD_CATEGORY_FAIL, ADD_CATEGORY_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.post(url, JSON.stringify({\n            data: data,\n            cols: cols\n          }));\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_CATEGORY_REQUEST, EDIT_CATEGORY_FAIL, EDIT_CATEGORY_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.put(url, JSON.stringify({\n            id: data.id,\n            data: data,\n            cols: cols\n          }));\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_CATEGORY_REQUEST, DELETE_CATEGORY_FAIL, DELETE_CATEGORY_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.delete(url, JSON.stringify({\n            id: data.id,\n            data: data,\n            cols: cols\n          }));\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var getUsers = function getUsers() {};\nexport var getUser = function getUser(id) {\n  return {\n    types: [GET_USER_REQUEST, GET_USER_FAIL, GET_USER_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.get(url, JSON.stringify({\n        param: {\n          id: id\n        }\n      }));\n    }\n  };\n};\nexport var addUser = function addUser(data) {\n  if (!data.active) {\n    data.active = 0;\n  }\n\n  var types = [ADD_USER_REQUEST, ADD_USER_FAIL, ADD_USER_SUCCESS];\n\n  var promise = function promise(apiClient) {\n    return apiClient.post(url, JSON.stringify({\n      data: data,\n      cols: cols\n    }));\n  };\n\n  if (data.id) {\n    types = [EDIT_USER_REQUEST, EDIT_USER_FAIL, EDIT_USER_SUCCESS];\n\n    promise = function promise(apiClient) {\n      return apiClient.put(url, JSON.stringify({\n        data: data,\n        cols: cols,\n        id: data.id\n      }));\n    };\n  }\n\n  return {\n    types: types,\n    promise: promise\n  };\n};\nexport var deleteUser = function deleteUser(id) {\n  return {\n    types: [DELETE_USER_REQUEST, DELETE_USER_FAIL, DELETE_USER_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.delete(url, JSON.stringify({\n        id: id,\n        cols: cols\n      }));\n    }\n  };\n};\nexport var userModal = function userModal(type, modal) {\n  return {\n    type: type.toUpperCase() + '_MODAL',\n    modal: modal\n  };\n};\nexport var setModalValues = function setModalValues(value, required) {\n  return {\n    type: SET_MODAL_VALUES,\n    value: value,\n    required: required\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/users/actions.js"],"names":["GET_USERS_REQUEST","GET_USERS_FAIL","GET_USERS_SUCCESS","GET_USER_REQUEST","GET_USER_FAIL","GET_USER_SUCCESS","ADD_USER_REQUEST","ADD_USER_FAIL","ADD_USER_SUCCESS","EDIT_USER_REQUEST","EDIT_USER_FAIL","EDIT_USER_SUCCESS","DELETE_USER_REQUEST","DELETE_USER_FAIL","DELETE_USER_SUCCESS","SET_MODAL_VALUES","ADD_CATEGORY_FAIL","ADD_CATEGORY_REQUEST","ADD_CATEGORY_SUCCESS","DELETE_CATEGORY_FAIL","DELETE_CATEGORY_REQUEST","DELETE_CATEGORY_SUCCESS","EDIT_CATEGORY_FAIL","EDIT_CATEGORY_REQUEST","EDIT_CATEGORY_SUCCESS","GET_CATEGORIES_FAIL","GET_CATEGORIES_REQUEST","GET_CATEGORIES_SUCCESS","GET_CATEGORY_FAIL","GET_CATEGORY_REQUEST","GET_CATEGORY_SUCCESS","cols","url","categoryActions","type","data","types","promise","apiClient","get","JSON","stringify","post","put","id","delete","getUsers","getUser","param","addUser","active","deleteUser","userModal","modal","toUpperCase","setModalValues","value","required"],"mappings":"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","sourcesContent":["import {\r\n    GET_USERS_REQUEST,GET_USERS_FAIL,GET_USERS_SUCCESS,\r\n    GET_USER_REQUEST,GET_USER_FAIL,GET_USER_SUCCESS,\r\n    ADD_USER_REQUEST,ADD_USER_FAIL,ADD_USER_SUCCESS,\r\n    EDIT_USER_REQUEST,EDIT_USER_FAIL,EDIT_USER_SUCCESS,\r\n    DELETE_USER_REQUEST,DELETE_USER_FAIL,DELETE_USER_SUCCESS,\r\n    SET_MODAL_VALUES\r\n} from \"./actionTypes\";\r\nimport {\r\n    ADD_CATEGORY_FAIL,\r\n    ADD_CATEGORY_REQUEST,\r\n    ADD_CATEGORY_SUCCESS, DELETE_CATEGORY_FAIL,\r\n    DELETE_CATEGORY_REQUEST, DELETE_CATEGORY_SUCCESS,\r\n    EDIT_CATEGORY_FAIL,\r\n    EDIT_CATEGORY_REQUEST,\r\n    EDIT_CATEGORY_SUCCESS,\r\n    GET_CATEGORIES_FAIL,\r\n    GET_CATEGORIES_REQUEST,\r\n    GET_CATEGORIES_SUCCESS,\r\n    GET_CATEGORY_FAIL,\r\n    GET_CATEGORY_REQUEST,\r\n    GET_CATEGORY_SUCCESS\r\n} from \"../categories/actionTypes\";\r\n\r\nlet cols =  'id,username,firstname,lastname';\r\nlet url = `User/Users`;\r\nexport const categoryActions = (type,data) => {\r\n    switch(type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_USERS_REQUEST,GET_USERS_FAIL,GET_USERS_SUCCESS],\r\n                promise: (apiClient) => apiClient.get(url, JSON.stringify({ cols }))\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_USERS_REQUEST,GET_USERS_FAIL,GET_USERS_SUCCESS],\r\n                promise: (apiClient) => apiClient.get(url, JSON.stringify({ cols }))\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_CATEGORY_REQUEST, ADD_CATEGORY_FAIL, ADD_CATEGORY_SUCCESS],\r\n                promise: (apiClient) => apiClient.post(url, JSON.stringify({data, cols}))\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_CATEGORY_REQUEST,EDIT_CATEGORY_FAIL,EDIT_CATEGORY_SUCCESS],\r\n                promise: (apiClient) => apiClient.put(url,JSON.stringify({id:data.id,data,cols}))\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_CATEGORY_REQUEST,DELETE_CATEGORY_FAIL,DELETE_CATEGORY_SUCCESS],\r\n                promise: (apiClient) => apiClient.delete(url, JSON.stringify({id:data.id, data,cols }))\r\n            }\r\n        default:\r\n            return ;\r\n    }\r\n};\r\n\r\nexport const getUsers = () => {\r\n\r\n};\r\n\r\nexport const getUser = ( id ) => {\r\n    return {\r\n        types: [GET_USER_REQUEST,GET_USER_FAIL,GET_USER_SUCCESS],\r\n        promise: (apiClient) => apiClient.get(url, JSON.stringify({ param:{id} }))\r\n    }\r\n};\r\n\r\nexport const addUser = (data) => {\r\n\r\n    if(!data.active){\r\n       data.active = 0\r\n    }\r\n    let types = [ADD_USER_REQUEST,ADD_USER_FAIL,ADD_USER_SUCCESS];\r\n    let promise = (apiClient) => apiClient.post(url,JSON.stringify({data,cols}))\r\n    if(data.id){\r\n        types = [EDIT_USER_REQUEST,EDIT_USER_FAIL,EDIT_USER_SUCCESS];\r\n        promise = (apiClient) => apiClient.put(url,JSON.stringify({data,cols,id:data.id}));\r\n    }\r\n    return {\r\n        types: types,\r\n        promise: promise\r\n    }\r\n};\r\n\r\nexport const deleteUser = ( id ) => {\r\n    return {\r\n        types: [DELETE_USER_REQUEST,DELETE_USER_FAIL,DELETE_USER_SUCCESS],\r\n        promise: (apiClient) => apiClient.delete(url, JSON.stringify({ id,cols }))\r\n    }\r\n};\r\n\r\n\r\nexport const userModal = (type,modal) => {\r\n    return {\r\n        type: type.toUpperCase()+'_MODAL',\r\n        modal\r\n    }\r\n}\r\n\r\nexport const setModalValues = (value,required) => {\r\n    return {\r\n        type: SET_MODAL_VALUES,\r\n        value,\r\n        required\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}