{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\pages\\\\users\\\\userModal.js\";\nimport React, { useState } from \"react\";\nimport { Col, Row, FormGroup, Label, Button, ModalBody, ModalFooter, Input, Modal, ModalHeader } from \"reactstrap\";\nimport Translate from \"../../../Translate\"; // import jwt from \"jwt-simple\";\n\nvar UserModal = function UserModal(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var modalBodyContent = function modalBodyContent() {\n    if (props.type === \"delete\") {\n      return React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"form-control  \".concat(status ? 'is-invalid' : ''),\n        type: \"password\",\n        id: \"password\",\n        onBlur: function onBlur(event) {\n          return event.target.value.length < 8 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        } // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\");\n        } // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\n        ,\n        value: props.user.password ? props.user.password : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: 'Դուք համոզված ե՞ք ջնջել',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"firstName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"firstname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(status ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"firstName\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"first_name\", event.target.value);\n        },\n        value: props.user.first_name ? props.user.first_name : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"lastName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"lastname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(status ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"lastName\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"last_name\", event.target.value);\n        },\n        value: props.user.last_name ? props.user.last_name : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 || !event.target.value.includes('@') || !event.target.value.includes('.') ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(status ? 'is-invalid' : ''),\n        type: \"email\",\n        id: \"email\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"email\", event.target.value);\n        },\n        value: props.user.email ? props.user.email : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"company\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"company\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"form-control  \".concat(props.errors.company_id ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"company\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"company_id\", event.target.value);\n        },\n        value: props.user.company_id ? props.user.company_id : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(status ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"username\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"username\", event.target.value);\n        },\n        value: props.user.username ? props.user.username : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"form-control  \".concat(status ? 'is-invalid' : ''),\n        type: \"password\",\n        id: \"password\",\n        onBlur: function onBlur(event) {\n          return event.target.value.length < 8 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        } // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\");\n        } // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\n        ,\n        value: props.user.password ? props.user.password : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"position\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"positions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      })), React.createElement(Input, {\n        type: \"select\",\n        id: \"position\",\n        value: props.user.position_id || \"0\" // defaultValue={\"0\"}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"position_id\", event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, props.positions ? props.positions.map(function (item, key) {\n        return React.createElement(\"option\", {\n          value: item.id,\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, item.name);\n      }) : React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Empty\")))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(Input, {\n        type: \"select\",\n        id: \"active\",\n        value: props.user.active || \"0\" // defaultValue={\"0\"}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"active\", event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Yes\"), React.createElement(\"option\", {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"No\")))))));\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    isOpen: props.modal[props.type],\n    toggle: function toggle() {\n      setStatus(false);\n      props.toggleModal(props.type);\n    },\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: function toggle() {\n      props.toggleModal(props.type);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: props.type + \"User\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  })), modalBodyContent(), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    outline: true,\n    type: \"submit\",\n    onClick: function onClick() {\n      if (props.type !== 'delete' && props.user.first_name && props.user.first_name.length && props.user.last_name && props.user.last_name.length && props.user.email && props.user.email.length && props.user.email.includes('@') && props.user.email.includes('.') && props.user.username && props.user.username.length && props.user.password && props.user.password.length >= 8) {\n        setStatus(false);\n        var index = false;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = props.users[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.username === props.user.username) {\n              index = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (index !== true) {\n          props.userActions(props.type, props.user);\n        } else {\n          setStatus(true);\n        }\n      } else if (props.type !== 'delete') {\n        setStatus(true);\n      }\n\n      if (props.type === 'delete') {\n        props.userActions(props.type, props.user);\n      }\n\n      if (props.type === 'add') {\n        var _index = false;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = props.users[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _item = _step2.value;\n\n            if (_item.username === props.user.username) {\n              _index = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        if (_index !== true) {\n          props.userActions(props.type, props.user);\n        } else {\n          setStatus(true);\n        }\n      }\n\n      if (props.type === 'edit') {\n        props.userActions(props.type, props.user);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: \"confirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  })))));\n};\n\nexport default UserModal;","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/pages/users/userModal.js"],"names":["React","useState","Col","Row","FormGroup","Label","Button","ModalBody","ModalFooter","Input","Modal","ModalHeader","Translate","UserModal","props","status","setStatus","modalBodyContent","type","event","target","value","length","style","borderColor","setModalValues","user","password","first_name","last_name","includes","email","errors","company_id","username","position_id","positions","map","item","key","id","name","active","modal","toggleModal","index","users","userActions"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {\r\n    Col,\r\n    Row,\r\n    FormGroup,\r\n    Label,\r\n    Button,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Input,\r\n    Modal,\r\n    ModalHeader\r\n} from \"reactstrap\";\r\nimport Translate from \"../../../Translate\";\r\n// import jwt from \"jwt-simple\";\r\n\r\nconst UserModal = (props) => {\r\n    const [status, setStatus] = useState(false)\r\n    const modalBodyContent = () => {\r\n        if (props.type === \"delete\") {\r\n            return (\r\n                <ModalBody>\r\n                    <FormGroup>\r\n                        <Label for=\"password\"><Translate name=\"password\"/></Label>\r\n                        <input\r\n                            className={`form-control  ${status ? 'is-invalid' : ''}`}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            onBlur={event => event.target.value.length < 8 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                            // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\r\n                            onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\")}\r\n                            // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\r\n                            value={props.user.password ? props.user.password : \"\"}\r\n\r\n                        />\r\n                    </FormGroup>\r\n                    <p>\r\n                        <Translate name={'Դուք համոզված ե՞ք ջնջել'}/>\r\n                    </p>\r\n                </ModalBody>\r\n            )\r\n        } else {\r\n\r\n            return (\r\n\r\n                <ModalBody>\r\n                    <form>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"firstName\"><Translate name=\"firstname\"/></Label>\r\n                                    <input\r\n                                        onBlur={event => event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${status ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"firstName\"\r\n                                        onChange={event => props.setModalValues(\"first_name\", event.target.value)}\r\n                                        value={props.user.first_name ? props.user.first_name : ''}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"lastName\"><Translate name=\"lastname\"/></Label>\r\n                                    <input\r\n                                        onBlur={event => event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${status ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"lastName\"\r\n                                        onChange={event => props.setModalValues(\"last_name\", event.target.value)}\r\n                                        value={props.user.last_name ? props.user.last_name : \"\"}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"email\"><Translate name=\"email\"/></Label>\r\n                                    <input\r\n                                        onBlur={event => event.target.value.length === 0 || !event.target.value.includes('@') || !event.target.value.includes('.') ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${status ? 'is-invalid' : ''}`}\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        onChange={event => props.setModalValues(\"email\", event.target.value)}\r\n                                        value={props.user.email ? props.user.email : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"company\"><Translate name=\"company\"/></Label>\r\n                                    <input\r\n                                        className={`form-control  ${props.errors.company_id ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"company\"\r\n                                        onChange={event => props.setModalValues(\"company_id\", event.target.value)}\r\n                                        value={props.user.company_id ? props.user.company_id : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"username\"><Translate name=\"username\"/></Label>\r\n                                    <input\r\n                                        onBlur={event => event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${status ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"username\"\r\n                                        onChange={event => props.setModalValues(\"username\", event.target.value)}\r\n                                        value={props.user.username ? props.user.username : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"password\"><Translate name=\"password\"/></Label>\r\n                                    <input\r\n                                        className={`form-control  ${status ? 'is-invalid' : ''}`}\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        onBlur={event => event.target.value.length < 8 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\r\n                                        onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\")}\r\n                                        // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\r\n                                        value={props.user.password ? props.user.password : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"position\"><Translate name=\"positions\"/></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        id=\"position\"\r\n                                        value={props.user.position_id || \"0\"}\r\n                                        // defaultValue={\"0\"}\r\n                                        onChange={event => props.setModalValues(\"position_id\", event.target.value)}\r\n                                    >\r\n                                        {/*<option value=\"0\">Choose</option>*/}\r\n                                        {\r\n                                            props.positions ?\r\n                                                props.positions.map(\r\n                                                    (item, key) => {\r\n                                                        return <option value={item.id} key={key}>{item.name}</option>\r\n                                                    }\r\n                                                )\r\n                                                :\r\n                                                <option value=\"0\">Empty</option>\r\n                                        }\r\n                                    </Input>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"active\"><Translate name=\"active\"/></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        id=\"active\"\r\n                                        value={props.user.active || \"0\"}\r\n                                        // defaultValue={\"0\"}\r\n                                        onChange={event => props.setModalValues(\"active\", event.target.value)}\r\n                                    >\r\n                                        <option value=\"0\">Yes</option>\r\n                                        <option value=\"1\">No</option>\r\n                                    </Input>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n                    </form>\r\n\r\n                </ModalBody>\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Modal\r\n                isOpen={props.modal[props.type]}\r\n                toggle={\r\n                    () => {\r\n                        setStatus(false)\r\n                        props.toggleModal(props.type)\r\n                    }\r\n                }\r\n                size=\"lg\"\r\n            >\r\n                <ModalHeader toggle={() => {\r\n                    props.toggleModal(props.type)\r\n                }}><Translate\r\n                    name={props.type + \"User\"}/></ModalHeader>\r\n                {modalBodyContent()}\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        outline\r\n                        type=\"submit\"\r\n                        onClick={\r\n                            () => {\r\n                                if (props.type !== 'delete' && (props.user.first_name && props.user.first_name.length) && (props.user.last_name && props.user.last_name.length) && (props.user.email && props.user.email.length && props.user.email.includes('@') && props.user.email.includes('.')) && (props.user.username && props.user.username.length) && (props.user.password && props.user.password.length >= 8)) {\r\n                                    setStatus(false)\r\n                                    let index = false\r\n                                    for (let item of props.users) {\r\n                                        if (item.username === props.user.username) {\r\n                                            index = true\r\n                                        }\r\n                                    }\r\n                                    if (index !== true) {\r\n                                        props.userActions(props.type, props.user);\r\n                                    } else {\r\n                                        setStatus(true)\r\n                                    }\r\n                                } else if (props.type !== 'delete') {\r\n                                    setStatus(true)\r\n                                }\r\n                                if (props.type === 'delete') {\r\n                                    props.userActions(props.type, props.user);\r\n                                }\r\n                                if (props.type === 'add') {\r\n                                    let index = false\r\n                                    for (let item of props.users) {\r\n                                        if (item.username === props.user.username) {\r\n                                            index = true\r\n                                        }\r\n                                    }\r\n                                    if (index !== true) {\r\n                                        props.userActions(props.type, props.user);\r\n                                    } else {\r\n                                        setStatus(true)\r\n                                    }\r\n                                }\r\n                                if (props.type === 'edit') {\r\n                                    props.userActions(props.type, props.user);\r\n                                }\r\n                            }\r\n                        }\r\n                    >\r\n                        <Translate name=\"confirm\"/>\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n        </React.Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default UserModal;"]},"metadata":{},"sourceType":"module"}