{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\pages\\\\products\\\\searchGroup\\\\classifiersModal\\\\classifiersModal.js\";\n\nimport React, { useState } from \"react\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport Translate from \"../../../../../Translate\";\nimport classes from './classifiersModal.module.css';\nimport ButtonUi from \"../../../../../components/buttons/buttonUi\";\nimport ClassifiersTreeViewer from \"./classifiersTreeViewer/classifiersTreeViewer\";\n\nvar ClassifiersModal = function ClassifiersModal(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var groupsClickHandler = function groupsClickHandler(item) {\n    setActive(item.id);\n    props.selectClassifiersGroup(item);\n  };\n\n  var chooseClassifiersHandler = function chooseClassifiersHandler() {\n    setActive(false);\n    props.createClassifiers();\n  };\n\n  var toggleModal = function toggleModal() {\n    setActive(false);\n    props.classifiersToggleModal();\n  };\n\n  return React.createElement(Modal, {\n    isOpen: props.classifiersModal,\n    size: \"md\",\n    toggle: toggleModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: 'Classifiers',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: classes.mBodyHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, props.groups && props.groups.length ? props.groups.map(function (item) {\n    return React.createElement(ButtonUi, {\n      key: item.id,\n      label: item.name,\n      name: 'group',\n      width: 'auto',\n      height: 'auto',\n      margin: '3px 5px',\n      padding: '2px 8px',\n      fontSize: '12px',\n      variant: +active === parseInt(item.id) ? 'contained' : 'outlined',\n      color: +active === parseInt(item.id) ? 'primary' : 'default',\n      onClick: groupsClickHandler.bind(_this, item),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }) : React.createElement(\"p\", {\n    className: \"text-center info m-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: 'The groups are empty',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }))), React.createElement(\"section\", {\n    className: classes.mBodySection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, props.group && props.subGroups ? React.createElement(ClassifiersTreeViewer // DATA\n  , {\n    data: props.subGroups,\n    group: props.group // METHODS\n    ,\n    selectGroupsNode: props.selectGroupsNode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }) : props.subGroups.length === 0 ? React.createElement(\"p\", {\n    className: \"text-center info m-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: 'The groups are empty',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })) : React.createElement(\"p\", {\n    className: \"text-center info pt-2 mb-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: 'Everyone is selected',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })))), props.group !== null ? React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: 'primary',\n    onClick: chooseClassifiersHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: 'select',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }))) : null, props.createError ? React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"danger font-weight-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: 'Error! The classifier was not selected',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }))) : null);\n};\n\nexport default ClassifiersModal;","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/pages/products/searchGroup/classifiersModal/classifiersModal.js"],"names":["React","useState","Button","Modal","ModalBody","ModalFooter","ModalHeader","Translate","classes","ButtonUi","ClassifiersTreeViewer","ClassifiersModal","props","active","setActive","groupsClickHandler","item","id","selectClassifiersGroup","chooseClassifiersHandler","createClassifiers","toggleModal","classifiersToggleModal","classifiersModal","mBodyHeader","groups","length","map","name","parseInt","bind","mBodySection","group","subGroups","selectGroupsNode","createError"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport Translate from \"../../../../../Translate\";\r\nimport classes from './classifiersModal.module.css'\r\nimport ButtonUi from \"../../../../../components/buttons/buttonUi\";\r\nimport ClassifiersTreeViewer from \"./classifiersTreeViewer/classifiersTreeViewer\";\r\n\r\nconst ClassifiersModal = props => {\r\n    const [active, setActive] = useState(false)\r\n\r\n    const groupsClickHandler = item => {\r\n        setActive(item.id)\r\n        props.selectClassifiersGroup(item)\r\n    }\r\n\r\n    const chooseClassifiersHandler = () => {\r\n        setActive(false)\r\n        props.createClassifiers()\r\n    }\r\n\r\n    const toggleModal = () => {\r\n        setActive(false)\r\n        props.classifiersToggleModal()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={props.classifiersModal}\r\n            size='md'\r\n            toggle={toggleModal}\r\n        >\r\n            <ModalHeader>\r\n                <Translate name={'Classifiers'}/>\r\n            </ModalHeader>\r\n            <ModalBody>\r\n                <header className={classes.mBodyHeader}>\r\n                    {\r\n                        props.groups && props.groups.length ?\r\n                            props.groups.map(\r\n                                item => {\r\n\r\n                                    return (\r\n                                        <ButtonUi\r\n                                            key={item.id}\r\n                                            label={item.name}\r\n                                            name={'group'}\r\n                                            width={'auto'}\r\n                                            height={'auto'}\r\n                                            margin={'3px 5px'}\r\n                                            padding={'2px 8px'}\r\n                                            fontSize={'12px'}\r\n                                            variant={+active === parseInt(item.id) ? 'contained' : 'outlined'}\r\n                                            color={+active === parseInt(item.id) ? 'primary' : 'default'}\r\n                                            onClick={groupsClickHandler.bind(this, item)}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            )\r\n                            :\r\n                            <p className=\"text-center info m-1\">\r\n                                <Translate name={'The groups are empty'}/>\r\n                            </p>\r\n                    }\r\n                </header>\r\n                <section className={classes.mBodySection}>\r\n                    {\r\n                        props.group && props.subGroups ?\r\n                            <ClassifiersTreeViewer\r\n                                // DATA\r\n                                data={props.subGroups}\r\n                                group={props.group}\r\n                                // METHODS\r\n                                selectGroupsNode={props.selectGroupsNode}\r\n                            />\r\n                            :\r\n                            props.subGroups.length === 0 ?\r\n                                <p className=\"text-center info m-1\">\r\n                                    <Translate name={'The groups are empty'}/>\r\n                                </p>\r\n                                :\r\n                                <p className=\"text-center info pt-2 mb-0\">\r\n                                    <Translate name={'Everyone is selected'}/>\r\n                                </p>\r\n                    }\r\n                </section>\r\n            </ModalBody>\r\n            {\r\n                props.group !== null ?\r\n                    <ModalFooter>\r\n                        <Button\r\n                            color={'primary'}\r\n                            onClick={chooseClassifiersHandler}\r\n                        >\r\n                            <Translate name={'select'}/>\r\n                        </Button>\r\n                    </ModalFooter>\r\n                    :\r\n                    null\r\n            }\r\n            {\r\n                props.createError ?\r\n                    <ModalFooter>\r\n                        <p className=\"danger font-weight-bold\"><Translate\r\n                            name={'Error! The classifier was not selected'}/></p>\r\n                    </ModalFooter>\r\n                    :\r\n                    null\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ClassifiersModal"]},"metadata":{},"sourceType":"module"}