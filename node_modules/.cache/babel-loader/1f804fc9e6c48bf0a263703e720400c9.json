{"ast":null,"code":"import { GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS, GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS, ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS, EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS, DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS, GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS, SET_SUPPLIER_MODAL, TOGGLE_SUPPLIER_MODAL, GET_Currency_REQUEST, GET_Currency_FAIL, GET_Currency_SUCCESS, SUPPLIERS_ADD_MODAL, SET_SUPPLIERS_VALUE } from \"./actionTypes\";\nvar cols = 'id,name,type,hh,address,phone';\nexport var supplierActions = function supplierActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"suppliers/\".concat(data.id), {\n            cols: cols\n          });\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett('suppliers/', {\n            cols: cols\n          });\n        }\n      };\n\n    case \"add\":\n      data.type = 0;\n      console.log(data);\n      return {\n        types: [ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"suppliers/\", data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"suppliers/\".concat(data.id), data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.delete(\"suppliers/\".concat(data.id), {\n            cols: cols\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var getBanks = function getBanks() {\n  return {\n    types: [GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett('bank/');\n    }\n  };\n};\nexport var getCurrency = function getCurrency() {\n  return {\n    types: [GET_Currency_REQUEST, GET_Currency_FAIL, GET_Currency_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett('currency/');\n    }\n  };\n};\nexport var setModalValues = function setModalValues(key, value, index, add) {\n  return {\n    type: SET_SUPPLIER_MODAL,\n    key: key,\n    value: value,\n    index: index,\n    add: add\n  };\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_SUPPLIER_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport function openSuppliersAddModal() {\n  return {\n    type: SUPPLIERS_ADD_MODAL\n  };\n}\nexport function reducePhone(index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n    var phone = setSupplier.phone;\n    phone.splice(index, 1);\n    setSupplier.phone = phone;\n    dispatch(setValues(setSupplier));\n  };\n}\nexport function addPhone(value, index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n    var phone = setSupplier.phone;\n    phone[index + 1] = value;\n    setSupplier.phone = phone;\n    dispatch(setValues(setSupplier));\n  };\n}\nexport function setSuppliersAddModalValue(name, value, index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n\n    switch (name) {\n      case 'bank_id':\n        {\n          var banks = getState().suppliers.banks;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = banks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var bank = _step.value;\n\n              if (bank.id === +value) {\n                setSupplier.tin[name] = bank;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      case 'currency_id':\n        {\n          var currency = getState().suppliers.currency;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = currency[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var item = _step2.value;\n\n              if (item.id === +value) {\n                setSupplier.tin[name] = item;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      case 'tin_value':\n        {\n          setSupplier.tin[name] = value;\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      case 'phone':\n        {\n          var phone = setSupplier.phone;\n          phone[index] = value;\n          setSupplier.phone = phone;\n          console.log(setSupplier.phone);\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      default:\n        {\n          setSupplier[name] = value;\n          dispatch(setValues(setSupplier));\n          break;\n        }\n    }\n  };\n}\nexport function setValues(setSupplier) {\n  return {\n    type: SET_SUPPLIERS_VALUE,\n    setSupplier: setSupplier\n  };\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/suppliers/actions.js"],"names":["GET_SUPPLIERS_REQUEST","GET_SUPPLIERS_FAIL","GET_SUPPLIERS_SUCCESS","GET_SUPPLIER_REQUEST","GET_SUPPLIER_FAIL","GET_SUPPLIER_SUCCESS","ADD_SUPPLIER_REQUEST","ADD_SUPPLIER_FAIL","ADD_SUPPLIER_SUCCESS","EDIT_SUPPLIER_REQUEST","EDIT_SUPPLIER_FAIL","EDIT_SUPPLIER_SUCCESS","DELETE_SUPPLIER_REQUEST","DELETE_SUPPLIER_FAIL","DELETE_SUPPLIER_SUCCESS","GET_BANKS_REQUEST","GET_BANKS_FAIL","GET_BANKS_SUCCESS","SET_SUPPLIER_MODAL","TOGGLE_SUPPLIER_MODAL","GET_Currency_REQUEST","GET_Currency_FAIL","GET_Currency_SUCCESS","SUPPLIERS_ADD_MODAL","SET_SUPPLIERS_VALUE","cols","supplierActions","type","data","types","promise","apiClient","gett","id","console","log","posttAdd","putt","delete","getBanks","getCurrency","setModalValues","key","value","index","add","toggleModal","modalType","obj","openSuppliersAddModal","reducePhone","dispatch","getState","setSupplier","suppliers","phone","splice","setValues","addPhone","setSuppliersAddModalValue","name","banks","bank","tin","currency","item"],"mappings":"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","sourcesContent":["import {\r\n    GET_SUPPLIERS_REQUEST,\r\n    GET_SUPPLIERS_FAIL,\r\n    GET_SUPPLIERS_SUCCESS,\r\n    GET_SUPPLIER_REQUEST,\r\n    GET_SUPPLIER_FAIL,\r\n    GET_SUPPLIER_SUCCESS,\r\n    ADD_SUPPLIER_REQUEST,\r\n    ADD_SUPPLIER_FAIL,\r\n    ADD_SUPPLIER_SUCCESS,\r\n    EDIT_SUPPLIER_REQUEST,\r\n    EDIT_SUPPLIER_FAIL,\r\n    EDIT_SUPPLIER_SUCCESS,\r\n    DELETE_SUPPLIER_REQUEST,\r\n    DELETE_SUPPLIER_FAIL,\r\n    DELETE_SUPPLIER_SUCCESS,\r\n    GET_BANKS_REQUEST,\r\n    GET_BANKS_FAIL,\r\n    GET_BANKS_SUCCESS,\r\n    SET_SUPPLIER_MODAL,\r\n    TOGGLE_SUPPLIER_MODAL,\r\n    GET_Currency_REQUEST,\r\n    GET_Currency_FAIL,\r\n    GET_Currency_SUCCESS, SUPPLIERS_ADD_MODAL, SET_SUPPLIERS_VALUE\r\n} from \"./actionTypes\";\r\n\r\nlet cols = 'id,name,type,hh,address,phone';\r\n\r\nexport const supplierActions = (type, data) => {\r\n    switch (type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`suppliers/${data.id}`, {cols})\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett('suppliers/', {cols})\r\n            }\r\n        case \"add\":\r\n            data.type = 0;\r\n            console.log(data);\r\n            return {\r\n                types: [ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`suppliers/`, data, {cols})\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`suppliers/${data.id}`, data, {cols})\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.delete(`suppliers/${data.id}`, {cols})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\nexport const getBanks = () => {\r\n    return {\r\n        types: [GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett('bank/')\r\n    }\r\n}\r\n\r\nexport const getCurrency = () => {\r\n    return {\r\n        types: [GET_Currency_REQUEST, GET_Currency_FAIL, GET_Currency_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett('currency/')\r\n    }\r\n}\r\n\r\nexport const setModalValues = (key, value, index, add) => {\r\n    return {\r\n        type: SET_SUPPLIER_MODAL,\r\n        key,\r\n        value,\r\n        index,\r\n        add\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType, id) => {\r\n    let obj = {\"id\": id};\r\n    return {\r\n        type: TOGGLE_SUPPLIER_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\n\r\nexport function openSuppliersAddModal() {\r\n\r\n    return {\r\n        type: SUPPLIERS_ADD_MODAL\r\n    }\r\n}\r\n\r\nexport function reducePhone(index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        let phone = setSupplier.phone\r\n        phone.splice(index, 1);\r\n        setSupplier.phone = phone;\r\n        dispatch(setValues(setSupplier))\r\n    }\r\n}\r\n\r\nexport function addPhone(value, index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        let phone = setSupplier.phone\r\n        phone[index + 1] = value;\r\n        setSupplier.phone = phone;\r\n        dispatch(setValues(setSupplier))\r\n    }\r\n}\r\n\r\nexport function setSuppliersAddModalValue(name, value, index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        switch (name) {\r\n            case 'bank_id': {\r\n\r\n                let banks = getState().suppliers.banks;\r\n                for (let bank of banks) {\r\n                    if (bank.id === +value) {\r\n                        setSupplier.tin[name] = bank\r\n                    }\r\n                }\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n            case 'currency_id': {\r\n\r\n                let currency = getState().suppliers.currency;\r\n                for (let item of currency) {\r\n                    if (item.id === +value) {\r\n                        setSupplier.tin[name] = item\r\n                    }\r\n                }\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n            case 'tin_value': {\r\n\r\n                setSupplier.tin[name] = value\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n            case 'phone': {\r\n\r\n                let phone = setSupplier.phone;\r\n                phone[index] = value\r\n                setSupplier.phone = (phone)\r\n                console.log(setSupplier.phone)\r\n                dispatch(setValues(setSupplier));\r\n                break;\r\n            }\r\n            default: {\r\n\r\n                setSupplier[name] = value;\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function setValues(setSupplier) {\r\n\r\n    return {\r\n        type: SET_SUPPLIERS_VALUE,\r\n        setSupplier\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}