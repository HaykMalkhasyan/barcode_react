{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS, GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS, SET_ACTIVE_LANGUAGE, SET_MODAL_LANGUAGE, TOGGLE_MODAL_LANGUAGE, SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS, TOGGLE_TRANSLATION_MODAL, SET_TRANSLATION_MODAL, GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS, EDIT_TRANSLATION_REQUEST, SET_TRANSLATE, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS, DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS } from \"./actionTypes\";\nimport SessionStorage from \"../../services/SessionStorage\";\nvar col = 'key, value, lang';\nexport var getLanguages = function getLanguages() {\n  return {\n    types: [GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"languages\");\n    }\n  };\n};\nexport var getTranslations = function getTranslations() {\n  return {\n    types: [GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"translations/?page_size=100000\");\n    }\n  };\n};\nexport var checkTranslation = function checkTranslation(object) {\n  var index = false;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getState().languages.status;\n\n              case 2:\n                _context.t0 = _context.sent;\n\n                if (!(_context.t0 === true)) {\n                  _context.next = 63;\n                  break;\n                }\n\n                _context.next = 6;\n                return getState().languages.translations.length;\n\n              case 6:\n                _context.t1 = _context.sent;\n\n                if (!(_context.t1 > 0)) {\n                  _context.next = 63;\n                  break;\n                }\n\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 11;\n                _iterator = getState().languages.translations[Symbol.iterator]();\n\n              case 13:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context.next = 35;\n                  break;\n                }\n\n                item = _step.value;\n                _context.next = 17;\n                return object.key.toLowerCase();\n\n              case 17:\n                _context.t3 = _context.sent;\n                _context.next = 20;\n                return item.key;\n\n              case 20:\n                _context.t4 = _context.sent;\n                _context.t2 = _context.t3 === _context.t4;\n\n                if (!_context.t2) {\n                  _context.next = 30;\n                  break;\n                }\n\n                _context.next = 25;\n                return object.language;\n\n              case 25:\n                _context.t5 = _context.sent;\n                _context.next = 28;\n                return item.language;\n\n              case 28:\n                _context.t6 = _context.sent;\n                _context.t2 = _context.t5 === _context.t6;\n\n              case 30:\n                if (!_context.t2) {\n                  _context.next = 32;\n                  break;\n                }\n\n                index = true;\n\n              case 32:\n                _iteratorNormalCompletion = true;\n                _context.next = 13;\n                break;\n\n              case 35:\n                _context.next = 41;\n                break;\n\n              case 37:\n                _context.prev = 37;\n                _context.t7 = _context[\"catch\"](11);\n                _didIteratorError = true;\n                _iteratorError = _context.t7;\n\n              case 41:\n                _context.prev = 41;\n                _context.prev = 42;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 44:\n                _context.prev = 44;\n\n                if (!_didIteratorError) {\n                  _context.next = 47;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 47:\n                return _context.finish(44);\n\n              case 48:\n                return _context.finish(41);\n\n              case 49:\n                _context.next = 51;\n                return index;\n\n              case 51:\n                _context.t9 = _context.sent;\n                _context.t8 = _context.t9 === false;\n\n                if (!_context.t8) {\n                  _context.next = 58;\n                  break;\n                }\n\n                _context.next = 56;\n                return object.key.length;\n\n              case 56:\n                _context.t10 = _context.sent;\n                _context.t8 = _context.t10 > 0;\n\n              case 58:\n                if (!_context.t8) {\n                  _context.next = 63;\n                  break;\n                }\n\n                index = false;\n                dispatch(AddTraslationFind(object));\n                _context.next = 63;\n                return dispatch(setTranslations(object));\n\n              case 63:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[11, 37, 41, 49], [42,, 44, 48]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport function AddTraslationFind(result) {\n  return {\n    type: SET_TRANSLATE,\n    result: result\n  };\n}\nexport var setTranslations = function setTranslations(data) {\n  return {\n    types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.posttAdd(\"translations/\", data, {\n        col: col\n      });\n    }\n  };\n};\nexport var setLanguage = function setLanguage(lang) {\n  SessionStorage.set(\"lang\", lang);\n  return {\n    type: SET_ACTIVE_LANGUAGE,\n    lang: lang\n  };\n};\nexport var setModalLanguage = function setModalLanguage(lang) {\n  return {\n    type: SET_MODAL_LANGUAGE,\n    lang: lang\n  };\n};\nexport var toggleModalLanguage = function toggleModalLanguage() {\n  return {\n    type: TOGGLE_MODAL_LANGUAGE\n  };\n};\nexport var toggleTranslationModal = function toggleTranslationModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_TRANSLATION_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport var setTranslationsModal = function setTranslationsModal(key, value) {\n  return {\n    type: SET_TRANSLATION_MODAL,\n    key: key,\n    value: value\n  };\n};\nexport var translationActions = function translationActions(type, data) {\n  switch (type) {\n    case 'get':\n      return {\n        types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"translations/\".concat(data.id), {\n            col: col\n          });\n        }\n      };\n\n    case 'edit':\n      return {\n        types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    case 'delete':\n      return {\n        types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"translations/\".concat(data.id), data, {\n            col: col\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/lang/actions.js"],"names":["GET_LANGUAGES_REQUEST","GET_LANGUAGES_FAIL","GET_LANGUAGES_SUCCESS","GET_TRANSLATIONS_REQUEST","GET_TRANSLATIONS_FAIL","GET_TRANSLATIONS_SUCCESS","SET_ACTIVE_LANGUAGE","SET_MODAL_LANGUAGE","TOGGLE_MODAL_LANGUAGE","SET_TRANSLATIONS_REQUEST","SET_TRANSLATIONS_FAIL","SET_TRANSLATIONS_SUCCESS","TOGGLE_TRANSLATION_MODAL","SET_TRANSLATION_MODAL","GET_TRANSLATION_REQUEST","GET_TRANSLATION_FAIL","GET_TRANSLATION_SUCCESS","EDIT_TRANSLATION_REQUEST","SET_TRANSLATE","EDIT_TRANSLATION_FAIL","EDIT_TRANSLATION_SUCCESS","DELETE_TRANSLATION_REQUEST","DELETE_TRANSLATION_FAIL","DELETE_TRANSLATION_SUCCESS","SessionStorage","col","getLanguages","types","promise","apiClient","gett","getTranslations","checkTranslation","object","index","dispatch","getState","languages","status","translations","length","item","key","toLowerCase","language","AddTraslationFind","setTranslations","result","type","data","posttAdd","setLanguage","lang","set","setModalLanguage","toggleModalLanguage","toggleTranslationModal","modalType","id","obj","setTranslationsModal","value","translationActions","putt","deletee"],"mappings":";;AAAA,SACIA,qBADJ,EAEIC,kBAFJ,EAGIC,qBAHJ,EAIIC,wBAJJ,EAKIC,qBALJ,EAMIC,wBANJ,EAOIC,mBAPJ,EAQIC,kBARJ,EASIC,qBATJ,EAUIC,wBAVJ,EAWIC,qBAXJ,EAYIC,wBAZJ,EAaIC,wBAbJ,EAcIC,qBAdJ,EAeIC,uBAfJ,EAgBIC,oBAhBJ,EAiBIC,uBAjBJ,EAkBIC,wBAlBJ,EAmBIC,aAnBJ,EAoBIC,qBApBJ,EAqBIC,wBArBJ,EAsBIC,0BAtBJ,EAuBIC,uBAvBJ,EAwBIC,0BAxBJ,QAyBO,eAzBP;AA0BA,OAAOC,cAAP,MAA2B,+BAA3B;AAEA,IAAIC,GAAG,GAAG,kBAAV;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO;AACHC,IAAAA,KAAK,EAAE,CAAC3B,qBAAD,EAAwBC,kBAAxB,EAA4CC,qBAA5C,CADJ;AAEH0B,IAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,aAAeA,SAAS,CAACC,IAAV,aAAf;AAAA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACjC,SAAO;AACHJ,IAAAA,KAAK,EAAE,CAACxB,wBAAD,EAA2BC,qBAA3B,EAAkDC,wBAAlD,CADJ;AAEHuB,IAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,aAAeA,SAAS,CAACC,IAAV,kCAAf;AAAA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,MAAM,EAAI;AAEtC,MAAIC,KAAK,GAAG,KAAZ;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACOA,QAAQ,GAAGC,SAAX,CAAqBC,MAD5B;;AAAA;AAAA;;AAAA,sCACuC,IADvC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEWF,QAAQ,GAAGC,SAAX,CAAqBE,YAArB,CAAkCC,MAF7C;;AAAA;AAAA;;AAAA,oCAEsD,CAFtD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BAGsBJ,QAAQ,GAAGC,SAAX,CAAqBE,YAH3C;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGcE,gBAAAA,IAHd;AAAA;AAAA,uBAImBR,MAAM,CAACS,GAAP,CAAWC,WAAX,EAJnB;;AAAA;AAAA;AAAA;AAAA,uBAIsDF,IAAI,CAACC,GAJ3D;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAIwET,MAAM,CAACW,QAJ/E;;AAAA;AAAA;AAAA;AAAA,uBAIkGH,IAAI,CAACG,QAJvG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKaV,gBAAAA,KAAK,GAAG,IAAR;;AALb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAQeA,KARf;;AAAA;AAAA;AAAA,8CAQyB,KARzB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAQwCD,MAAM,CAACS,GAAP,CAAWF,MARnD;;AAAA;AAAA;AAAA,6CAQ4D,CAR5D;;AAAA;AAAA;AAAA;AAAA;AAAA;;AASSN,gBAAAA,KAAK,GAAG,KAAR;AACAC,gBAAAA,QAAQ,CAACU,iBAAiB,CAACZ,MAAD,CAAlB,CAAR;AAVT;AAAA,uBAWeE,QAAQ,CAACW,eAAe,CAACb,MAAD,CAAhB,CAXvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBH,CApBM;AAsBP,OAAO,SAASY,iBAAT,CAA2BE,MAA3B,EAAmC;AAEtC,SAAO;AACHC,IAAAA,IAAI,EAAE9B,aADH;AAEH6B,IAAAA,MAAM,EAANA;AAFG,GAAP;AAIH;AAED,OAAO,IAAMD,eAAe,GAAG,SAAlBA,eAAkB,CAACG,IAAD,EAAU;AACrC,SAAO;AACHtB,IAAAA,KAAK,EAAE,CAAClB,wBAAD,EAA2BC,qBAA3B,EAAkDC,wBAAlD,CADJ;AAEHiB,IAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,aAAeA,SAAS,CAACqB,QAAV,kBAAoCD,IAApC,EAA0C;AAACxB,QAAAA,GAAG,EAAHA;AAAD,OAA1C,CAAf;AAAA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,IAAM0B,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACjC5B,EAAAA,cAAc,CAAC6B,GAAf,CAAmB,MAAnB,EAA2BD,IAA3B;AACA,SAAO;AACHJ,IAAAA,IAAI,EAAE1C,mBADH;AAEH8C,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH,CANM;AAQP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,IAAD,EAAU;AACtC,SAAO;AACHJ,IAAAA,IAAI,EAAEzC,kBADH;AAEH6C,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACrC,SAAO;AACHP,IAAAA,IAAI,EAAExC;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,IAAMgD,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,SAAD,EAAYC,EAAZ,EAAmB;AACrD,MAAIC,GAAG,GAAG;AAAC,UAAMD;AAAP,GAAV;AACA,SAAO;AACHV,IAAAA,IAAI,EAAEpC,wBADH;AAEH6C,IAAAA,SAAS,EAATA,SAFG;AAGHE,IAAAA,GAAG,EAAHA;AAHG,GAAP;AAKH,CAPM;AASP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAClB,GAAD,EAAMmB,KAAN,EAAgB;AAEhD,SAAO;AACHb,IAAAA,IAAI,EAAEnC,qBADH;AAEH6B,IAAAA,GAAG,EAAHA,GAFG;AAGHmB,IAAAA,KAAK,EAALA;AAHG,GAAP;AAKH,CAPM;AASP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACd,IAAD,EAAOC,IAAP,EAAgB;AAE9C,UAAQD,IAAR;AACI,SAAK,KAAL;AACI,aAAO;AACHrB,QAAAA,KAAK,EAAE,CAACb,uBAAD,EAA0BC,oBAA1B,EAAgDC,uBAAhD,CADJ;AAEHY,QAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,iBAAeA,SAAS,CAACC,IAAV,wBAA+BmB,IAAI,CAACS,EAApC,GAA0C;AAACjC,YAAAA,GAAG,EAAHA;AAAD,WAA1C,CAAf;AAAA;AAFN,OAAP;;AAIJ,SAAK,MAAL;AACI,aAAO;AACHE,QAAAA,KAAK,EAAE,CAACV,wBAAD,EAA2BE,qBAA3B,EAAkDC,wBAAlD,CADJ;AAEHQ,QAAAA,OAAO,EAAE,iBAAAC,SAAS;AAAA,iBAAIA,SAAS,CAACkC,IAAV,wBAA+Bd,IAAI,CAACS,EAApC,GAA0CT,IAA1C,EAAgD;AAACxB,YAAAA,GAAG,EAAHA;AAAD,WAAhD,CAAJ;AAAA;AAFf,OAAP;;AAIJ,SAAK,QAAL;AACI,aAAO;AACHE,QAAAA,KAAK,EAAE,CAACN,0BAAD,EAA6BC,uBAA7B,EAAsDC,0BAAtD,CADJ;AAEHK,QAAAA,OAAO,EAAE,iBAAAC,SAAS;AAAA,iBAAIA,SAAS,CAACmC,OAAV,wBAAkCf,IAAI,CAACS,EAAvC,GAA6CT,IAA7C,EAAmD;AAACxB,YAAAA,GAAG,EAAHA;AAAD,WAAnD,CAAJ;AAAA;AAFf,OAAP;;AAIJ;AACI;AAjBR;AAmBH,CArBM","sourcesContent":["import {\r\n    GET_LANGUAGES_REQUEST,\r\n    GET_LANGUAGES_FAIL,\r\n    GET_LANGUAGES_SUCCESS,\r\n    GET_TRANSLATIONS_REQUEST,\r\n    GET_TRANSLATIONS_FAIL,\r\n    GET_TRANSLATIONS_SUCCESS,\r\n    SET_ACTIVE_LANGUAGE,\r\n    SET_MODAL_LANGUAGE,\r\n    TOGGLE_MODAL_LANGUAGE,\r\n    SET_TRANSLATIONS_REQUEST,\r\n    SET_TRANSLATIONS_FAIL,\r\n    SET_TRANSLATIONS_SUCCESS,\r\n    TOGGLE_TRANSLATION_MODAL,\r\n    SET_TRANSLATION_MODAL,\r\n    GET_TRANSLATION_REQUEST,\r\n    GET_TRANSLATION_FAIL,\r\n    GET_TRANSLATION_SUCCESS,\r\n    EDIT_TRANSLATION_REQUEST,\r\n    SET_TRANSLATE,\r\n    EDIT_TRANSLATION_FAIL,\r\n    EDIT_TRANSLATION_SUCCESS,\r\n    DELETE_TRANSLATION_REQUEST,\r\n    DELETE_TRANSLATION_FAIL,\r\n    DELETE_TRANSLATION_SUCCESS\r\n} from \"./actionTypes\";\r\nimport SessionStorage from \"../../services/SessionStorage\";\r\n\r\nlet col = 'key, value, lang';\r\n\r\nexport const getLanguages = () => {\r\n    return {\r\n        types: [GET_LANGUAGES_REQUEST, GET_LANGUAGES_FAIL, GET_LANGUAGES_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`languages`)\r\n    }\r\n};\r\n\r\nexport const getTranslations = () => {\r\n    return {\r\n        types: [GET_TRANSLATIONS_REQUEST, GET_TRANSLATIONS_FAIL, GET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`translations/?page_size=100000`)\r\n    }\r\n}\r\n\r\nexport const checkTranslation = object => {\r\n\r\n    let index = false;\r\n\r\n    return async (dispatch, getState) => {\r\n        if (await getState().languages.status === true) {\r\n            if (await getState().languages.translations.length > 0) {\r\n                for (let item of getState().languages.translations) {\r\n                    if (await object.key.toLowerCase() === await item.key && await object.language === await item.language) {\r\n                        index = true;\r\n                    }\r\n                }\r\n                if (await index === false && await object.key.length > 0) {\r\n                    index = false;\r\n                    dispatch(AddTraslationFind(object))\r\n                    await dispatch(setTranslations(object))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function AddTraslationFind(result) {\r\n\r\n    return {\r\n        type: SET_TRANSLATE,\r\n        result\r\n    }\r\n}\r\n\r\nexport const setTranslations = (data) => {\r\n    return {\r\n        types: [SET_TRANSLATIONS_REQUEST, SET_TRANSLATIONS_FAIL, SET_TRANSLATIONS_SUCCESS],\r\n        promise: (apiClient) => apiClient.posttAdd(`translations/`, data, {col})\r\n    }\r\n}\r\n\r\nexport const setLanguage = (lang) => {\r\n    SessionStorage.set(\"lang\", lang)\r\n    return {\r\n        type: SET_ACTIVE_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const setModalLanguage = (lang) => {\r\n    return {\r\n        type: SET_MODAL_LANGUAGE,\r\n        lang\r\n    }\r\n};\r\n\r\nexport const toggleModalLanguage = () => {\r\n    return {\r\n        type: TOGGLE_MODAL_LANGUAGE,\r\n    }\r\n};\r\n\r\nexport const toggleTranslationModal = (modalType, id) => {\r\n    let obj = {\"id\": id};\r\n    return {\r\n        type: TOGGLE_TRANSLATION_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const setTranslationsModal = (key, value) => {\r\n\r\n    return {\r\n        type: SET_TRANSLATION_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n\r\nexport const translationActions = (type, data) => {\r\n\r\n    switch (type) {\r\n        case 'get':\r\n            return {\r\n                types: [GET_TRANSLATION_REQUEST, GET_TRANSLATION_FAIL, GET_TRANSLATION_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`translations/${data.id}`, {col})\r\n            };\r\n        case 'edit':\r\n            return {\r\n                types: [EDIT_TRANSLATION_REQUEST, EDIT_TRANSLATION_FAIL, EDIT_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.putt(`translations/${data.id}`, data, {col})\r\n            }\r\n        case 'delete':\r\n            return {\r\n                types: [DELETE_TRANSLATION_REQUEST, DELETE_TRANSLATION_FAIL, DELETE_TRANSLATION_SUCCESS],\r\n                promise: apiClient => apiClient.deletee(`translations/${data.id}`, data, {col})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}