{"ast":null,"code":"import axios from 'axios';\nimport { EDIT_CURRENCY, GET_ALL_CURRENCY_FAIL, GET_ALL_CURRENCY_REQUEST, GET_ALL_CURRENCY_SUCCESS, SET_FORM_VALIDATE, SET_VALUES, TOGGLE_MODAL } from \"./actionTypes\";\nexport var getAllCurrency = function getAllCurrency() {\n  return {\n    types: [GET_ALL_CURRENCY_REQUEST, GET_ALL_CURRENCY_FAIL, GET_ALL_CURRENCY_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett('currency/');\n    }\n  };\n};\nexport var toggleModal = function toggleModal() {\n  var cleanSetCurrency = {\n    name: '',\n    short: '',\n    value: ''\n  };\n  var cleanFormValidate = {\n    name: false,\n    nameTouched: false,\n    short: false,\n    ShortTouched: false,\n    value: false,\n    ValueTouched: false\n  };\n  return {\n    type: TOGGLE_MODAL,\n    cleanSetCurrency: cleanSetCurrency,\n    cleanFormValidate: cleanFormValidate\n  };\n};\nexport var editCurrency = function editCurrency()\n/*need changed*/\n{\n  return {\n    type: EDIT_CURRENCY\n  };\n};\nexport var setCurrencyValue = function setCurrencyValue(name, value) {\n  return function (dispatch, getState) {\n    var setCurrency = getState().currency.setCurrency;\n    setCurrency[name] = value;\n    dispatch(setValue(setCurrency));\n  };\n};\nexport var setValue = function setValue(setCurrency) {\n  return {\n    type: SET_VALUES,\n    setCurrency: setCurrency\n  };\n};\nexport var checkCurrencyValue = function checkCurrencyValue(name, value) {\n  return function (dispatch, getState) {\n    var formValidate = getState().currency.formValidate;\n\n    if (value.length === 0) {\n      formValidate[name] = \"The '\".concat(name, \"' field must not be empty\");\n      formValidate[\"\".concat(name, \"Touched\")] = true;\n      dispatch(setFormValidate(formValidate));\n    }\n\n    if (value.length > 0) {\n      formValidate[name] = false;\n      formValidate[\"\".concat(name, \"Touched\")] = true;\n      dispatch(setFormValidate(formValidate));\n    }\n\n    if (name !== 'value') {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (item / 2) {\n            formValidate[name] = \"'\".concat(name, \"' field must not be digits\");\n            formValidate[\"\".concat(name, \"Touched\")] = true;\n            dispatch(setFormValidate(formValidate));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  };\n};\nexport var setFormValidate = function setFormValidate(formValidate) {\n  return {\n    type: SET_FORM_VALIDATE,\n    formValidate: formValidate\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/currency/actions.js"],"names":["axios","EDIT_CURRENCY","GET_ALL_CURRENCY_FAIL","GET_ALL_CURRENCY_REQUEST","GET_ALL_CURRENCY_SUCCESS","SET_FORM_VALIDATE","SET_VALUES","TOGGLE_MODAL","getAllCurrency","types","promise","apiClient","gett","toggleModal","cleanSetCurrency","name","short","value","cleanFormValidate","nameTouched","ShortTouched","ValueTouched","type","editCurrency","setCurrencyValue","dispatch","getState","setCurrency","currency","setValue","checkCurrencyValue","formValidate","length","setFormValidate","item"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,aADJ,EAEIC,qBAFJ,EAGIC,wBAHJ,EAIIC,wBAJJ,EAI8BC,iBAJ9B,EAIiDC,UAJjD,EAKIC,YALJ,QAMO,eANP;AAQA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAEhC,SAAO;AACHC,IAAAA,KAAK,EAAE,CAACN,wBAAD,EAA2BD,qBAA3B,EAAkDE,wBAAlD,CADJ;AAEHM,IAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,aAAeA,SAAS,CAACC,IAAV,CAAe,WAAf,CAAf;AAAA;AAFN,GAAP;AAIH,CANM;AAQP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B,MAAIC,gBAAgB,GAAG;AACnBC,IAAAA,IAAI,EAAE,EADa;AAEnBC,IAAAA,KAAK,EAAE,EAFY;AAGnBC,IAAAA,KAAK,EAAE;AAHY,GAAvB;AAMA,MAAIC,iBAAiB,GAAG;AACpBH,IAAAA,IAAI,EAAE,KADc;AAEpBI,IAAAA,WAAW,EAAE,KAFO;AAGpBH,IAAAA,KAAK,EAAE,KAHa;AAIpBI,IAAAA,YAAY,EAAE,KAJM;AAKpBH,IAAAA,KAAK,EAAE,KALa;AAMpBI,IAAAA,YAAY,EAAE;AANM,GAAxB;AASA,SAAO;AACHC,IAAAA,IAAI,EAAEf,YADH;AAEHO,IAAAA,gBAAgB,EAAhBA,gBAFG;AAGHI,IAAAA,iBAAiB,EAAjBA;AAHG,GAAP;AAKH,CArBM;AAuBP,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe;AAAC;AAAqB;AAE9C,SAAO;AACHD,IAAAA,IAAI,EAAErB;AADH,GAAP;AAGH,CALM;AAOP,OAAO,IAAMuB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,IAAD,EAAOE,KAAP,EAAiB;AAE7C,SAAO,UAACQ,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAMC,WAAW,GAAGD,QAAQ,GAAGE,QAAX,CAAoBD,WAAxC;AACAA,IAAAA,WAAW,CAACZ,IAAD,CAAX,GAAoBE,KAApB;AACAQ,IAAAA,QAAQ,CAACI,QAAQ,CAACF,WAAD,CAAT,CAAR;AACH,GAJD;AAKH,CAPM;AASP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAAF,WAAW,EAAI;AAEnC,SAAO;AACHL,IAAAA,IAAI,EAAEhB,UADH;AAEHqB,IAAAA,WAAW,EAAXA;AAFG,GAAP;AAIH,CANM;AAQP,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACf,IAAD,EAAOE,KAAP,EAAiB;AAE/C,SAAO,UAACQ,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAMK,YAAY,GAAGL,QAAQ,GAAGE,QAAX,CAAoBG,YAAzC;;AACA,QAAId,KAAK,CAACe,MAAN,KAAiB,CAArB,EAAwB;AACpBD,MAAAA,YAAY,CAAChB,IAAD,CAAZ,kBAA6BA,IAA7B;AACAgB,MAAAA,YAAY,WAAIhB,IAAJ,aAAZ,GAAiC,IAAjC;AACAU,MAAAA,QAAQ,CAACQ,eAAe,CAACF,YAAD,CAAhB,CAAR;AACH;;AACD,QAAId,KAAK,CAACe,MAAN,GAAe,CAAnB,EAAsB;AAClBD,MAAAA,YAAY,CAAChB,IAAD,CAAZ,GAAqB,KAArB;AACAgB,MAAAA,YAAY,WAAIhB,IAAJ,aAAZ,GAAiC,IAAjC;AACAU,MAAAA,QAAQ,CAACQ,eAAe,CAACF,YAAD,CAAhB,CAAR;AACH;;AACD,QAAIhB,IAAI,KAAK,OAAb,EAAsB;AAAA;AAAA;AAAA;;AAAA;AAClB,6BAAiBE,KAAjB,8HAAwB;AAAA,cAAfiB,IAAe;;AACpB,cAAIA,IAAI,GAAC,CAAT,EAAY;AACRH,YAAAA,YAAY,CAAChB,IAAD,CAAZ,cAAyBA,IAAzB;AACAgB,YAAAA,YAAY,WAAIhB,IAAJ,aAAZ,GAAiC,IAAjC;AACAU,YAAAA,QAAQ,CAACQ,eAAe,CAACF,YAAD,CAAhB,CAAR;AACH;AACJ;AAPiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQrB;AACJ,GArBD;AAsBH,CAxBM;AA0BP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAF,YAAY,EAAI;AAE3C,SAAO;AACHT,IAAAA,IAAI,EAAEjB,iBADH;AAEH0B,IAAAA,YAAY,EAAZA;AAFG,GAAP;AAIH,CANM","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    EDIT_CURRENCY,\r\n    GET_ALL_CURRENCY_FAIL,\r\n    GET_ALL_CURRENCY_REQUEST,\r\n    GET_ALL_CURRENCY_SUCCESS, SET_FORM_VALIDATE, SET_VALUES,\r\n    TOGGLE_MODAL\r\n} from \"./actionTypes\";\r\n\r\nexport const getAllCurrency = () => {\r\n\r\n    return {\r\n        types: [GET_ALL_CURRENCY_REQUEST, GET_ALL_CURRENCY_FAIL, GET_ALL_CURRENCY_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett('currency/')\r\n    }\r\n}\r\n\r\nexport const toggleModal = () => {\r\n    let cleanSetCurrency = {\r\n        name: '',\r\n        short: '',\r\n        value: '',\r\n    }\r\n\r\n    let cleanFormValidate = {\r\n        name: false,\r\n        nameTouched: false,\r\n        short: false,\r\n        ShortTouched: false,\r\n        value: false,\r\n        ValueTouched: false,\r\n    }\r\n\r\n    return {\r\n        type: TOGGLE_MODAL,\r\n        cleanSetCurrency,\r\n        cleanFormValidate\r\n    }\r\n}\r\n\r\nexport const editCurrency = (/*need changed*/) => {\r\n\r\n    return {\r\n        type: EDIT_CURRENCY\r\n    }\r\n}\r\n\r\nexport const setCurrencyValue = (name, value) => {\r\n\r\n    return (dispatch, getState) => {\r\n        const setCurrency = getState().currency.setCurrency;\r\n        setCurrency[name] = value;\r\n        dispatch(setValue(setCurrency))\r\n    }\r\n}\r\n\r\nexport const setValue = setCurrency => {\r\n\r\n    return {\r\n        type: SET_VALUES,\r\n        setCurrency\r\n    }\r\n}\r\n\r\nexport const checkCurrencyValue = (name, value) => {\r\n\r\n    return (dispatch, getState) => {\r\n        const formValidate = getState().currency.formValidate;\r\n        if (value.length === 0) {\r\n            formValidate[name] = `The '${name}' field must not be empty`;\r\n            formValidate[`${name}Touched`] = true;\r\n            dispatch(setFormValidate(formValidate))\r\n        }\r\n        if (value.length > 0) {\r\n            formValidate[name] = false;\r\n            formValidate[`${name}Touched`] = true;\r\n            dispatch(setFormValidate(formValidate));\r\n        }\r\n        if (name !== 'value') {\r\n            for (let item of value) {\r\n                if (item/2) {\r\n                    formValidate[name] = `'${name}' field must not be digits`;\r\n                    formValidate[`${name}Touched`] = true;\r\n                    dispatch(setFormValidate(formValidate))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const setFormValidate = formValidate => {\r\n\r\n    return {\r\n        type: SET_FORM_VALIDATE,\r\n        formValidate\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}