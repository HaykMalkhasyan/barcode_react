{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS, GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS, ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS, EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS, DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS, GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS, ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS, EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS, DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS, SET_GROUP_MODAL, TOGGLE_GROUP_MODAL, TOGGLE_SUB_GROUP_MODAL, OPEN_MENU, SELECT_GROUP, GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS, SELECT_GROUPS_REQUEST, SELECT_GROUPS_FAIL, SELECT_GROUPS_SUCCESS, SET_TOGGLE_SUB_MODAL_VALUE, SET_SUB_MODAL_NAME_VALUE, TOGGLE_SUB_MODAL, START_MOVING_GROUP, END_MOVING_GROUP, SET_SEARCH_VALUE, SHOW_ALTERNATIVE, SET_PRODUCT_GROUPS, SET_ALT_SEARCH_VALUE } from \"./actionTypes\";\nimport main from \"react-stepzilla/dist/main\";\nvar cols = 'id,name';\nexport var groupActions = function groupActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"group/\".concat(data.id));\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"group/?page_size=10000\", {\n            cols: cols\n          });\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"group/\", data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"group/\".concat(data.id), data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"group/\".concat(data.id), {\n            cols: cols\n          });\n        },\n        data: data\n      };\n\n    default:\n      return;\n  }\n};\nexport var getSeletGroup = function getSeletGroup(id) {\n  return {\n    types: [SELECT_GROUPS_REQUEST, SELECT_GROUPS_FAIL, SELECT_GROUPS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"group/\".concat(id));\n    }\n  };\n};\nexport var getSubGroup = function getSubGroup(id) {\n  return {\n    types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett(\"subgroup/?group_id=\".concat(id, \"&page_size=10000\"));\n    }\n  };\n};\nexport var subGroupActions = function subGroupActions(type, data) {\n  switch (type) {\n    case \"getAll\":\n      return {\n        types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"subgroup/?page_size=10000\");\n        }\n      };\n\n    case \"get\":\n      return {\n        types: [GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"subgroup/\".concat(data));\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"subgroup/\", data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"subgroup/\".concat(data.id), data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"subgroup/\".concat(data), {\n            cols: cols\n          });\n        },\n        data: data\n      };\n\n    default:\n      return;\n  }\n};\nexport var setModalValues = function setModalValues(key, value) {\n  return {\n    type: SET_GROUP_MODAL,\n    key: key,\n    value: value\n  };\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = id ? {\n    \"id\": id\n  } : {};\n  return {\n    type: TOGGLE_GROUP_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\n/*---------------------------------------------------------------------------*/\n\nexport var setActionToggleSubModal = function setActionToggleSubModal(modalType) {\n  var group_id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return function (dispatch, getState) {\n    switch (modalType) {\n      case 'add':\n        {\n          var subModal = getState().group.subModal;\n          var subGroup = getState().group.subGroup;\n          subModal[modalType] = !subModal[modalType];\n          subGroup = {\n            name: '',\n            parent_id: id ? id : '',\n            group_id: {\n              id: group_id\n            }\n          };\n          dispatch(setToggleSubModalValue(subModal, subGroup));\n          break;\n        }\n\n      case 'edit':\n        {\n          var _subModal = getState().group.subModal;\n          var _subGroup = getState().group.subGroup;\n          _subModal[modalType] = !_subModal[modalType];\n          dispatch(setToggleSubModalValue(_subModal, _subGroup));\n          break;\n        }\n\n      default:\n        {\n          dispatch(ToggleSubModal());\n          break;\n        }\n    }\n  };\n};\nexport function ToggleSubModal() {\n  return {\n    type: TOGGLE_SUB_MODAL\n  };\n}\nexport function setToggleSubModalValue(subModal) {\n  var subGroup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    type: SET_TOGGLE_SUB_MODAL_VALUE,\n    subModal: subModal,\n    subGroup: subGroup\n  };\n}\nexport function setSubModalName(type, value) {\n  return function (dispatch, getState) {\n    var subGroup = getState().group.subGroup;\n    subGroup[type] = value;\n    subGroup.active = 0;\n    dispatch(setSubModalNameValue(subGroup));\n  };\n}\nexport function setSubModalNameValue(subGroup) {\n  return {\n    type: SET_SUB_MODAL_NAME_VALUE,\n    subGroup: subGroup\n  };\n}\nexport function startMovingGroup(id) {\n  return {\n    type: START_MOVING_GROUP,\n    id: id\n  };\n}\nexport function endeMovingGroup() {\n  return {\n    type: END_MOVING_GROUP\n  };\n}\nexport function editPosition(id) {\n  return function (dispatch, getState) {\n    var subGroup = getState().group.subGroup;\n    subGroup.parent_id = id;\n    dispatch(subGroupActions('edit', subGroup));\n  };\n} // SEARCH GROUP\n\nexport function searchGroups(name, value, mainId) {\n  return function (dispatch, getState) {\n    var altViewerArray = [];\n\n    if (value.length > 0) {\n      var group = _objectSpread({}, getState().group);\n\n      var search = _objectSpread({}, getState().group[name]);\n\n      search = {\n        id: mainId,\n        value: value ? value : null\n      };\n      var subGroups = group.subGroups;\n      var searchResult = [];\n\n      if (searchResult.length > 0) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = subGroups[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.name === value) {\n              altViewerArray.push(item);\n\n              if (item.group_id && parseInt(item.group_id.id) === parseInt(mainId)) {\n                var indexId = false;\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                  for (var _iterator2 = searchResult[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var searchItem = _step2.value;\n\n                    if (parseInt(searchItem.id) === parseInt(item.id)) {\n                      indexId = true;\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError2 = true;\n                  _iteratorError2 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                      _iterator2.return();\n                    }\n                  } finally {\n                    if (_didIteratorError2) {\n                      throw _iteratorError2;\n                    }\n                  }\n                }\n\n                if (!indexId) {\n                  searchResult.push(item);\n                }\n\n                selectUp(searchResult, item, subGroups);\n                selectDown(searchResult, item, subGroups);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = subGroups[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _item = _step3.value;\n\n            if (_item.name === value) {\n              altViewerArray.push(_item);\n\n              if (_item.group_id && parseInt(_item.group_id.id) === parseInt(mainId)) {\n                var indexResId = false;\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n                var _iteratorError4 = undefined;\n\n                try {\n                  for (var _iterator4 = searchResult[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var _searchItem = _step4.value;\n\n                    if (parseInt(_searchItem.id) === parseInt(_item.id)) {\n                      indexResId = true;\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError4 = true;\n                  _iteratorError4 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                      _iterator4.return();\n                    }\n                  } finally {\n                    if (_didIteratorError4) {\n                      throw _iteratorError4;\n                    }\n                  }\n                }\n\n                if (!indexResId) {\n                  searchResult.push(_item);\n                }\n\n                var _indexId = false;\n                var _iteratorNormalCompletion5 = true;\n                var _didIteratorError5 = false;\n                var _iteratorError5 = undefined;\n\n                try {\n                  for (var _iterator5 = searchResult[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var _searchItem2 = _step5.value;\n\n                    if (parseInt(_searchItem2.id) === parseInt(_item.id)) {\n                      _indexId = true;\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError5 = true;\n                  _iteratorError5 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                      _iterator5.return();\n                    }\n                  } finally {\n                    if (_didIteratorError5) {\n                      throw _iteratorError5;\n                    }\n                  }\n                }\n\n                if (!_indexId) {\n                  searchResult.push(_item);\n                }\n\n                selectUp(searchResult, _item, subGroups);\n                selectDown(searchResult, _item, subGroups);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n\n      dispatch(setAltSearchValue(altViewerArray));\n      dispatch(setSearchValue(searchResult, search));\n    } else {\n      dispatch(setSearchValue([], null));\n      dispatch(setAltSearchValue([]));\n    }\n  };\n}\n\nfunction selectUp(searchResult, item, subGroups) {\n  var newSearchResult = searchResult;\n  var _iteratorNormalCompletion6 = true;\n  var _didIteratorError6 = false;\n  var _iteratorError6 = undefined;\n\n  try {\n    for (var _iterator6 = subGroups[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n      var i = _step6.value;\n\n      if (parseInt(item.parent_id) && parseInt(i.id) === parseInt(item.parent_id)) {\n        var indexId = false;\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = newSearchResult[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var searchItem = _step7.value;\n\n            if (parseInt(searchItem.id) === parseInt(i.id)) {\n              indexId = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!indexId) {\n          newSearchResult.push(i);\n        }\n\n        selectUp(newSearchResult, i, subGroups);\n      }\n    }\n  } catch (err) {\n    _didIteratorError6 = true;\n    _iteratorError6 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n        _iterator6.return();\n      }\n    } finally {\n      if (_didIteratorError6) {\n        throw _iteratorError6;\n      }\n    }\n  }\n}\n\nfunction selectDown(searchResult, item, subGroups) {\n  var newSearchResult = searchResult;\n  var _iteratorNormalCompletion8 = true;\n  var _didIteratorError8 = false;\n  var _iteratorError8 = undefined;\n\n  try {\n    for (var _iterator8 = subGroups[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n      var i = _step8.value;\n\n      if (parseInt(i.parent_id) && parseInt(item.id) === parseInt(i.parent_id)) {\n        var indexId = false;\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n          for (var _iterator9 = newSearchResult[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n            var searchItem = _step9.value;\n\n            if (parseInt(searchItem.id) === parseInt(i.id)) {\n              indexId = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n              _iterator9.return();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n\n        if (!indexId) {\n          newSearchResult.push(i);\n        }\n\n        selectDown(newSearchResult, i, subGroups);\n      }\n    }\n  } catch (err) {\n    _didIteratorError8 = true;\n    _iteratorError8 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n        _iterator8.return();\n      }\n    } finally {\n      if (_didIteratorError8) {\n        throw _iteratorError8;\n      }\n    }\n  }\n}\n\nexport function setSearchValue(searchResult, search) {\n  return {\n    type: SET_SEARCH_VALUE,\n    searchResult: searchResult,\n    search: search\n  };\n}\nexport function setAltSearchValue(searchAltResult) {\n  return {\n    type: SET_ALT_SEARCH_VALUE,\n    searchAltResult: searchAltResult\n  };\n}\nexport function alternativeShow() {\n  return {\n    type: SHOW_ALTERNATIVE\n  };\n}\n/*------------------------ For products ------------------------*/\n\nexport function getSubGroups(data) {\n  return function (dispatch, getState) {\n    console.log(data.id);\n    var subGroups = getState().group.subGroups;\n    var productGroups = [];\n    var _iteratorNormalCompletion10 = true;\n    var _didIteratorError10 = false;\n    var _iteratorError10 = undefined;\n\n    try {\n      for (var _iterator10 = subGroups[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n        var subGroup = _step10.value;\n\n        if (subGroup.group_id && subGroup.group_id.id === data.id) {\n          productGroups.push(subGroup);\n        }\n      }\n    } catch (err) {\n      _didIteratorError10 = true;\n      _iteratorError10 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n          _iterator10.return();\n        }\n      } finally {\n        if (_didIteratorError10) {\n          throw _iteratorError10;\n        }\n      }\n    }\n\n    dispatch(setProductGroups(productGroups));\n  };\n}\nexport function setProductGroups(productGroups) {\n  return {\n    type: SET_PRODUCT_GROUPS,\n    productGroups: productGroups\n  };\n}\n/*---------------------------------------------------------------------------*/\n\nexport var toggleSubModal = function toggleSubModal(modalType, id, group_id) {\n  var obj = modalType === \"add\" ? {\n    parent_id: id\n  } : {\n    id: id\n  };\n\n  if (group_id) {\n    obj = _objectSpread({}, obj, {\n      group_id: group_id\n    });\n  }\n\n  return {\n    type: TOGGLE_SUB_GROUP_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport var handleOpen = function handleOpen(id, group_id) {\n  return {\n    type: OPEN_MENU,\n    id: id,\n    group_id: group_id\n  };\n};\nexport var selectGroup = function selectGroup(group_id, value) {\n  return {\n    type: SELECT_GROUP,\n    group_id: group_id,\n    value: value\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/group/actions.js"],"names":["GET_GROUPS_REQUEST","GET_GROUPS_FAIL","GET_GROUPS_SUCCESS","GET_GROUP_REQUEST","GET_GROUP_FAIL","GET_GROUP_SUCCESS","ADD_GROUP_REQUEST","ADD_GROUP_FAIL","ADD_GROUP_SUCCESS","EDIT_GROUP_REQUEST","EDIT_GROUP_FAIL","EDIT_GROUP_SUCCESS","DELETE_GROUP_REQUEST","DELETE_GROUP_FAIL","DELETE_GROUP_SUCCESS","GET_SUB_GROUP_REQUEST","GET_SUB_GROUP_FAIL","GET_SUB_GROUP_SUCCESS","ADD_SUB_GROUP_REQUEST","ADD_SUB_GROUP_FAIL","ADD_SUB_GROUP_SUCCESS","EDIT_SUB_GROUP_REQUEST","EDIT_SUB_GROUP_FAIL","EDIT_SUB_GROUP_SUCCESS","DELETE_SUB_GROUP_REQUEST","DELETE_SUB_GROUP_FAIL","DELETE_SUB_GROUP_SUCCESS","SET_GROUP_MODAL","TOGGLE_GROUP_MODAL","TOGGLE_SUB_GROUP_MODAL","OPEN_MENU","SELECT_GROUP","GET_SUB_GROUPS_REQUEST","GET_SUB_GROUPS_FAIL","GET_SUB_GROUPS_SUCCESS","SELECT_GROUPS_REQUEST","SELECT_GROUPS_FAIL","SELECT_GROUPS_SUCCESS","SET_TOGGLE_SUB_MODAL_VALUE","SET_SUB_MODAL_NAME_VALUE","TOGGLE_SUB_MODAL","START_MOVING_GROUP","END_MOVING_GROUP","SET_SEARCH_VALUE","SHOW_ALTERNATIVE","SET_PRODUCT_GROUPS","SET_ALT_SEARCH_VALUE","main","cols","groupActions","type","data","types","promise","apiClient","gett","id","posttAdd","putt","deletee","getSeletGroup","getSubGroup","subGroupActions","setModalValues","key","value","toggleModal","modalType","obj","setActionToggleSubModal","group_id","dispatch","getState","subModal","group","subGroup","name","parent_id","setToggleSubModalValue","ToggleSubModal","setSubModalName","active","setSubModalNameValue","startMovingGroup","endeMovingGroup","editPosition","searchGroups","mainId","altViewerArray","length","search","subGroups","searchResult","item","push","parseInt","indexId","searchItem","selectUp","selectDown","indexResId","setAltSearchValue","setSearchValue","newSearchResult","i","searchAltResult","alternativeShow","getSubGroups","console","log","productGroups","setProductGroups","toggleSubModal","handleOpen","selectGroup"],"mappings":"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","sourcesContent":["import {\r\n    GET_GROUPS_REQUEST,\r\n    GET_GROUPS_FAIL,\r\n    GET_GROUPS_SUCCESS,\r\n    GET_GROUP_REQUEST,\r\n    GET_GROUP_FAIL,\r\n    GET_GROUP_SUCCESS,\r\n    ADD_GROUP_REQUEST,\r\n    ADD_GROUP_FAIL,\r\n    ADD_GROUP_SUCCESS,\r\n    EDIT_GROUP_REQUEST,\r\n    EDIT_GROUP_FAIL,\r\n    EDIT_GROUP_SUCCESS,\r\n    DELETE_GROUP_REQUEST,\r\n    DELETE_GROUP_FAIL,\r\n    DELETE_GROUP_SUCCESS,\r\n    GET_SUB_GROUP_REQUEST,\r\n    GET_SUB_GROUP_FAIL,\r\n    GET_SUB_GROUP_SUCCESS,\r\n    ADD_SUB_GROUP_REQUEST,\r\n    ADD_SUB_GROUP_FAIL,\r\n    ADD_SUB_GROUP_SUCCESS,\r\n    EDIT_SUB_GROUP_REQUEST,\r\n    EDIT_SUB_GROUP_FAIL,\r\n    EDIT_SUB_GROUP_SUCCESS,\r\n    DELETE_SUB_GROUP_REQUEST,\r\n    DELETE_SUB_GROUP_FAIL,\r\n    DELETE_SUB_GROUP_SUCCESS,\r\n    SET_GROUP_MODAL,\r\n    TOGGLE_GROUP_MODAL,\r\n    TOGGLE_SUB_GROUP_MODAL,\r\n    OPEN_MENU,\r\n    SELECT_GROUP,\r\n    GET_SUB_GROUPS_REQUEST,\r\n    GET_SUB_GROUPS_FAIL,\r\n    GET_SUB_GROUPS_SUCCESS,\r\n    SELECT_GROUPS_REQUEST,\r\n    SELECT_GROUPS_FAIL,\r\n    SELECT_GROUPS_SUCCESS,\r\n    SET_TOGGLE_SUB_MODAL_VALUE,\r\n    SET_SUB_MODAL_NAME_VALUE,\r\n    TOGGLE_SUB_MODAL,\r\n    START_MOVING_GROUP,\r\n    END_MOVING_GROUP,\r\n    SET_SEARCH_VALUE,\r\n    SHOW_ALTERNATIVE,\r\n    SET_PRODUCT_GROUPS, SET_ALT_SEARCH_VALUE\r\n} from \"./actionTypes\";\r\nimport main from \"react-stepzilla/dist/main\";\r\n\r\n\r\nlet cols = 'id,name';\r\n\r\nexport const groupActions = (type, data) => {\r\n    switch (type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`group/${data.id}`)\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`group/?page_size=10000`, {cols})\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`group/`, data, {cols})\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`group/${data.id}`, data, {cols})\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletee(`group/${data.id}`, {cols}),\r\n                data\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\nexport const getSeletGroup = id => {\r\n\r\n    return {\r\n        types: [SELECT_GROUPS_REQUEST, SELECT_GROUPS_FAIL, SELECT_GROUPS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`group/${id}`)\r\n    }\r\n}\r\n\r\nexport const getSubGroup = id => {\r\n\r\n    return {\r\n        types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett(`subgroup/?group_id=${id}&page_size=10000`)\r\n    }\r\n}\r\n\r\nexport const subGroupActions = (type, data) => {\r\n    switch (type) {\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_SUB_GROUPS_REQUEST, GET_SUB_GROUPS_FAIL, GET_SUB_GROUPS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`subgroup/?page_size=10000`)\r\n            }\r\n        case \"get\":\r\n            return {\r\n                types: [GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`subgroup/${data}`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`subgroup/`, data, {cols})\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`subgroup/${data.id}`, data, {cols})\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletee(`subgroup/${data}`, {cols}),\r\n                data\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\n\r\nexport const setModalValues = (key, value) => {\r\n    return {\r\n        type: SET_GROUP_MODAL,\r\n        key,\r\n        value,\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType, id) => {\r\n    let obj = (id) ? {\"id\": id} : {};\r\n    return {\r\n        type: TOGGLE_GROUP_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n/*---------------------------------------------------------------------------*/\r\nexport const setActionToggleSubModal = (modalType, group_id = null, id = null) => {\r\n\r\n    return (dispatch, getState) => {\r\n\r\n        switch (modalType) {\r\n\r\n            case 'add': {\r\n                let subModal = getState().group.subModal;\r\n                let subGroup = getState().group.subGroup;\r\n                subModal[modalType] = !subModal[modalType];\r\n                subGroup = {\r\n                    name: '',\r\n                    parent_id: id ? id : '',\r\n                    group_id: {\r\n                        id: group_id\r\n                    }\r\n                }\r\n                dispatch(setToggleSubModalValue(subModal, subGroup))\r\n                break;\r\n            }\r\n            case 'edit': {\r\n                let subModal = getState().group.subModal;\r\n                let subGroup = getState().group.subGroup;\r\n                subModal[modalType] = !subModal[modalType];\r\n                dispatch(setToggleSubModalValue(subModal, subGroup))\r\n                break;\r\n            }\r\n            default: {\r\n                dispatch(ToggleSubModal())\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function ToggleSubModal() {\r\n\r\n\r\n    return {\r\n        type: TOGGLE_SUB_MODAL\r\n    }\r\n}\r\n\r\nexport function setToggleSubModalValue(subModal, subGroup = false) {\r\n\r\n    return {\r\n        type: SET_TOGGLE_SUB_MODAL_VALUE,\r\n        subModal,\r\n        subGroup\r\n    }\r\n}\r\n\r\nexport function setSubModalName(type, value) {\r\n\r\n    return (dispatch, getState) => {\r\n        let subGroup = getState().group.subGroup;\r\n        subGroup[type] = value;\r\n        subGroup.active = 0;\r\n        dispatch(setSubModalNameValue(subGroup))\r\n    }\r\n}\r\n\r\nexport function setSubModalNameValue(subGroup) {\r\n\r\n    return {\r\n        type: SET_SUB_MODAL_NAME_VALUE,\r\n        subGroup\r\n    }\r\n}\r\n\r\nexport function startMovingGroup(id) {\r\n\r\n    return {\r\n        type: START_MOVING_GROUP,\r\n        id\r\n    }\r\n}\r\n\r\nexport function endeMovingGroup() {\r\n\r\n    return {\r\n        type: END_MOVING_GROUP\r\n    }\r\n}\r\n\r\nexport function editPosition(id) {\r\n\r\n    return (dispatch, getState) => {\r\n        let subGroup = getState().group.subGroup;\r\n        subGroup.parent_id = id;\r\n        dispatch(subGroupActions('edit', subGroup))\r\n    }\r\n}\r\n\r\n// SEARCH GROUP\r\nexport function searchGroups(name, value, mainId) {\r\n\r\n    return (dispatch, getState) => {\r\n        let altViewerArray = [];\r\n        if (value.length > 0) {\r\n            let group = {...getState().group};\r\n            let search = {...getState().group[name]};\r\n            search = {\r\n                id: mainId,\r\n                value: value ? value : null\r\n            }\r\n            let subGroups = group.subGroups\r\n            let searchResult = [];\r\n\r\n            if (searchResult.length > 0) {\r\n                for (let item of subGroups) {\r\n                    if (item.name === value) {\r\n                        altViewerArray.push(item)\r\n                        if (item.group_id && parseInt(item.group_id.id) === parseInt(mainId)) {\r\n                            let indexId = false;\r\n                            for (let searchItem of searchResult) {\r\n                                if (parseInt(searchItem.id) === parseInt(item.id)) {\r\n                                    indexId = true\r\n                                }\r\n                            }\r\n                            if (!indexId) {\r\n                                searchResult.push(item)\r\n                            }\r\n                            selectUp(searchResult, item, subGroups)\r\n                            selectDown(searchResult, item, subGroups)\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for (let item of subGroups) {\r\n                    if (item.name === value) {\r\n                        altViewerArray.push(item)\r\n                        if (item.group_id && parseInt(item.group_id.id) === parseInt(mainId)) {\r\n                            let indexResId = false;\r\n                            for (let searchItem of searchResult) {\r\n                                if (parseInt(searchItem.id) === parseInt(item.id)) {\r\n                                    indexResId = true\r\n                                }\r\n                            }\r\n                            if (!indexResId) {\r\n                                searchResult.push(item)\r\n                            }\r\n                            let indexId = false;\r\n                            for (let searchItem of searchResult) {\r\n                                if (parseInt(searchItem.id) === parseInt(item.id)) {\r\n                                    indexId = true\r\n                                }\r\n                            }\r\n                            if (!indexId) {\r\n                                searchResult.push(item)\r\n                            }\r\n                            selectUp(searchResult, item, subGroups)\r\n                            selectDown(searchResult, item, subGroups)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            dispatch(setAltSearchValue(altViewerArray))\r\n            dispatch(setSearchValue(searchResult, search))\r\n        } else {\r\n            dispatch(setSearchValue([], null))\r\n            dispatch(setAltSearchValue([]))\r\n        }\r\n    }\r\n}\r\n\r\nfunction selectUp(searchResult, item, subGroups) {\r\n    let newSearchResult = searchResult;\r\n    for (let i of subGroups) {\r\n        if (parseInt(item.parent_id) && (parseInt(i.id) === parseInt(item.parent_id))) {\r\n            let indexId = false;\r\n            for (let searchItem of newSearchResult) {\r\n                if (parseInt(searchItem.id) === parseInt(i.id)) {\r\n                    indexId = true\r\n                }\r\n            }\r\n            if (!indexId) {\r\n                newSearchResult.push(i)\r\n            }\r\n            selectUp(newSearchResult, i, subGroups)\r\n        }\r\n    }\r\n}\r\n\r\nfunction selectDown(searchResult, item, subGroups) {\r\n    let newSearchResult = searchResult;\r\n    for (let i of subGroups) {\r\n        if (parseInt(i.parent_id) && (parseInt(item.id) === parseInt(i.parent_id))) {\r\n            let indexId = false;\r\n            for (let searchItem of newSearchResult) {\r\n                if (parseInt(searchItem.id) === parseInt(i.id)) {\r\n                    indexId = true\r\n                }\r\n            }\r\n            if (!indexId) {\r\n                newSearchResult.push(i)\r\n            }\r\n            selectDown(newSearchResult, i, subGroups)\r\n        }\r\n    }\r\n}\r\n\r\nexport function setSearchValue(searchResult, search) {\r\n\r\n    return {\r\n        type: SET_SEARCH_VALUE,\r\n        searchResult,\r\n        search\r\n    }\r\n}\r\n\r\nexport function setAltSearchValue(searchAltResult) {\r\n\r\n    return {\r\n        type: SET_ALT_SEARCH_VALUE,\r\n        searchAltResult\r\n    }\r\n}\r\n\r\nexport function alternativeShow() {\r\n\r\n    return {\r\n        type: SHOW_ALTERNATIVE\r\n    }\r\n}\r\n\r\n/*------------------------ For products ------------------------*/\r\n\r\nexport function getSubGroups(data) {\r\n\r\n    return (dispatch, getState) => {\r\n        console.log(data.id);\r\n        let subGroups = getState().group.subGroups;\r\n        let productGroups = [];\r\n        for (let subGroup of subGroups) {\r\n            if (subGroup.group_id && (subGroup.group_id.id === data.id)) {\r\n                productGroups.push(subGroup)\r\n            }\r\n        }\r\n        dispatch(setProductGroups(productGroups))\r\n    }\r\n}\r\n\r\nexport function setProductGroups(productGroups) {\r\n\r\n    return {\r\n        type: SET_PRODUCT_GROUPS,\r\n        productGroups\r\n    }\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\nexport const toggleSubModal = (modalType, id, group_id) => {\r\n    let obj = (modalType === \"add\") ? {parent_id: id} : {id}\r\n    if (group_id) {\r\n        obj = {\r\n            ...obj,\r\n            group_id\r\n        };\r\n    }\r\n    return {\r\n        type: TOGGLE_SUB_GROUP_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\nexport const handleOpen = (id, group_id) => {\r\n    return {\r\n        type: OPEN_MENU,\r\n        id,\r\n        group_id,\r\n    }\r\n}\r\n\r\nexport const selectGroup = (group_id, value) => {\r\n    return {\r\n        type: SELECT_GROUP,\r\n        group_id,\r\n        value,\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}