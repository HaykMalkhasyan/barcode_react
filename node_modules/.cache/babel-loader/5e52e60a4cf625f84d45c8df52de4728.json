{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\pages\\\\products\\\\modal\\\\tab\\\\code\\\\content.js\";\nimport React from 'react';\nimport { Badge, Button, Input, InputGroup, ListGroup, ListGroupItem, Table } from 'reactstrap';\nimport Translate from \"../../../../../../Translate\";\nimport { Plus, Settings, Trash2 } from \"react-feather\";\nimport DropdownComponent from \"../../../../../../components/dropdown/dropdown\";\nimport ErrorIcon from '@material-ui/icons/Error';\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  function Example() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Example)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentInputValue: {\n        barcode: \"\",\n        type: null\n      },\n      error: false,\n      errorMsg: false\n    };\n\n    _this.addBarcodeType = function (name, id) {\n      var newCurrentInput = _objectSpread({}, _this.state.currentInputValue);\n\n      newCurrentInput.type = id;\n\n      _this.setState({\n        currentInputValue: newCurrentInput\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"addBarcode\",\n    value: function addBarcode() {\n      console.log(this.props.barcodeTypes);\n      console.log(this.state.currentInputValue.barcode);\n      var index = false;\n\n      if (this.state.currentInputValue.barcode !== \"\" && this.state.currentInputValue.type !== null) {\n        if (this.props.barcodeTypes) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = this.props.barcodeTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var item = _step.value;\n\n              if (item.barcode === this.state.currentInputValue.barcode) {\n                index = true;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          if (!index) {\n            this.props.barcodeActions(\"add\", this.state.currentInputValue);\n\n            var newCurrentInput = _objectSpread({}, this.state.currentInputValue);\n\n            newCurrentInput.barcode = \"\";\n            newCurrentInput.type = null;\n            this.setState({\n              currentInputValue: newCurrentInput,\n              error: false\n            });\n          } else {\n            this.setState({\n              errorMsg: 'such barcode already exists'\n            });\n          }\n        }\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    }\n  }, {\n    key: \"deleteBarcode\",\n    value: function deleteBarcode(code) {\n      this.props.barcodeActions(\"delete\", code);\n    }\n  }, {\n    key: \"changeBarcode\",\n    value: function changeBarcode(value) {\n      var newCurrentInput = _objectSpread({}, this.state.currentInputValue);\n\n      newCurrentInput.barcode = value;\n      this.setState({\n        currentInputValue: newCurrentInput\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      return React.createElement(Table, {\n        borderless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"barcode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Settings, {\n        size: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, this.props.types ? this.props.product.barcode ? this.props.product.barcode.map(function (value, index) {\n        return React.createElement(\"tr\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          colSpan: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(ListGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, value ? React.createElement(ListGroupItem, {\n          action: true,\n          className: \"border-0 justify-content-between p-0 pl-2 pr-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, value.barcode, React.createElement(Badge, {\n          pill: true,\n          className: \"ml-1 font-small-1 p-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, _this2.props.types.map(function (type) {\n          return type.id === value.type ? type.name : null;\n        })), React.createElement(Button, {\n          size: \"sm\",\n          color: \"danger\",\n          className: \"mb-0 pull-right\",\n          onClick: function onClick() {\n            props.removeBarcode(value, index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(Trash2, {\n          size: 16,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }))) : null)));\n      }) : null : null, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        colSpan: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.state.currentInputValue.type !== null ? React.createElement(\"span\", {\n        className: \"bg-primary\",\n        style: {\n          padding: '3px 5px',\n          borderRadius: '5px 0 0 5px',\n          color: '#444',\n          fontWeight: 600,\n          fontSize: '13px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.props.types.map(function (type) {\n        return type.id === _this2.state.currentInputValue.type ? type.name : null;\n      })) : null, React.createElement(Input, {\n        type: \"text\",\n        className: \"form-control  \".concat(this.state.error ? 'is-invalid' : ''),\n        id: \"barcode\",\n        value: this.state.currentInputValue.barcode ? this.state.currentInputValue.barcode || '' : '',\n        onChange: function onChange(event) {\n          return _this2.changeBarcode(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(DropdownComponent // setBarcodeType={this.props.setBarcodeType}\n      , {\n        types: this.props.types // onChange={this.props.setModalValues}\n        ,\n        onClick: this.addBarcodeType,\n        name: \"type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })), this.state.errorMsg ? React.createElement(\"span\", {\n        className: \"danger font-small-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(ErrorIcon, {\n        className: \"mr-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(Translate, {\n        name: this.state.errorMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })) : null), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"sm\",\n        color: \"primary\",\n        onClick: function onClick() {\n          _this2.addBarcode();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Plus, {\n        size: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport { Example as default };","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/pages/products/modal/tab/code/content.js"],"names":["React","Badge","Button","Input","InputGroup","ListGroup","ListGroupItem","Table","Translate","Plus","Settings","Trash2","DropdownComponent","ErrorIcon","Example","state","currentInputValue","barcode","type","error","errorMsg","addBarcodeType","name","id","newCurrentInput","setState","console","log","props","barcodeTypes","index","item","barcodeActions","code","value","types","product","map","removeBarcode","padding","borderRadius","color","fontWeight","fontSize","event","changeBarcode","target","addBarcode","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Badge, Button, Input, InputGroup, ListGroup, ListGroupItem, Table} from 'reactstrap';\r\nimport Translate from \"../../../../../../Translate\";\r\nimport {Plus, Settings, Trash2} from \"react-feather\";\r\nimport DropdownComponent from \"../../../../../../components/dropdown/dropdown\";\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\n\r\nexport default class Example extends React.Component {\r\n\r\n    state = {\r\n        currentInputValue: {\r\n            barcode: \"\",\r\n            type: null\r\n        },\r\n        error: false,\r\n        errorMsg: false\r\n    }\r\n\r\n    addBarcode() {\r\n        console.log(this.props.barcodeTypes)\r\n        console.log(this.state.currentInputValue.barcode)\r\n        let index = false\r\n        if (this.state.currentInputValue.barcode !== \"\" && this.state.currentInputValue.type !== null) {\r\n            if (this.props.barcodeTypes) {\r\n                for (let item of this.props.barcodeTypes) {\r\n                    if (item.barcode === this.state.currentInputValue.barcode) {\r\n                        index = true\r\n                    }\r\n                }\r\n                if (!index) {\r\n                    this.props.barcodeActions(\"add\", this.state.currentInputValue);\r\n                    let newCurrentInput = {...this.state.currentInputValue};\r\n                    newCurrentInput.barcode = \"\";\r\n                    newCurrentInput.type = null;\r\n                    this.setState({currentInputValue: newCurrentInput, error: false})\r\n                } else {\r\n                    this.setState({\r\n                        errorMsg: 'such barcode already exists'\r\n                    })\r\n                }\r\n            }\r\n\r\n        } else {\r\n            this.setState({error: true})\r\n        }\r\n    }\r\n\r\n    addBarcodeType = (name, id) => {\r\n        let newCurrentInput = {...this.state.currentInputValue};\r\n        newCurrentInput.type = id;\r\n        this.setState({\r\n            currentInputValue: newCurrentInput\r\n        })\r\n    }\r\n\r\n    deleteBarcode(code) {\r\n        this.props.barcodeActions(\"delete\", code);\r\n    }\r\n\r\n    changeBarcode(value) {\r\n        let newCurrentInput = {...this.state.currentInputValue};\r\n        newCurrentInput.barcode = value;\r\n        this.setState({currentInputValue: newCurrentInput})\r\n    }\r\n\r\n    render() {\r\n\r\n        let props = this.props;\r\n        return (\r\n            <Table borderless>\r\n                <thead>\r\n                <tr>\r\n                    <th><Translate name={\"barcode\"}/></th>\r\n                    <th><Settings size={20}></Settings></th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n\r\n                    this.props.types ?\r\n                        this.props.product.barcode ?\r\n                            this.props.product.barcode.map(\r\n                                (value, index) => {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td\r\n                                                colSpan={2}\r\n                                            >\r\n                                                <ListGroup>\r\n                                                    {\r\n                                                        value ?\r\n                                                            <ListGroupItem\r\n                                                                action\r\n                                                                className=\"border-0 justify-content-between p-0 pl-2 pr-2\">\r\n                                                                {value.barcode}\r\n                                                                <Badge pill className=\"ml-1 font-small-1 p-1\">\r\n                                                                    {\r\n                                                                        this.props.types.map(\r\n                                                                            type => type.id === value.type ?\r\n                                                                                type.name\r\n                                                                                :\r\n                                                                                null\r\n                                                                        )\r\n                                                                    }\r\n                                                                </Badge>\r\n                                                                <Button\r\n                                                                    size=\"sm\"\r\n                                                                    color=\"danger\"\r\n                                                                    className=\"mb-0 pull-right\"\r\n                                                                    onClick={\r\n                                                                        () => {\r\n                                                                            props.removeBarcode(value, index)\r\n                                                                        }\r\n                                                                    }\r\n                                                                >\r\n                                                                    <Trash2 size={16}/>\r\n                                                                </Button>\r\n                                                            </ListGroupItem>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                </ListGroup>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                            )\r\n                            :\r\n                            null\r\n                        :\r\n                        null\r\n                }\r\n                <tr>\r\n                    <td colSpan={1}>\r\n                        <InputGroup size=\"sm\">\r\n                            {\r\n                                this.state.currentInputValue.type !== null ?\r\n                                    <span\r\n                                        className=\"bg-primary\"\r\n                                        style={{\r\n                                            padding: '3px 5px',\r\n                                            borderRadius: '5px 0 0 5px',\r\n                                            color: '#444',\r\n                                            fontWeight: 600,\r\n                                            fontSize: '13px'\r\n                                        }}\r\n                                    >\r\n                                        {\r\n                                            this.props.types.map(\r\n                                                type => type.id === this.state.currentInputValue.type ?\r\n                                                    type.name\r\n                                                    :\r\n                                                    null\r\n                                            )\r\n                                        }\r\n                                    </span>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            <Input\r\n                                type=\"text\"\r\n                                className={`form-control  ${this.state.error ? 'is-invalid' : ''}`}\r\n                                id=\"barcode\"\r\n                                value={this.state.currentInputValue.barcode ? this.state.currentInputValue.barcode || '' : ''}\r\n                                onChange={event => this.changeBarcode(event.target.value)}\r\n                            />\r\n                            <DropdownComponent\r\n                                // setBarcodeType={this.props.setBarcodeType}\r\n                                types={this.props.types}\r\n                                // onChange={this.props.setModalValues}\r\n                                onClick={this.addBarcodeType}\r\n                                name='type'\r\n                            />\r\n                        </InputGroup>\r\n                        {\r\n                            this.state.errorMsg ?\r\n                                <span className=\"danger font-small-1\">\r\n                                    <ErrorIcon className=\"mr-1\"/>\r\n                                    <Translate name={this.state.errorMsg}/>\r\n                                </span>\r\n                                :\r\n                                null\r\n                        }\r\n                    </td>\r\n                    <td>\r\n                        <Button size=\"sm\" color=\"primary\" onClick={() => {\r\n                            this.addBarcode()\r\n                        }}>\r\n                            <Plus size={16}/>\r\n                        </Button>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n\r\n            </Table>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}