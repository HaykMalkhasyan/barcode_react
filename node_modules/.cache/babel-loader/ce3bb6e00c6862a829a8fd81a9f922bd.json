{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { ADD_FILE, CHECK_FILE, SET_FORM_DATA_VALUE } from \"./actionTypes\";\nexport function addFile(name, value) {\n  return {\n    type: ADD_FILE,\n    name: name,\n    value: value\n  };\n}\nexport function clearAll() {\n  var cleanFormData = {\n    departOne: [{\n      id: 1,\n      name: 'sku',\n      touched: false,\n      valid: false,\n      error: false\n    }, {\n      id: 2,\n      name: 'name',\n      touched: false,\n      valid: false,\n      error: false\n    }, {\n      id: 3,\n      name: 'points',\n      touched: false,\n      valid: false,\n      error: false\n    }, {\n      id: 4,\n      name: 'measurement'\n    }],\n    departTwo: [{\n      id: 5,\n      name: 'classifiers',\n      touched: false,\n      valid: false,\n      error: false\n    }, {\n      id: 6,\n      name: 'suppliers',\n      touched: false,\n      valid: false,\n      error: false\n    }, {\n      id: 7,\n      name: 'barcode',\n      touched: false,\n      valid: false,\n      error: false\n    }, {\n      id: 8,\n      name: 'description',\n      touched: false,\n      valid: false,\n      error: false\n    }]\n  };\n  var cleanFormDataValue = {\n    sku: '',\n    name: '',\n    points: '',\n    measurement: '',\n    classifiers: '',\n    suppliers: '',\n    barcode: '',\n    description: ''\n  };\n  return function (dispatch) {\n    dispatch(setFormDataValue(cleanFormDataValue, cleanFormData));\n  };\n}\nexport function checkTouched(name, area, id) {\n  return function (dispatch, getState) {\n    var formData = _objectSpread({}, getState().importReducer.formData);\n\n    var formDataValue = _objectSpread({}, getState().importReducer.formDataValue);\n\n    formData[area].forEach(function (item) {\n      if (item.id === id) {\n        item.touched = true;\n\n        if (formDataValue[name].length === 0) {\n          item.valid = false;\n          item.error = 'value is empty';\n        } else {\n          item.valid = true;\n          item.error = false;\n        }\n      }\n    });\n    dispatch(setFormDataValue(formDataValue, formData));\n  };\n}\nexport function changeFormDataValue(name, value, area, id) {\n  return function (dispatch, getState) {\n    var formDataValue = _objectSpread({}, getState().importReducer.formDataValue);\n\n    var formData = _objectSpread({}, getState().importReducer.formData);\n\n    formData[area].forEach(function (item) {\n      if (item.id === id) {\n        if (value.length > 0) {\n          if (value / 1) {\n            item.valid = true;\n            item.error = false;\n          } else {\n            item.valid = false;\n            item.error = 'value is invalid';\n          }\n        } else {\n          item.valid = false;\n          item.error = 'value is empty';\n        }\n      }\n    });\n    formDataValue[name] = value;\n    dispatch(setFormDataValue(formDataValue, formData));\n  };\n}\nexport function setFormDataValue(formDataValue, formData) {\n  return {\n    type: SET_FORM_DATA_VALUE,\n    formDataValue: formDataValue,\n    formData: formData\n  };\n}\nexport function checkFormValidate() {\n  return function (dispatch, getState) {\n    var formData = _objectSpread({}, getState().importReducer.formData);\n\n    var formDataValue = _objectSpread({}, getState().importReducer.formDataValue);\n\n    var file = getState().importReducer.file;\n    var statusUpload = 0;\n    formData.departOne.forEach(function (item) {\n      if (item.touched) {\n        if (!item.valid) {\n          if (formDataValue[item.name].length > 0) {\n            item.error = 'value is invalid';\n            dispatch(setFormDataValue(formDataValue, formData));\n          } else {\n            item.error = 'value is empty';\n            dispatch(setFormDataValue(formDataValue, formData));\n          }\n        } else {\n          statusUpload++;\n        }\n      } else {\n        item.error = 'value is empty';\n        dispatch(setFormDataValue(formDataValue, formData));\n      }\n    });\n    formData.departTwo.forEach(function (item) {\n      if (item.touched) {\n        if (!item.valid) {\n          if (formDataValue[item.name].length > 0) {\n            item.error = 'value is invalid';\n            dispatch(setFormDataValue(formDataValue, formData));\n          } else {\n            item.error = 'value is empty';\n            dispatch(setFormDataValue(formDataValue, formData));\n          }\n        } else {\n          statusUpload++;\n        }\n      } else {\n        item.error = 'value is empty';\n        dispatch(setFormDataValue(formDataValue, formData));\n      }\n    });\n\n    if (file === null) {\n      dispatch(checkFile('You did not upload excel file'));\n    } else {\n      if (Object.keys(formDataValue).length === statusUpload) {\n        dispatch(uploadFile(formDataValue));\n      }\n    }\n  };\n}\nexport function checkFile(data) {\n  return {\n    type: CHECK_FILE,\n    data: data\n  };\n}\nexport function uploadFile(formDataValue) {\n  return function (dispatch) {\n    console.log(formDataValue);\n  };\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/import/actions.js"],"names":["ADD_FILE","CHECK_FILE","SET_FORM_DATA_VALUE","addFile","name","value","type","clearAll","cleanFormData","departOne","id","touched","valid","error","departTwo","cleanFormDataValue","sku","points","measurement","classifiers","suppliers","barcode","description","dispatch","setFormDataValue","checkTouched","area","getState","formData","importReducer","formDataValue","forEach","item","length","changeFormDataValue","checkFormValidate","file","statusUpload","checkFile","Object","keys","uploadFile","data","console","log"],"mappings":"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","sourcesContent":["import {ADD_FILE, CHECK_FILE, SET_FORM_DATA_VALUE} from \"./actionTypes\";\r\n\r\nexport function addFile(name, value) {\r\n\r\n    return {\r\n        type: ADD_FILE,\r\n        name,\r\n        value\r\n    }\r\n}\r\n\r\nexport function clearAll() {\r\n\r\n    let cleanFormData = {\r\n        departOne: [\r\n            {id: 1, name: 'sku', touched: false, valid: false, error: false},\r\n            {id: 2, name: 'name', touched: false, valid: false, error: false},\r\n            {id: 3, name: 'points', touched: false, valid: false, error: false},\r\n            {id: 4, name: 'measurement'}\r\n        ],\r\n        departTwo: [\r\n            {id: 5, name: 'classifiers', touched: false, valid: false, error: false},\r\n            {id: 6, name: 'suppliers', touched: false, valid: false, error: false},\r\n            {id: 7, name: 'barcode', touched: false, valid: false, error: false},\r\n            {id: 8, name: 'description', touched: false, valid: false, error: false},\r\n        ],\r\n    };\r\n    let cleanFormDataValue = {\r\n        sku: '',\r\n        name: '',\r\n        points: '',\r\n        measurement: '',\r\n        classifiers: '',\r\n        suppliers: '',\r\n        barcode: '',\r\n        description: '',\r\n    }\r\n    return dispatch => {\r\n        dispatch(setFormDataValue(cleanFormDataValue, cleanFormData))\r\n    }\r\n}\r\n\r\nexport function checkTouched(name, area, id) {\r\n\r\n    return (dispatch, getState) => {\r\n        const formData = {...getState().importReducer.formData};\r\n        const formDataValue = {...getState().importReducer.formDataValue};\r\n\r\n\r\n        formData[area].forEach(\r\n            item => {\r\n                if (item.id === id) {\r\n                    item.touched = true\r\n                    if (formDataValue[name].length === 0) {\r\n                        item.valid = false;\r\n                        item.error = 'value is empty'\r\n                    } else {\r\n                        item.valid = true;\r\n                        item.error = false\r\n                    }\r\n                }\r\n            }\r\n        )\r\n        dispatch(setFormDataValue(formDataValue, formData))\r\n    }\r\n}\r\n\r\nexport function changeFormDataValue(name, value, area, id) {\r\n\r\n    return (dispatch, getState) => {\r\n        const formDataValue = {...getState().importReducer.formDataValue};\r\n        const formData = {...getState().importReducer.formData};\r\n        formData[area].forEach(\r\n            item => {\r\n                if (item.id === id) {\r\n                    if (value.length > 0) {\r\n                        if (value / 1) {\r\n                            item.valid = true;\r\n                            item.error = false\r\n                        } else {\r\n                            item.valid = false;\r\n                            item.error = 'value is invalid'\r\n                        }\r\n                    } else {\r\n                        item.valid = false;\r\n                        item.error = 'value is empty'\r\n                    }\r\n                }\r\n            }\r\n        )\r\n        formDataValue[name] = value\r\n        dispatch(setFormDataValue(formDataValue, formData))\r\n    }\r\n}\r\n\r\nexport function setFormDataValue(formDataValue, formData) {\r\n\r\n    return {\r\n        type: SET_FORM_DATA_VALUE,\r\n        formDataValue,\r\n        formData\r\n    }\r\n}\r\n\r\nexport function checkFormValidate() {\r\n\r\n    return (dispatch, getState) => {\r\n        const formData = {...getState().importReducer.formData};\r\n        const formDataValue = {...getState().importReducer.formDataValue};\r\n        let file = getState().importReducer.file;\r\n        let statusUpload = 0;\r\n\r\n        formData.departOne.forEach(\r\n            item => {\r\n                if (item.touched) {\r\n                    if (!item.valid) {\r\n                        if (formDataValue[item.name].length > 0) {\r\n                            item.error = 'value is invalid'\r\n                            dispatch(setFormDataValue(formDataValue, formData))\r\n                        } else {\r\n                            item.error = 'value is empty'\r\n                            dispatch(setFormDataValue(formDataValue, formData))\r\n                        }\r\n                    } else {\r\n                        statusUpload++;\r\n                    }\r\n                } else {\r\n                    item.error = 'value is empty'\r\n                    dispatch(setFormDataValue(formDataValue, formData))\r\n                }\r\n            }\r\n        )\r\n\r\n        formData.departTwo.forEach(\r\n            item => {\r\n                if (item.touched) {\r\n                    if (!item.valid) {\r\n                        if (formDataValue[item.name].length > 0) {\r\n                            item.error = 'value is invalid'\r\n                            dispatch(setFormDataValue(formDataValue, formData))\r\n                        } else {\r\n                            item.error = 'value is empty'\r\n                            dispatch(setFormDataValue(formDataValue, formData))\r\n                        }\r\n                    } else {\r\n                        statusUpload++;\r\n                    }\r\n                } else {\r\n                    item.error = 'value is empty'\r\n                    dispatch(setFormDataValue(formDataValue, formData))\r\n                }\r\n            }\r\n        )\r\n        if (file === null) {\r\n            dispatch(checkFile('You did not upload excel file'))\r\n        } else {\r\n            if (Object.keys(formDataValue).length === statusUpload) {\r\n                dispatch(uploadFile(formDataValue))\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function checkFile(data) {\r\n\r\n    return {\r\n        type: CHECK_FILE,\r\n        data\r\n    }\r\n}\r\n\r\nexport function uploadFile(formDataValue) {\r\n\r\n    return dispatch => {\r\n        console.log(formDataValue)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}