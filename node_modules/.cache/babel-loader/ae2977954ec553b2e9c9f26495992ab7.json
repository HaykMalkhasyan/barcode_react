{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\Translate.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\n\nfunction Translate(props) {\n  console.log(\"props.translations\", props.translations);\n\n  var checkWord = function checkWord(translations) {\n    if (translations[props.name]) {\n      return translations[props.name];\n    }\n\n    console.log(\"translations\", translations);\n    var index = false;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = props.translationstranslations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n\n        if (item.key === props.name.toLowerCase() && item.value === props.name && item.language === SessionStorage.get('lang')) {\n          index = true;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (index === false) {\n      props.setTranslations(props.name.toLowerCase(), props.name);\n    }\n\n    return props.name;\n  };\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, checkWord(props.translations));\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","connect","bindActionCreators","setTranslations","SessionStorage","Translate","props","console","log","translations","checkWord","name","index","translationstranslations","item","key","toLowerCase","value","language","get","mapDispatchToProps","dispatch","mapStateToProps","state","languages"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,eAAR,QAA8B,sBAA9B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,KAAK,CAACG,YAAxC;;AACA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAD,YAAY,EAAI;AAC9B,QAAIA,YAAY,CAACH,KAAK,CAACK,IAAP,CAAhB,EAA8B;AAC1B,aAAOF,YAAY,CAACH,KAAK,CAACK,IAAP,CAAnB;AACH;;AACDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,YAA5B;AACA,QAAIG,KAAK,GAAG,KAAZ;AAL8B;AAAA;AAAA;;AAAA;AAM9B,2BAAiBN,KAAK,CAACO,wBAAvB,8HAAiD;AAAA,YAAxCC,IAAwC;;AAC7C,YAAIA,IAAI,CAACC,GAAL,KAAaT,KAAK,CAACK,IAAN,CAAWK,WAAX,EAAb,IAAyCF,IAAI,CAACG,KAAL,KAAeX,KAAK,CAACK,IAA9D,IAAsEG,IAAI,CAACI,QAAL,KAAkBd,cAAc,CAACe,GAAf,CAAmB,MAAnB,CAA5F,EAAwH;AACpHP,UAAAA,KAAK,GAAG,IAAR;AACH;AACJ;AAV6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAW9B,QAAIA,KAAK,KAAK,KAAd,EAAqB;AACjBN,MAAAA,KAAK,CAACH,eAAN,CAAsBG,KAAK,CAACK,IAAN,CAAWK,WAAX,EAAtB,EAAgDV,KAAK,CAACK,IAAtD;AACH;;AACD,WAAOL,KAAK,CAACK,IAAb;AACH,GAfD;;AAgBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,SAAS,CAACJ,KAAK,CAACG,YAAP,CADd,CADJ;AAKH;;AAED,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAOnB,kBAAkB,CACrB;AACIC,IAAAA,eAAe,EAAfA;AADJ,GADqB,EAIrBkB,QAJqB,CAAzB;AAMH,CAPD;;AASA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHd,IAAAA,YAAY,EAAEc,KAAK,CAACC,SAAN,CAAgBf;AAD3B,GAAP;AAGH,CAJD;;AAMA,eAAeR,OAAO,CAACqB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6Cf,SAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\n\r\nfunction Translate(props) {\r\n    console.log(\"props.translations\", props.translations)\r\n    const checkWord = translations => {\r\n        if (translations[props.name]) {\r\n            return translations[props.name]\r\n        }\r\n        console.log(\"translations\", translations)\r\n        let index = false;\r\n        for (let item of props.translationstranslations) {\r\n            if (item.key === props.name.toLowerCase() && item.value === props.name && item.language === SessionStorage.get('lang')) {\r\n                index = true;\r\n            }\r\n        }\r\n        if (index === false) {\r\n            props.setTranslations(props.name.toLowerCase(), props.name);\r\n        }\r\n        return props.name;\r\n    }\r\n    return (\r\n        <span>\r\n            {checkWord(props.translations)}\r\n        </span>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}