{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\Translate.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations, checkTranslation, getTranslations } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\n\nvar Translate = function Translate(props) {\n  useEffect(function () {\n    props.getTranslations();\n  }, []);\n\n  var contentRender = function contentRender(name) {\n    if (name !== undefined) {\n      if (props.state === true\n      /*props.translations.length > 0*/\n      ) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = props.translations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var item = _step.value;\n\n              if (item.key === name.toLowerCase()) {\n                return item.value;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          props.checkTranslation({\n            key: name.toLowerCase(),\n            value: name,\n            language: SessionStorage.get('lang') || \"am\"\n          });\n          return name;\n        }\n      /* else {\r\n         props.checkTranslation({key: name.toLowerCase(), value: name, language: SessionStorage.get('lang') || \"am\"})\r\n         return name\r\n      }*/\n\n    }\n  };\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, contentRender(props.name));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations,\n    checkTranslation: checkTranslation,\n    getTranslations: getTranslations\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations,\n    status: state.languages.status\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","useEffect","connect","bindActionCreators","setTranslations","checkTranslation","getTranslations","SessionStorage","Translate","props","contentRender","name","undefined","state","translations","item","key","toLowerCase","value","language","get","mapDispatchToProps","dispatch","mapStateToProps","languages","status"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,eAAR,EAAyBC,gBAAzB,EAA2CC,eAA3C,QAAiE,sBAAjE;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAEvBR,EAAAA,SAAS,CACL,YAAM;AACFQ,IAAAA,KAAK,CAACH,eAAN;AACH,GAHI,EAGF,EAHE,CAAT;;AAOA,MAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI;AAC1B,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,UAAIH,KAAK,CAACI,KAAN,KAAgB;AAAI;AAAxB,QAA2D;AAAA;AAAA;AAAA;;AAAA;AACvD,iCAAiBJ,KAAK,CAACK,YAAvB,8HAAqC;AAAA,kBAA5BC,IAA4B;;AACjC,kBAAIA,IAAI,CAACC,GAAL,KAAaL,IAAI,CAACM,WAAL,EAAjB,EAAqC;AACjC,uBAAOF,IAAI,CAACG,KAAZ;AACH;AACJ;AALsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMvDT,UAAAA,KAAK,CAACJ,gBAAN,CAAuB;AAACW,YAAAA,GAAG,EAAEL,IAAI,CAACM,WAAL,EAAN;AAA0BC,YAAAA,KAAK,EAAEP,IAAjC;AAAuCQ,YAAAA,QAAQ,EAAEZ,cAAc,CAACa,GAAf,CAAmB,MAAnB,KAA8B;AAA/E,WAAvB;AACA,iBAAOT,IAAP;AACH;AAAA;;;;;AAIJ;AACJ,GAfD;;AAgBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSD,aAAa,CAACD,KAAK,CAACE,IAAP,CADtB,CADJ;AAMH,CA/BD;;AAiCA,IAAMU,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAOnB,kBAAkB,CACrB;AACIC,IAAAA,eAAe,EAAfA,eADJ;AAEIC,IAAAA,gBAAgB,EAAhBA,gBAFJ;AAGIC,IAAAA,eAAe,EAAfA;AAHJ,GADqB,EAMrBgB,QANqB,CAAzB;AAQH,CATD;;AAWA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAV,KAAK,EAAI;AAC7B,SAAO;AACHC,IAAAA,YAAY,EAAED,KAAK,CAACW,SAAN,CAAgBV,YAD3B;AAEHW,IAAAA,MAAM,EAAEZ,KAAK,CAACW,SAAN,CAAgBC;AAFrB,GAAP;AAIH,CALD;;AAOA,eAAevB,OAAO,CAACqB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6Cb,SAA7C,CAAf","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations, checkTranslation, getTranslations} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\n\r\nconst Translate = props => {\r\n\r\n    useEffect(\r\n        () => {\r\n            props.getTranslations()\r\n        }, []\r\n    )\r\n\r\n\r\n    const contentRender = name => {\r\n        if (name !== undefined) {\r\n            if (props.state === true/*props.translations.length > 0*/) {\r\n                for (let item of props.translations) {\r\n                    if (item.key === name.toLowerCase()) {\r\n                        return item.value\r\n                    }\r\n                }\r\n                props.checkTranslation({key: name.toLowerCase(), value: name, language: SessionStorage.get('lang') || \"am\"})\r\n                return name;\r\n            }/* else {\r\n                props.checkTranslation({key: name.toLowerCase(), value: name, language: SessionStorage.get('lang') || \"am\"})\r\n                return name\r\n            }*/\r\n        }\r\n    }\r\n    return (\r\n        <span>\r\n                {contentRender(props.name)}\r\n        </span>\r\n    );\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations,\r\n            checkTranslation,\r\n            getTranslations\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n        status: state.languages.status\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}