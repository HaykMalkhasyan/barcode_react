{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS, GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS, ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS, EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS, DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS, GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS, ADD_BARCODE, DELETE_BARCODE, SET_PRODUCT_MODAL, TOGGLE_PRODUCT_MODAL, SET_BARCODE, ADD_MEASUREMENT_VALUE, ADD_POINTS_VALUE, ADD_UPLOAD_IMAGES, ADD_VALUE } from \"./actionTypes\";\nvar url = \"Products/Product\";\nexport var productActions = function productActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"product/\".concat(data.id));\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"product/?page_size=10000\");\n        }\n      };\n\n    case \"add\":\n      return {\n        types: [ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"product/\", data);\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"product/\".concat(data.id), data);\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"product/\".concat(data.id));\n        },\n        data: data\n      };\n\n    default:\n      return;\n  }\n};\nexport var barcodeActions = function barcodeActions(type, code) {\n  switch (type) {\n    case \"getTypes\":\n      return {\n        types: [GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"barcode\");\n        }\n      };\n\n    case \"add\":\n      return {\n        type: ADD_BARCODE,\n        code: code\n      };\n\n    case \"delete\":\n      return {\n        type: DELETE_BARCODE,\n        code: code\n      };\n\n    default:\n      return;\n  }\n};\nexport var setModalValues = function setModalValues(key, value) {\n  return {\n    type: SET_PRODUCT_MODAL,\n    key: key,\n    value: value\n  };\n};\n/*----------------------------------*/\n\nexport function setBarcodeType(key, value) {\n  return function (dispatch, getState) {\n    var barcode = _objectSpread({}, getState().products.product);\n\n    console.log(key, value, barcode);\n  };\n}\nexport function removeBarcode(data, index) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product.barcode.splice(index, 1);\n    dispatch(setBarcode(product));\n  };\n}\nexport function setBarcode(product) {\n  return {\n    type: SET_BARCODE,\n    product: product\n  };\n}\nexport function setMeasurementValue(name, data) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product[name] = data.id;\n    dispatch(addMeasurementValue(product));\n  };\n}\nexport function addMeasurementValue(product) {\n  return {\n    type: ADD_MEASUREMENT_VALUE,\n    product: product\n  };\n}\nexport function setPointsValue(name, value) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product[name] = value;\n    dispatch(addPointValue(product));\n  };\n}\nexport function addPointValue(data) {\n  return {\n    type: ADD_POINTS_VALUE,\n    data: data\n  };\n}\nexport function SetUploadImages(name, images) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    var names = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = images[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n        names.push(item.name);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    product[name] = names;\n    dispatch(AddUploadImages(product));\n  };\n}\nexport function deleteUploadImages(imageItem) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product.upImages.forEach(function (item, index) {\n      if (item.name === imageItem.name) {\n        product.upImages.splice(index, 1);\n      }\n    });\n    dispatch(AddUploadImages(product));\n  };\n}\nexport function AddUploadImages(product) {\n  return {\n    type: ADD_UPLOAD_IMAGES,\n    product: product\n  };\n}\nexport function setMainImage(imageFile) {\n  return function (dispatch, getState) {\n    var product = _objectSpread({}, getState().products.product);\n\n    product['image'] = imageFile.name;\n    dispatch(AddUploadImages(product));\n  };\n}\nexport function setSearchProductValue(value, name) {\n  return function (dispatch, getState) {\n    var searchProduct = _objectSpread({}, getState().products.searchProduct);\n\n    var searchProductResult = [];\n\n    var products = _toConsumableArray(getState().products.products);\n\n    searchProduct[name] = value;\n\n    switch (name) {\n      case 'sku':\n        {\n          for (var item in searchProduct) {\n            console.log(item);\n          }\n\n          break;\n        }\n\n      default:\n        break;\n    } // for (let product of products) {\n    //         if (\n    //             product[name].toLowerCase().search(searchProduct[name].toLowerCase()) !== -1\n    //         ) {\n    //                 let index = false;\n    //                 for (let searchItem of searchProductResult) {\n    //                     if (parseInt(product.id) === parseInt(searchItem.id)) {\n    //                         index = true\n    //                     }\n    //                 }\n    //                 if (!index) {\n    //                     searchProductResult.push(product)\n    //                 }\n    //         }\n    // }\n    // dispatch(AddValue(searchProduct, searchProductResult))\n\n  };\n}\nexport function AddValue(data, searchProductResult) {\n  return {\n    type: ADD_VALUE,\n    data: data,\n    searchProductResult: searchProductResult\n  };\n}\n/*----------------------------------*/\n\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_PRODUCT_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/products/actions.js"],"names":["GET_PRODUCTS_REQUEST","GET_PRODUCTS_FAIL","GET_PRODUCTS_SUCCESS","GET_PRODUCT_REQUEST","GET_PRODUCT_FAIL","GET_PRODUCT_SUCCESS","ADD_PRODUCT_REQUEST","ADD_PRODUCT_FAIL","ADD_PRODUCT_SUCCESS","EDIT_PRODUCT_REQUEST","EDIT_PRODUCT_FAIL","EDIT_PRODUCT_SUCCESS","DELETE_PRODUCT_REQUEST","DELETE_PRODUCT_FAIL","DELETE_PRODUCT_SUCCESS","GET_BARCODE_TYPES_REQUEST","GET_BARCODE_TYPES_FAIL","GET_BARCODE_TYPES_SUCCESS","ADD_BARCODE","DELETE_BARCODE","SET_PRODUCT_MODAL","TOGGLE_PRODUCT_MODAL","SET_BARCODE","ADD_MEASUREMENT_VALUE","ADD_POINTS_VALUE","ADD_UPLOAD_IMAGES","ADD_VALUE","url","productActions","type","data","types","promise","apiClient","gett","id","posttAdd","putt","deletee","barcodeActions","code","setModalValues","key","value","setBarcodeType","dispatch","getState","barcode","products","product","console","log","removeBarcode","index","splice","setBarcode","setMeasurementValue","name","addMeasurementValue","setPointsValue","addPointValue","SetUploadImages","images","names","item","push","AddUploadImages","deleteUploadImages","imageItem","upImages","forEach","setMainImage","imageFile","setSearchProductValue","searchProduct","searchProductResult","AddValue","toggleModal","modalType","obj"],"mappings":"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","sourcesContent":["import {\r\n    GET_PRODUCTS_REQUEST,\r\n    GET_PRODUCTS_FAIL,\r\n    GET_PRODUCTS_SUCCESS,\r\n    GET_PRODUCT_REQUEST,\r\n    GET_PRODUCT_FAIL,\r\n    GET_PRODUCT_SUCCESS,\r\n    ADD_PRODUCT_REQUEST,\r\n    ADD_PRODUCT_FAIL,\r\n    ADD_PRODUCT_SUCCESS,\r\n    EDIT_PRODUCT_REQUEST,\r\n    EDIT_PRODUCT_FAIL,\r\n    EDIT_PRODUCT_SUCCESS,\r\n    DELETE_PRODUCT_REQUEST,\r\n    DELETE_PRODUCT_FAIL,\r\n    DELETE_PRODUCT_SUCCESS,\r\n    GET_BARCODE_TYPES_REQUEST,\r\n    GET_BARCODE_TYPES_FAIL,\r\n    GET_BARCODE_TYPES_SUCCESS,\r\n    ADD_BARCODE,\r\n    DELETE_BARCODE,\r\n    SET_PRODUCT_MODAL,\r\n    TOGGLE_PRODUCT_MODAL,\r\n    SET_BARCODE,\r\n    ADD_MEASUREMENT_VALUE,\r\n    ADD_POINTS_VALUE,\r\n    ADD_UPLOAD_IMAGES,\r\n    ADD_VALUE\r\n} from \"./actionTypes\";\r\n\r\nlet url = `Products/Product`;\r\nexport const productActions = (type,data) => {\r\n    switch(type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_PRODUCT_REQUEST,GET_PRODUCT_FAIL,GET_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`product/${data.id}`)\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_PRODUCTS_REQUEST,GET_PRODUCTS_FAIL,GET_PRODUCTS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`product/?page_size=10000`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                types: [ADD_PRODUCT_REQUEST,ADD_PRODUCT_FAIL,ADD_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`product/`,data)\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_PRODUCT_REQUEST,EDIT_PRODUCT_FAIL,EDIT_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`product/${data.id}`,data)\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_PRODUCT_REQUEST,DELETE_PRODUCT_FAIL,DELETE_PRODUCT_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletee(`product/${data.id}`),\r\n                data\r\n            }\r\n        default:\r\n            return ;\r\n    }\r\n};\r\nexport const barcodeActions = (type,code ) => {\r\n    switch(type) {\r\n        case \"getTypes\":\r\n            return {\r\n                types: [GET_BARCODE_TYPES_REQUEST,GET_BARCODE_TYPES_FAIL,GET_BARCODE_TYPES_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`barcode`)\r\n            }\r\n        case \"add\":\r\n            return {\r\n                type: ADD_BARCODE,\r\n                code\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                type: DELETE_BARCODE,\r\n                code\r\n            }\r\n        default:\r\n            return ;\r\n    }\r\n}\r\n\r\n\r\nexport const setModalValues = (key,value) => {\r\n\r\n    return {\r\n        type: SET_PRODUCT_MODAL,\r\n        key,\r\n        value\r\n    }\r\n}\r\n/*----------------------------------*/\r\nexport function setBarcodeType(key, value) {\r\n\r\n    return (dispatch, getState) => {\r\n        let barcode = {...getState().products.product};\r\n        console.log(key, value, barcode)\r\n    }\r\n\r\n}\r\n\r\nexport function removeBarcode(data, index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product};\r\n        product.barcode.splice(index, 1);\r\n        dispatch(setBarcode(product))\r\n    }\r\n}\r\n\r\nexport function setBarcode(product) {\r\n\r\n    return {\r\n        type: SET_BARCODE,\r\n        product\r\n    }\r\n}\r\n\r\nexport function setMeasurementValue(name, data) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product[name] = data.id;\r\n        dispatch(addMeasurementValue(product))\r\n    }\r\n}\r\n\r\nexport function addMeasurementValue(product) {\r\n\r\n    return {\r\n        type: ADD_MEASUREMENT_VALUE,\r\n        product\r\n    }\r\n}\r\n\r\nexport function setPointsValue(name, value) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product[name] = value;\r\n        dispatch(addPointValue(product))\r\n    }\r\n}\r\n\r\nexport function addPointValue(data) {\r\n\r\n    return {\r\n        type: ADD_POINTS_VALUE,\r\n        data\r\n    }\r\n}\r\n\r\nexport function SetUploadImages(name, images) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        let names = []\r\n        for(let item of images) {\r\n            names.push(item.name)\r\n        }\r\n        product[name] = names;\r\n        dispatch(AddUploadImages(product))\r\n    }\r\n}\r\n\r\nexport function deleteUploadImages(imageItem) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product.upImages.forEach(\r\n            (item, index) => {\r\n                if (item.name === imageItem.name) {\r\n                    product.upImages.splice(index, 1);\r\n                }\r\n            }\r\n        )\r\n        dispatch(AddUploadImages(product))\r\n    }\r\n}\r\n\r\nexport function AddUploadImages(product) {\r\n\r\n    return {\r\n        type: ADD_UPLOAD_IMAGES,\r\n        product\r\n    }\r\n}\r\n\r\nexport function setMainImage(imageFile) {\r\n\r\n    return (dispatch, getState) => {\r\n        let product = {...getState().products.product}\r\n        product['image'] = imageFile.name;\r\n        dispatch(AddUploadImages(product))\r\n\r\n    }\r\n}\r\n\r\nexport function setSearchProductValue(value, name) {\r\n\r\n    return (dispatch, getState) => {\r\n        let searchProduct = {...getState().products.searchProduct};\r\n        let searchProductResult = [];\r\n        let products = [...getState().products.products];\r\n        searchProduct[name] = value;\r\n        switch (name) {\r\n\r\n            case 'sku': {\r\n                for(let item in searchProduct) {\r\n                    console.log(item)\r\n                }\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n        // for (let product of products) {\r\n        //         if (\r\n        //             product[name].toLowerCase().search(searchProduct[name].toLowerCase()) !== -1\r\n        //         ) {\r\n        //                 let index = false;\r\n        //                 for (let searchItem of searchProductResult) {\r\n        //                     if (parseInt(product.id) === parseInt(searchItem.id)) {\r\n        //                         index = true\r\n        //                     }\r\n        //                 }\r\n        //                 if (!index) {\r\n        //                     searchProductResult.push(product)\r\n        //                 }\r\n        //         }\r\n        // }\r\n        // dispatch(AddValue(searchProduct, searchProductResult))\r\n    }\r\n}\r\n\r\nexport function AddValue(data, searchProductResult) {\r\n\r\n    return {\r\n        type: ADD_VALUE,\r\n        data,\r\n        searchProductResult\r\n    }\r\n}\r\n\r\n/*----------------------------------*/\r\n\r\nexport const toggleModal = (modalType,id) => {\r\n    let obj = {\"id\":id};\r\n    return {\r\n        type: TOGGLE_PRODUCT_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}