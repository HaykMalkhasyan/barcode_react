{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\Translate.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations, checkTranslation } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\n\nvar Translate = function Translate(props) {\n  // useEffect(\n  //     () => {\n  //         if (props.name !== undefined && props.translations.length > 0) {\n  //             console.log('Yraaaaaaaaaaaaaaaaaaaaaa');\n  //             let lang = SessionStorage.get('lang') || \"am\";\n  //             if (3) {\n  //                 let index = false;\n  //                 for (let item of props.translations) {\n  //                     if (item.value === props.name) {\n  //                         index = true;\n  //                     }\n  //                 }\n  //                 if (index === false) {\n  //                     // props.setTranslations(props.name.toLowerCase(), props.name, lang);\n  //                 }\n  //             } /*else obj.push({'key': props.name.toLowerCase(), 'name': props.name, 'lnag': lang});*/\n  //         }\n  //     }, []\n  // )\n  // if (!props.translations[props.name.toLowerCase()]) {\n  //     if (props.status) {\n  //         let lang = SessionStorage.get('lang') || \"am\";\n  //         if (props.translations.length > 0) {\n  //             let index = false;\n  //             for (let item of props.translations) {\n  //                 if (item.value === props.name) {\n  //                     index = true;\n  //                 }\n  //             }\n  //             if (index === false) {\n  //                 console.log('key: ', props.name.toLowerCase(), 'name: ', props.name, 'lnag: ', lang)\n  //                 // props.setTranslations(props.name, props.name, lang);\n  //             }\n  //         } else {\n  //             // props.setTranslations(props.name, props.name, lang);\n  //         }\n  //     }\n  // }\n  var contentRender = function contentRender(name) {\n    if (name === 'add') {\n      console.log(name);\n    }\n\n    if (name !== undefined) {\n      if (props.translations.length > 0) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = props.translations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.key === name.toLowerCase()) {\n              return item.value;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else {\n        props.checkTranslation({\n          key: name.toLowerCase(),\n          value: name,\n          language: SessionStorage.get('lang') || \"am\"\n        });\n        return name;\n      }\n    }\n  };\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, contentRender(props.name));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations,\n    checkTranslation: checkTranslation\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations,\n    status: state.languages.status\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","connect","bindActionCreators","setTranslations","checkTranslation","SessionStorage","Translate","props","contentRender","name","console","log","undefined","translations","length","item","key","toLowerCase","value","language","get","mapDispatchToProps","dispatch","mapStateToProps","state","languages","status"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,eAAR,EAAyBC,gBAAzB,QAAgD,sBAAhD;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI;AAC1B,QAAIA,IAAI,KAAK,KAAb,EAAoB;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEH;;AACD,QAAIA,IAAI,KAAKG,SAAb,EAAwB;AACpB,UAAIL,KAAK,CAACM,YAAN,CAAmBC,MAAnB,GAA4B,CAAhC,EAAmC;AAAA;AAAA;AAAA;;AAAA;AAC/B,+BAAiBP,KAAK,CAACM,YAAvB,8HAAqC;AAAA,gBAA5BE,IAA4B;;AACjC,gBAAIA,IAAI,CAACC,GAAL,KAAaP,IAAI,CAACQ,WAAL,EAAjB,EAAqC;AACjC,qBAAOF,IAAI,CAACG,KAAZ;AACH;AACJ;AAL8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlC,OAPD,MAOO;AACHX,QAAAA,KAAK,CAACH,gBAAN,CAAuB;AAACY,UAAAA,GAAG,EAAEP,IAAI,CAACQ,WAAL,EAAN;AAA0BC,UAAAA,KAAK,EAAET,IAAjC;AAAuCU,UAAAA,QAAQ,EAAEd,cAAc,CAACe,GAAf,CAAmB,MAAnB,KAA8B;AAA/E,SAAvB;AACA,eAAOX,IAAP;AACH;AACJ;AACJ,GAlBD;;AAmBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSD,aAAa,CAACD,KAAK,CAACE,IAAP,CADtB,CADJ;AAMH,CArED;;AAuEA,IAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAOpB,kBAAkB,CACrB;AACIC,IAAAA,eAAe,EAAfA,eADJ;AAEIC,IAAAA,gBAAgB,EAAhBA;AAFJ,GADqB,EAKrBkB,QALqB,CAAzB;AAOH,CARD;;AAUA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHX,IAAAA,YAAY,EAAEW,KAAK,CAACC,SAAN,CAAgBZ,YAD3B;AAEHa,IAAAA,MAAM,EAAEF,KAAK,CAACC,SAAN,CAAgBC;AAFrB,GAAP;AAIH,CALD;;AAOA,eAAezB,OAAO,CAACsB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6Cf,SAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations, checkTranslation} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\n\r\nconst Translate = props => {\r\n\r\n    // useEffect(\r\n    //     () => {\r\n    //         if (props.name !== undefined && props.translations.length > 0) {\r\n    //             console.log('Yraaaaaaaaaaaaaaaaaaaaaa');\r\n    //             let lang = SessionStorage.get('lang') || \"am\";\r\n    //             if (3) {\r\n    //                 let index = false;\r\n    //                 for (let item of props.translations) {\r\n    //                     if (item.value === props.name) {\r\n    //                         index = true;\r\n    //                     }\r\n    //                 }\r\n    //                 if (index === false) {\r\n    //                     // props.setTranslations(props.name.toLowerCase(), props.name, lang);\r\n    //                 }\r\n    //             } /*else obj.push({'key': props.name.toLowerCase(), 'name': props.name, 'lnag': lang});*/\r\n    //         }\r\n    //     }, []\r\n    // )\r\n\r\n\r\n    // if (!props.translations[props.name.toLowerCase()]) {\r\n    //     if (props.status) {\r\n    //         let lang = SessionStorage.get('lang') || \"am\";\r\n    //         if (props.translations.length > 0) {\r\n    //             let index = false;\r\n    //             for (let item of props.translations) {\r\n    //                 if (item.value === props.name) {\r\n    //                     index = true;\r\n    //                 }\r\n    //             }\r\n    //             if (index === false) {\r\n    //                 console.log('key: ', props.name.toLowerCase(), 'name: ', props.name, 'lnag: ', lang)\r\n    //                 // props.setTranslations(props.name, props.name, lang);\r\n    //             }\r\n    //         } else {\r\n    //             // props.setTranslations(props.name, props.name, lang);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n\r\n    const contentRender = name => {\r\n        if (name === 'add') {\r\n            console.log(name);\r\n\r\n        }\r\n        if (name !== undefined) {\r\n            if (props.translations.length > 0) {\r\n                for (let item of props.translations) {\r\n                    if (item.key === name.toLowerCase()) {\r\n                        return item.value\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                props.checkTranslation({key: name.toLowerCase(), value: name, language: SessionStorage.get('lang') || \"am\"})\r\n                return name\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <span>\r\n                {contentRender(props.name)}\r\n        </span>\r\n    );\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations,\r\n            checkTranslation\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n        status: state.languages.status\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}