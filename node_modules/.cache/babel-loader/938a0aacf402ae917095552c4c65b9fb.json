{"ast":null,"code":"import { ADD_MENU_REQUEST, ADD_MENU_FAIL, ADD_MENU_SUCCESS, EDIT_MENU_REQUEST, EDIT_MENU_FAIL, EDIT_MENU_SUCCESS, DELETE_MENU_REQUEST, DELETE_MENU_FAIL, DELETE_MENU_SUCCESS, TOGGLE_MENU_MODAL, GET_MENU_REQUEST, GET_MENU_FAIL, GET_MENU_SUCCESS } from \"./actionTypes\";\nvar cols = 'id,name,icon';\nvar col = 'id, name';\nexport var menuActions = function menuActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_MENU_REQUEST, GET_MENU_FAIL, GET_MENU_SUCCESS],\n        promice: function promice(apiClient) {\n          return apiClient.gett('pages/', {\n            cols: cols\n          });\n        }\n      };\n\n    case 'add':\n      return {\n        types: [ADD_MENU_REQUEST, ADD_MENU_FAIL, ADD_MENU_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.postt('pages/', data, {\n            col: col\n          });\n        }\n      };\n\n    case 'edit':\n      return {\n        types: [EDIT_MENU_REQUEST, EDIT_MENU_FAIL, EDIT_MENU_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.put(\"pages/\".concat(data.id), data, {\n            param: {\n              id: data.id\n            },\n            col: col\n          });\n        }\n      };\n\n    case 'delete':\n      return {\n        types: [DELETE_MENU_REQUEST, DELETE_MENU_FAIL, DELETE_MENU_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.delete(\"pages/\".concat(data.id), {\n            param: {\n              id: data.id\n            },\n            col: col\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_MENU_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/menu/actions.js"],"names":["ADD_MENU_REQUEST","ADD_MENU_FAIL","ADD_MENU_SUCCESS","EDIT_MENU_REQUEST","EDIT_MENU_FAIL","EDIT_MENU_SUCCESS","DELETE_MENU_REQUEST","DELETE_MENU_FAIL","DELETE_MENU_SUCCESS","TOGGLE_MENU_MODAL","GET_MENU_REQUEST","GET_MENU_FAIL","GET_MENU_SUCCESS","cols","col","menuActions","type","data","types","promice","apiClient","gett","promise","postt","put","id","param","delete","toggleModal","modalType","obj"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,aAFJ,EAGIC,gBAHJ,EAIIC,iBAJJ,EAKIC,cALJ,EAMIC,iBANJ,EAOIC,mBAPJ,EAQIC,gBARJ,EASIC,mBATJ,EAUIC,iBAVJ,EAWIC,gBAXJ,EAYIC,aAZJ,EAaIC,gBAbJ,QAcO,eAdP;AAgBA,IAAIC,IAAI,GAAG,cAAX;AACA,IAAIC,GAAG,GAAG,UAAV;AAGA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAOC,IAAP,EAAgB;AAEvC,UAAQD,IAAR;AAEI,SAAK,KAAL;AACI,aAAO;AACHE,QAAAA,KAAK,EAAE,CAACR,gBAAD,EAAmBC,aAAnB,EAAkCC,gBAAlC,CADJ;AAEHO,QAAAA,OAAO,EAAE,iBAAAC,SAAS;AAAA,iBAAIA,SAAS,CAACC,IAAV,CAAe,QAAf,EAAyB;AAACR,YAAAA,IAAI,EAAJA;AAAD,WAAzB,CAAJ;AAAA;AAFf,OAAP;;AAIJ,SAAK,KAAL;AACI,aAAO;AACHK,QAAAA,KAAK,EAAE,CAAClB,gBAAD,EAAmBC,aAAnB,EAAkCC,gBAAlC,CADJ;AAEHoB,QAAAA,OAAO,EAAE,iBAAAF,SAAS;AAAA,iBAAIA,SAAS,CAACG,KAAV,CAAgB,QAAhB,EAA0BN,IAA1B,EAAgC;AAACH,YAAAA,GAAG,EAAHA;AAAD,WAAhC,CAAJ;AAAA;AAFf,OAAP;;AAIJ,SAAK,MAAL;AACI,aAAO;AACHI,QAAAA,KAAK,EAAE,CAACf,iBAAD,EAAoBC,cAApB,EAAoCC,iBAApC,CADJ;AAEHiB,QAAAA,OAAO,EAAE,iBAAAF,SAAS;AAAA,iBAAIA,SAAS,CAACI,GAAV,iBAAuBP,IAAI,CAACQ,EAA5B,GAAkCR,IAAlC,EAAwC;AAACS,YAAAA,KAAK,EAAE;AAACD,cAAAA,EAAE,EAAER,IAAI,CAACQ;AAAV,aAAR;AAAuBX,YAAAA,GAAG,EAAHA;AAAvB,WAAxC,CAAJ;AAAA;AAFf,OAAP;;AAIJ,SAAK,QAAL;AACI,aAAO;AACHI,QAAAA,KAAK,EAAE,CAACZ,mBAAD,EAAsBC,gBAAtB,EAAwCC,mBAAxC,CADJ;AAEHc,QAAAA,OAAO,EAAE,iBAAAF,SAAS;AAAA,iBAAIA,SAAS,CAACO,MAAV,iBAA0BV,IAAI,CAACQ,EAA/B,GAAqC;AAACC,YAAAA,KAAK,EAAE;AAACD,cAAAA,EAAE,EAAER,IAAI,CAACQ;AAAV,aAAR;AAAuBX,YAAAA,GAAG,EAAHA;AAAvB,WAArC,CAAJ;AAAA;AAFf,OAAP;;AAIJ;AACI;AAvBR;AAyBH,CA3BM;AA6BP,OAAO,IAAMc,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAYJ,EAAZ,EAAmB;AAE1C,MAAIK,GAAG,GAAG;AAAC,UAAML;AAAP,GAAV;AACA,SAAO;AACHT,IAAAA,IAAI,EAAEP,iBADH;AAEHoB,IAAAA,SAAS,EAATA,SAFG;AAGHC,IAAAA,GAAG,EAAHA;AAHG,GAAP;AAMH,CATM","sourcesContent":["import {\r\n    ADD_MENU_REQUEST,\r\n    ADD_MENU_FAIL,\r\n    ADD_MENU_SUCCESS,\r\n    EDIT_MENU_REQUEST,\r\n    EDIT_MENU_FAIL,\r\n    EDIT_MENU_SUCCESS,\r\n    DELETE_MENU_REQUEST,\r\n    DELETE_MENU_FAIL,\r\n    DELETE_MENU_SUCCESS,\r\n    TOGGLE_MENU_MODAL,\r\n    GET_MENU_REQUEST,\r\n    GET_MENU_FAIL,\r\n    GET_MENU_SUCCESS\r\n} from \"./actionTypes\";\r\n\r\nlet cols = 'id,name,icon';\r\nlet col = 'id, name';\r\n\r\n\r\nexport const menuActions = (type, data) => {\r\n\r\n    switch (type) {\r\n\r\n        case \"get\":\r\n            return {\r\n                types: [GET_MENU_REQUEST, GET_MENU_FAIL, GET_MENU_SUCCESS],\r\n                promice: apiClient => apiClient.gett('pages/', {cols}),\r\n            }\r\n        case 'add':\r\n            return {\r\n                types: [ADD_MENU_REQUEST, ADD_MENU_FAIL, ADD_MENU_SUCCESS],\r\n                promise: apiClient => apiClient.postt('pages/', data, {col})\r\n            };\r\n        case 'edit':\r\n            return {\r\n                types: [EDIT_MENU_REQUEST, EDIT_MENU_FAIL, EDIT_MENU_SUCCESS],\r\n                promise: apiClient => apiClient.put(`pages/${data.id}`, data, {param: {id: data.id}, col})\r\n            }\r\n        case 'delete':\r\n            return {\r\n                types: [DELETE_MENU_REQUEST, DELETE_MENU_FAIL, DELETE_MENU_SUCCESS],\r\n                promise: apiClient => apiClient.delete(`pages/${data.id}`, {param: {id: data.id}, col})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType, id) => {\r\n\r\n    let obj = {\"id\": id}\r\n    return {\r\n        type: TOGGLE_MENU_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}