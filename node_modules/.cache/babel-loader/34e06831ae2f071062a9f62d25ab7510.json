{"ast":null,"code":"import { GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS, GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS, ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS, EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS, DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS, GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS, SET_SUPPLIER_MODAL, TOGGLE_SUPPLIER_MODAL, GET_Currency_REQUEST, GET_Currency_FAIL, GET_Currency_SUCCESS, SUPPLIERS_ADD_MODAL, SET_SUPPLIERS_VALUE, FETCH_SUPPLIER_REQUEST, FETCH_SUPPLIER_FAIL, FETCH_SUPPLIER_SUCCESS } from \"./actionTypes\";\nvar cols = 'id,name,type,hh,address,phone';\nexport var supplierActions = function supplierActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"suppliers/\".concat(data.id), {\n            cols: cols\n          });\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett('suppliers/', {\n            cols: cols\n          });\n        }\n      };\n\n    case \"add\":\n      data.type = 0;\n      return {\n        types: [ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"suppliers/\", data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      return {\n        types: [EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"suppliers/\".concat(data.id), data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.delete(\"suppliers/\".concat(data.id), {\n            cols: cols\n          });\n        }\n      };\n\n    default:\n      return;\n  }\n};\nexport var getBanks = function getBanks() {\n  return {\n    types: [GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett('bank/');\n    }\n  };\n};\nexport var getCurrency = function getCurrency() {\n  return {\n    types: [GET_Currency_REQUEST, GET_Currency_FAIL, GET_Currency_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett('currency/');\n    }\n  };\n};\nexport var setModalValues = function setModalValues(key, value, index, add) {\n  return {\n    type: SET_SUPPLIER_MODAL,\n    key: key,\n    value: value,\n    index: index,\n    add: add\n  };\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_SUPPLIER_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport function openSuppliersAddModal(text) {\n  return {\n    type: SUPPLIERS_ADD_MODAL,\n    text: text\n  };\n}\nexport function reducePhone(index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n    var phone = setSupplier.phone;\n    phone.splice(index, 1);\n    setSupplier.phone = phone;\n    dispatch(setValues(setSupplier));\n  };\n}\nexport function addPhone(value, index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n    var phone = setSupplier.phone;\n    phone[index + 1] = value;\n    setSupplier.phone = phone;\n    dispatch(setValues(setSupplier));\n  };\n}\nexport function setSuppliersAddModalValue(name, value, index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n\n    switch (name) {\n      case 'bank_id':\n        {\n          var banks = getState().suppliers.banks;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = banks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var bank = _step.value;\n\n              if (bank.id === +value) {\n                setSupplier.tin[name] = bank;\n                setSupplier.tin[name].active = +setSupplier.tin[name].active;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      case 'currency_id':\n        {\n          var currency = getState().suppliers.currency;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = currency[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var item = _step2.value;\n\n              if (item.id === +value) {\n                setSupplier.tin[name] = item;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      case 'tin_value':\n        {\n          setSupplier.tin[name] = value;\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      case 'phone':\n        {\n          var phone = setSupplier.phone;\n          phone[index] = value;\n          setSupplier.phone = phone;\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      default:\n        {\n          setSupplier[name] = value;\n          dispatch(setValues(setSupplier));\n          break;\n        }\n    }\n  };\n}\nexport function setValues(setSupplier) {\n  return {\n    type: SET_SUPPLIERS_VALUE,\n    setSupplier: setSupplier\n  };\n}\nexport function fetchSuppliers(data) {\n  console.log(typeof data.type);\n  var cleanSuppliers = {\n    name: '',\n    hh: '',\n    hvhh: '',\n    address: '',\n    tin: {\n      tin_value: '',\n      bank_id: null,\n      currency_id: null\n    },\n    director: '',\n    phone: [],\n    active: 0,\n    type: 0\n  };\n  return {\n    types: [FETCH_SUPPLIER_REQUEST, FETCH_SUPPLIER_FAIL, FETCH_SUPPLIER_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.posttAdd(\"suppliers/\", data, {\n        cols: cols\n      });\n    },\n    cleanSuppliers: cleanSuppliers\n  };\n}\nexport function searchRecuisit(recvi) {}","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/suppliers/actions.js"],"names":["GET_SUPPLIERS_REQUEST","GET_SUPPLIERS_FAIL","GET_SUPPLIERS_SUCCESS","GET_SUPPLIER_REQUEST","GET_SUPPLIER_FAIL","GET_SUPPLIER_SUCCESS","ADD_SUPPLIER_REQUEST","ADD_SUPPLIER_FAIL","ADD_SUPPLIER_SUCCESS","EDIT_SUPPLIER_REQUEST","EDIT_SUPPLIER_FAIL","EDIT_SUPPLIER_SUCCESS","DELETE_SUPPLIER_REQUEST","DELETE_SUPPLIER_FAIL","DELETE_SUPPLIER_SUCCESS","GET_BANKS_REQUEST","GET_BANKS_FAIL","GET_BANKS_SUCCESS","SET_SUPPLIER_MODAL","TOGGLE_SUPPLIER_MODAL","GET_Currency_REQUEST","GET_Currency_FAIL","GET_Currency_SUCCESS","SUPPLIERS_ADD_MODAL","SET_SUPPLIERS_VALUE","FETCH_SUPPLIER_REQUEST","FETCH_SUPPLIER_FAIL","FETCH_SUPPLIER_SUCCESS","cols","supplierActions","type","data","types","promise","apiClient","gett","id","posttAdd","putt","delete","getBanks","getCurrency","setModalValues","key","value","index","add","toggleModal","modalType","obj","openSuppliersAddModal","text","reducePhone","dispatch","getState","setSupplier","suppliers","phone","splice","setValues","addPhone","setSuppliersAddModalValue","name","banks","bank","tin","active","currency","item","fetchSuppliers","console","log","cleanSuppliers","hh","hvhh","address","tin_value","bank_id","currency_id","director","searchRecuisit","recvi"],"mappings":"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","sourcesContent":["import {\r\n    GET_SUPPLIERS_REQUEST,\r\n    GET_SUPPLIERS_FAIL,\r\n    GET_SUPPLIERS_SUCCESS,\r\n    GET_SUPPLIER_REQUEST,\r\n    GET_SUPPLIER_FAIL,\r\n    GET_SUPPLIER_SUCCESS,\r\n    ADD_SUPPLIER_REQUEST,\r\n    ADD_SUPPLIER_FAIL,\r\n    ADD_SUPPLIER_SUCCESS,\r\n    EDIT_SUPPLIER_REQUEST,\r\n    EDIT_SUPPLIER_FAIL,\r\n    EDIT_SUPPLIER_SUCCESS,\r\n    DELETE_SUPPLIER_REQUEST,\r\n    DELETE_SUPPLIER_FAIL,\r\n    DELETE_SUPPLIER_SUCCESS,\r\n    GET_BANKS_REQUEST,\r\n    GET_BANKS_FAIL,\r\n    GET_BANKS_SUCCESS,\r\n    SET_SUPPLIER_MODAL,\r\n    TOGGLE_SUPPLIER_MODAL,\r\n    GET_Currency_REQUEST,\r\n    GET_Currency_FAIL,\r\n    GET_Currency_SUCCESS,\r\n    SUPPLIERS_ADD_MODAL,\r\n    SET_SUPPLIERS_VALUE,\r\n    FETCH_SUPPLIER_REQUEST,\r\n    FETCH_SUPPLIER_FAIL,\r\n    FETCH_SUPPLIER_SUCCESS\r\n} from \"./actionTypes\";\r\n\r\nlet cols = 'id,name,type,hh,address,phone';\r\n\r\nexport const supplierActions = (type, data) => {\r\n    switch (type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`suppliers/${data.id}`, {cols})\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett('suppliers/', {cols})\r\n            }\r\n        case \"add\":\r\n            data.type = 0;\r\n            return {\r\n                types: [ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`suppliers/`, data, {cols})\r\n            }\r\n        case \"edit\":\r\n            return {\r\n                types: [EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`suppliers/${data.id}`, data, {cols})\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.delete(`suppliers/${data.id}`, {cols})\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\nexport const getBanks = () => {\r\n    return {\r\n        types: [GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett('bank/')\r\n    }\r\n}\r\n\r\nexport const getCurrency = () => {\r\n    return {\r\n        types: [GET_Currency_REQUEST, GET_Currency_FAIL, GET_Currency_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett('currency/')\r\n    }\r\n}\r\n\r\nexport const setModalValues = (key, value, index, add) => {\r\n    return {\r\n        type: SET_SUPPLIER_MODAL,\r\n        key,\r\n        value,\r\n        index,\r\n        add\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType, id) => {\r\n    let obj = {\"id\": id};\r\n    return {\r\n        type: TOGGLE_SUPPLIER_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\n\r\nexport function openSuppliersAddModal(text) {\r\n\r\n    return {\r\n        type: SUPPLIERS_ADD_MODAL,\r\n        text\r\n    }\r\n}\r\n\r\nexport function reducePhone(index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        let phone = setSupplier.phone\r\n        phone.splice(index, 1);\r\n        setSupplier.phone = phone;\r\n        dispatch(setValues(setSupplier))\r\n    }\r\n}\r\n\r\nexport function addPhone(value, index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        let phone = setSupplier.phone\r\n        phone[index + 1] = value;\r\n        setSupplier.phone = phone;\r\n        dispatch(setValues(setSupplier))\r\n    }\r\n}\r\n\r\nexport function setSuppliersAddModalValue(name, value, index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        switch (name) {\r\n            case 'bank_id': {\r\n\r\n                let banks = getState().suppliers.banks;\r\n                for (let bank of banks) {\r\n                    if (bank.id === +value) {\r\n\r\n                        setSupplier.tin[name] = bank;\r\n                        setSupplier.tin[name].active = +setSupplier.tin[name].active;\r\n                    }\r\n                }\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n            case 'currency_id': {\r\n\r\n                let currency = getState().suppliers.currency;\r\n                for (let item of currency) {\r\n                    if (item.id === +value) {\r\n                        setSupplier.tin[name] = item\r\n                    }\r\n                }\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n            case 'tin_value': {\r\n\r\n                setSupplier.tin[name] = value\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n            case 'phone': {\r\n\r\n                let phone = setSupplier.phone;\r\n                phone[index] = value\r\n                setSupplier.phone = (phone);\r\n                dispatch(setValues(setSupplier));\r\n                break;\r\n            }\r\n            default: {\r\n\r\n                setSupplier[name] = value;\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function setValues(setSupplier) {\r\n\r\n    return {\r\n        type: SET_SUPPLIERS_VALUE,\r\n        setSupplier\r\n    }\r\n}\r\n\r\nexport function fetchSuppliers(data) {\r\n    console.log(typeof data.type)\r\n    let cleanSuppliers = {\r\n        name: '',\r\n        hh: '',\r\n        hvhh: '',\r\n        address: '',\r\n        tin: {\r\n            tin_value: '',\r\n            bank_id: null,\r\n            currency_id: null\r\n        },\r\n        director: '',\r\n        phone: [],\r\n        active: 0,\r\n        type: 0\r\n    }\r\n\r\n    return {\r\n        types: [FETCH_SUPPLIER_REQUEST, FETCH_SUPPLIER_FAIL, FETCH_SUPPLIER_SUCCESS],\r\n        promise: (apiClient) => apiClient.posttAdd(`suppliers/`, data, {cols}),\r\n        cleanSuppliers\r\n    }\r\n}\r\n\r\nexport function searchRecuisit(recvi) {\r\n\r\n}"]},"metadata":{},"sourceType":"module"}