{"ast":null,"code":"import axios from 'axios';\nimport { EDIT_CURRENCY, GET_ALL_CURRENCY_FAIL, GET_ALL_CURRENCY_REQUEST, GET_ALL_CURRENCY_SUCCESS, SET_FORM_VALIDATE, SET_VALUES, TOGGLE_MODAL } from \"./actionTypes\";\nexport var getAllCurrency = function getAllCurrency() {\n  return {\n    types: [GET_ALL_CURRENCY_REQUEST, GET_ALL_CURRENCY_FAIL, GET_ALL_CURRENCY_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett('currency/');\n    }\n  };\n};\nexport var toggleModal = function toggleModal() {\n  return {\n    type: TOGGLE_MODAL\n  };\n};\nexport var editCurrency = function editCurrency()\n/*need changed*/\n{\n  return {\n    type: EDIT_CURRENCY\n  };\n};\nexport var setCurrencyValue = function setCurrencyValue(name, value) {\n  return function (dispatch, getState) {\n    var setCurrency = getState().currency.setCurrency;\n    setCurrency[name] = value;\n    dispatch(setValue(setCurrency));\n  };\n};\nexport var setValue = function setValue(setCurrency) {\n  return {\n    type: SET_VALUES,\n    setCurrency: setCurrency\n  };\n};\nexport var checkCurrencyValue = function checkCurrencyValue(name, value) {\n  console.log(value.length);\n  return function (dispatch, getState) {\n    var formValidate = getState().currency.formValidate;\n\n    if (value.length === 0) {\n      formValidate[name] = 'the field must not be empty';\n      dispatch(setFormValidate(formValidate));\n    }\n\n    if (value.length > 0) {\n      formValidate[name] = false;\n      dispatch(setFormValidate(formValidate));\n    }\n  };\n};\nexport var setFormValidate = function setFormValidate(formValidate) {\n  return {\n    type: SET_FORM_VALIDATE,\n    formValidate: formValidate\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/currency/actions.js"],"names":["axios","EDIT_CURRENCY","GET_ALL_CURRENCY_FAIL","GET_ALL_CURRENCY_REQUEST","GET_ALL_CURRENCY_SUCCESS","SET_FORM_VALIDATE","SET_VALUES","TOGGLE_MODAL","getAllCurrency","types","promise","apiClient","gett","toggleModal","type","editCurrency","setCurrencyValue","name","value","dispatch","getState","setCurrency","currency","setValue","checkCurrencyValue","console","log","length","formValidate","setFormValidate"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,aADJ,EAEIC,qBAFJ,EAGIC,wBAHJ,EAIIC,wBAJJ,EAI8BC,iBAJ9B,EAIiDC,UAJjD,EAKIC,YALJ,QAMO,eANP;AAQA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAEhC,SAAO;AACHC,IAAAA,KAAK,EAAE,CAACN,wBAAD,EAA2BD,qBAA3B,EAAkDE,wBAAlD,CADJ;AAEHM,IAAAA,OAAO,EAAE,iBAACC,SAAD;AAAA,aAAeA,SAAS,CAACC,IAAV,CAAe,WAAf,CAAf;AAAA;AAFN,GAAP;AAIH,CANM;AAQP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAE7B,SAAO;AACHC,IAAAA,IAAI,EAAEP;AADH,GAAP;AAGH,CALM;AAOP,OAAO,IAAMQ,YAAY,GAAG,SAAfA,YAAe;AAAC;AAAqB;AAE9C,SAAO;AACHD,IAAAA,IAAI,EAAEb;AADH,GAAP;AAGH,CALM;AAOP,OAAO,IAAMe,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAOC,KAAP,EAAiB;AAE7C,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAMC,WAAW,GAAGD,QAAQ,GAAGE,QAAX,CAAoBD,WAAxC;AACAA,IAAAA,WAAW,CAACJ,IAAD,CAAX,GAAoBC,KAApB;AACAC,IAAAA,QAAQ,CAACI,QAAQ,CAACF,WAAD,CAAT,CAAR;AACH,GAJD;AAKH,CAPM;AASP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAAF,WAAW,EAAI;AAEnC,SAAO;AACHP,IAAAA,IAAI,EAAER,UADH;AAEHe,IAAAA,WAAW,EAAXA;AAFG,GAAP;AAIH,CANM;AAQP,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACP,IAAD,EAAOC,KAAP,EAAiB;AACnDO,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,MAAlB;AACI,SAAO,UAACR,QAAD,EAAWC,QAAX,EAAwB;AAC3B,QAAMQ,YAAY,GAAGR,QAAQ,GAAGE,QAAX,CAAoBM,YAAzC;;AACA,QAAIV,KAAK,CAACS,MAAN,KAAiB,CAArB,EAAwB;AACpBC,MAAAA,YAAY,CAACX,IAAD,CAAZ,GAAqB,6BAArB;AACAE,MAAAA,QAAQ,CAACU,eAAe,CAACD,YAAD,CAAhB,CAAR;AACH;;AACD,QAAIV,KAAK,CAACS,MAAN,GAAe,CAAnB,EAAsB;AAClBC,MAAAA,YAAY,CAACX,IAAD,CAAZ,GAAqB,KAArB;AACAE,MAAAA,QAAQ,CAACU,eAAe,CAACD,YAAD,CAAhB,CAAR;AACH;AACJ,GAVD;AAWH,CAbM;AAeP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAD,YAAY,EAAI;AAE3C,SAAO;AACHd,IAAAA,IAAI,EAAET,iBADH;AAEHuB,IAAAA,YAAY,EAAZA;AAFG,GAAP;AAIH,CANM","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    EDIT_CURRENCY,\r\n    GET_ALL_CURRENCY_FAIL,\r\n    GET_ALL_CURRENCY_REQUEST,\r\n    GET_ALL_CURRENCY_SUCCESS, SET_FORM_VALIDATE, SET_VALUES,\r\n    TOGGLE_MODAL\r\n} from \"./actionTypes\";\r\n\r\nexport const getAllCurrency = () => {\r\n\r\n    return {\r\n        types: [GET_ALL_CURRENCY_REQUEST, GET_ALL_CURRENCY_FAIL, GET_ALL_CURRENCY_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett('currency/')\r\n    }\r\n}\r\n\r\nexport const toggleModal = () => {\r\n\r\n    return {\r\n        type: TOGGLE_MODAL\r\n    }\r\n}\r\n\r\nexport const editCurrency = (/*need changed*/) => {\r\n\r\n    return {\r\n        type: EDIT_CURRENCY\r\n    }\r\n}\r\n\r\nexport const setCurrencyValue = (name, value) => {\r\n\r\n    return (dispatch, getState) => {\r\n        const setCurrency = getState().currency.setCurrency;\r\n        setCurrency[name] = value;\r\n        dispatch(setValue(setCurrency))\r\n    }\r\n}\r\n\r\nexport const setValue = setCurrency => {\r\n\r\n    return {\r\n        type: SET_VALUES,\r\n        setCurrency\r\n    }\r\n}\r\n\r\nexport const checkCurrencyValue = (name, value) => {\r\nconsole.log(value.length)\r\n    return (dispatch, getState) => {\r\n        const formValidate = getState().currency.formValidate;\r\n        if (value.length === 0) {\r\n            formValidate[name] = 'the field must not be empty'\r\n            dispatch(setFormValidate(formValidate))\r\n        }\r\n        if (value.length > 0) {\r\n            formValidate[name] = false\r\n            dispatch(setFormValidate(formValidate))\r\n        }\r\n    }\r\n}\r\n\r\nexport const setFormValidate = formValidate => {\r\n\r\n    return {\r\n        type: SET_FORM_VALIDATE,\r\n        formValidate\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}