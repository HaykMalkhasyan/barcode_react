{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { GET_GROUPS_REQUEST, GET_GROUPS_FAIL, GET_GROUPS_SUCCESS, GET_GROUP_REQUEST, GET_GROUP_FAIL, GET_GROUP_SUCCESS, ADD_GROUP_REQUEST, ADD_GROUP_FAIL, ADD_GROUP_SUCCESS, EDIT_GROUP_REQUEST, EDIT_GROUP_FAIL, EDIT_GROUP_SUCCESS, DELETE_GROUP_REQUEST, DELETE_GROUP_FAIL, DELETE_GROUP_SUCCESS, GET_SUB_GROUP_REQUEST, GET_SUB_GROUP_FAIL, GET_SUB_GROUP_SUCCESS, ADD_SUB_GROUP_REQUEST, ADD_SUB_GROUP_FAIL, ADD_SUB_GROUP_SUCCESS, EDIT_SUB_GROUP_REQUEST, EDIT_SUB_GROUP_FAIL, EDIT_SUB_GROUP_SUCCESS, DELETE_SUB_GROUP_REQUEST, DELETE_SUB_GROUP_FAIL, DELETE_SUB_GROUP_SUCCESS, SET_GROUP_MODAL, TOGGLE_GROUP_MODAL, TOGGLE_SUB_GROUP_MODAL, OPEN_MENU, SELECT_GROUP } from \"./actionTypes\";\nimport { IsRequiredField, IsRequiredFields, PutObjectValues, RemoveObjectValues } from \"../../utility/utils\";\nimport { openMenu, addElement, editElement, deleteElement } from \"./functions\";\nvar INIT_STATE = {\n  groups: [],\n  group: {},\n  modal: {},\n  subModal: {},\n  required: [\"name\"],\n  selected: {},\n  loading: false,\n  success: false,\n  fail: false,\n  errors: {}\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_GROUPS_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        modal: {},\n        subModal: {},\n        errors: {}\n      });\n\n    case GET_GROUPS_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        modal: {},\n        subModal: {},\n        fail: true\n      });\n\n    case GET_GROUPS_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: {},\n        subModal: {},\n        groups: JSON.parse(action.result.data),\n        errors: {}\n      });\n\n    case GET_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: {}\n      });\n\n    case GET_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case GET_GROUP_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        group: JSON.parse(action.result.data)[Object.keys(JSON.parse(action.result.data))[0]],\n        errors: {}\n      });\n\n    case ADD_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: IsRequiredFields(state.required, state.group, state.errors)\n      });\n\n    case ADD_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case ADD_GROUP_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: {},\n        groups: JSON.parse(action.result.data)\n      });\n\n    case EDIT_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: IsRequiredFields(state.required, state.group, state.errors)\n      });\n\n    case EDIT_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case EDIT_GROUP_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: {},\n        group: {},\n        groups: PutObjectValues(state.groups, JSON.parse(action.result.data))\n      });\n\n    case DELETE_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false\n      });\n\n    case DELETE_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case DELETE_GROUP_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: {},\n        group: {},\n        groups: RemoveObjectValues(state.groups, JSON.parse(action.result.data)['id'])\n      });\n\n    case GET_SUB_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: {}\n      });\n\n    case GET_SUB_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case GET_SUB_GROUP_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        group: JSON.parse(action.result.data),\n        errors: {}\n      });\n\n    case ADD_SUB_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: IsRequiredFields(state.required, state.group, state.errors)\n      });\n\n    case ADD_SUB_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case ADD_SUB_GROUP_SUCCESS:\n      var addEl = JSON.parse(action.result.data);\n      state.groups[addEl.group_id].subGroup = addElement(state.groups[addEl.group_id].subGroup, addEl);\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        subModal: {},\n        groups: state.groups\n      });\n\n    case EDIT_SUB_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: IsRequiredFields(state.required, state.group, state.errors)\n      });\n\n    case EDIT_SUB_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case EDIT_SUB_GROUP_SUCCESS:\n      var EditEl = JSON.parse(action.result.data);\n      state.groups[EditEl.group_id].subGroup = editElement(state.groups[EditEl.group_id].subGroup, EditEl);\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        subModal: {},\n        group: {},\n        groups: state.groups\n      });\n\n    case DELETE_SUB_GROUP_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false\n      });\n\n    case DELETE_SUB_GROUP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case DELETE_SUB_GROUP_SUCCESS:\n      var delEl = JSON.parse(action.result.data);\n      state.groups[delEl.group_id].subGroup = deleteElement(state.groups[delEl.group_id].subGroup, delEl.id);\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        subModal: {},\n        group: {},\n        groups: state.groups\n      });\n\n    case SET_GROUP_MODAL:\n      console.log(state.group[action.key][action.lang]);\n\n      if (action.lang) {\n        if (!state.group[action.key]) {\n          state.group[action.key] = {};\n        }\n\n        state.group[action.key][action.lang] = action.value;\n      } else {\n        state.group[action.key] = action.value;\n      }\n\n      return _objectSpread({}, state, {\n        errors: IsRequiredField(state.required, action, state.errors)\n      });\n\n    case TOGGLE_GROUP_MODAL:\n      state.modal[action.modalType] = !state.modal[action.modalType];\n\n      if (action.obj) {\n        if (action.modalType === \"edit\") {\n          state.group[action.obj.key] = action.obj.value;\n        } else {\n          state.group = action.obj;\n        }\n      }\n\n      return _objectSpread({}, state, {\n        errors: {},\n        subModal: {}\n      });\n\n    case TOGGLE_SUB_GROUP_MODAL:\n      state.subModal[action.modalType] = !state.subModal[action.modalType];\n      var obj = action.obj;\n\n      if (obj) {\n        if (action.modalType === \"edit\") {\n          state.group = _objectSpread({}, state.group, obj);\n        } else {\n          state.group = obj;\n        }\n      }\n\n      return _objectSpread({}, state, {\n        errors: {},\n        modal: {}\n      });\n\n    case OPEN_MENU:\n      state.groups[action.group_id].subGroup = openMenu(state.groups[action.group_id].subGroup, action.id, \"open\");\n      return _objectSpread({}, state, {\n        groups: state.groups\n      });\n\n    case SELECT_GROUP:\n      state.selected[action.group_id] = action.value;\n      return _objectSpread({}, state);\n\n    default:\n      return _objectSpread({}, state);\n  }\n});","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/group/reducer.js"],"names":["GET_GROUPS_REQUEST","GET_GROUPS_FAIL","GET_GROUPS_SUCCESS","GET_GROUP_REQUEST","GET_GROUP_FAIL","GET_GROUP_SUCCESS","ADD_GROUP_REQUEST","ADD_GROUP_FAIL","ADD_GROUP_SUCCESS","EDIT_GROUP_REQUEST","EDIT_GROUP_FAIL","EDIT_GROUP_SUCCESS","DELETE_GROUP_REQUEST","DELETE_GROUP_FAIL","DELETE_GROUP_SUCCESS","GET_SUB_GROUP_REQUEST","GET_SUB_GROUP_FAIL","GET_SUB_GROUP_SUCCESS","ADD_SUB_GROUP_REQUEST","ADD_SUB_GROUP_FAIL","ADD_SUB_GROUP_SUCCESS","EDIT_SUB_GROUP_REQUEST","EDIT_SUB_GROUP_FAIL","EDIT_SUB_GROUP_SUCCESS","DELETE_SUB_GROUP_REQUEST","DELETE_SUB_GROUP_FAIL","DELETE_SUB_GROUP_SUCCESS","SET_GROUP_MODAL","TOGGLE_GROUP_MODAL","TOGGLE_SUB_GROUP_MODAL","OPEN_MENU","SELECT_GROUP","IsRequiredField","IsRequiredFields","PutObjectValues","RemoveObjectValues","openMenu","addElement","editElement","deleteElement","INIT_STATE","groups","group","modal","subModal","required","selected","loading","success","fail","errors","state","action","type","JSON","parse","result","data","Object","keys","addEl","group_id","subGroup","EditEl","delEl","id","console","log","key","lang","value","modalType","obj"],"mappings":"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","sourcesContent":["import {\r\n    GET_GROUPS_REQUEST,GET_GROUPS_FAIL,GET_GROUPS_SUCCESS,\r\n    GET_GROUP_REQUEST,GET_GROUP_FAIL,GET_GROUP_SUCCESS,\r\n    ADD_GROUP_REQUEST,ADD_GROUP_FAIL,ADD_GROUP_SUCCESS,\r\n    EDIT_GROUP_REQUEST,EDIT_GROUP_FAIL,EDIT_GROUP_SUCCESS,\r\n    DELETE_GROUP_REQUEST,DELETE_GROUP_FAIL,DELETE_GROUP_SUCCESS,\r\n    GET_SUB_GROUP_REQUEST,GET_SUB_GROUP_FAIL,GET_SUB_GROUP_SUCCESS,\r\n    ADD_SUB_GROUP_REQUEST,ADD_SUB_GROUP_FAIL,ADD_SUB_GROUP_SUCCESS,\r\n    EDIT_SUB_GROUP_REQUEST,EDIT_SUB_GROUP_FAIL,EDIT_SUB_GROUP_SUCCESS,\r\n    DELETE_SUB_GROUP_REQUEST,DELETE_SUB_GROUP_FAIL,DELETE_SUB_GROUP_SUCCESS,\r\n    SET_GROUP_MODAL,TOGGLE_GROUP_MODAL,TOGGLE_SUB_GROUP_MODAL,OPEN_MENU,\r\n    SELECT_GROUP\r\n} from \"./actionTypes\";\r\nimport {IsRequiredField,IsRequiredFields,PutObjectValues,RemoveObjectValues} from \"../../utility/utils\";\r\nimport {openMenu,addElement,editElement,deleteElement} from \"./functions\";\r\n\r\nconst INIT_STATE = {\r\n    groups: [],\r\n    group:{},\r\n    modal: {},\r\n    subModal: {},\r\n    required: [\"name\"],\r\n    selected:{},\r\n    loading: false,\r\n    success: false,\r\n    fail: false,\r\n    errors: {}\r\n};\r\n\r\nexport default (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        case GET_GROUPS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                modal:{},\r\n                subModal: {},\r\n                errors: {},\r\n            };\r\n        case GET_GROUPS_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                modal:{},\r\n                subModal: {},\r\n                fail: true,\r\n            };\r\n        case GET_GROUPS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal:{},\r\n                subModal: {},\r\n                groups: JSON.parse(action.result.data),\r\n                errors: {},\r\n            };\r\n        case GET_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: {},\r\n            };\r\n        case GET_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n            };\r\n        case GET_GROUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                group: JSON.parse(action.result.data)[Object.keys(JSON.parse(action.result.data))[0]],\r\n                errors: {},\r\n            };\r\n        case ADD_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors:IsRequiredFields(state.required,state.group,state.errors)\r\n            }\r\n        case ADD_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case ADD_GROUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal: {},\r\n                groups: JSON.parse(action.result.data)\r\n            };\r\n        case EDIT_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: IsRequiredFields(state.required,state.group,state.errors)\r\n            }\r\n        case EDIT_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case EDIT_GROUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal: {},\r\n                group: {},\r\n                groups: PutObjectValues(state.groups,JSON.parse(action.result.data))\r\n            };\r\n        case DELETE_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n            }\r\n        case DELETE_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case DELETE_GROUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal: {},\r\n                group: {},\r\n                groups: RemoveObjectValues(state.groups,JSON.parse(action.result.data)['id'])\r\n            };\r\n        case GET_SUB_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: {},\r\n            };\r\n        case GET_SUB_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n            };\r\n        case GET_SUB_GROUP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                group: JSON.parse(action.result.data),\r\n                errors: {},\r\n            };\r\n        case ADD_SUB_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors:IsRequiredFields(state.required,state.group,state.errors)\r\n            }\r\n        case ADD_SUB_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case ADD_SUB_GROUP_SUCCESS:\r\n            let addEl =  JSON.parse(action.result.data);\r\n            state.groups[addEl.group_id].subGroup = addElement(state.groups[addEl.group_id].subGroup,addEl);\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                subModal: {},\r\n                groups: state.groups\r\n            };\r\n        case EDIT_SUB_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: IsRequiredFields(state.required,state.group,state.errors)\r\n            }\r\n        case EDIT_SUB_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case EDIT_SUB_GROUP_SUCCESS:\r\n            let EditEl =  JSON.parse(action.result.data);\r\n            state.groups[EditEl.group_id].subGroup = editElement(state.groups[EditEl.group_id].subGroup,EditEl);\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                subModal: {},\r\n                group: {},\r\n                groups: state.groups\r\n            };\r\n        case DELETE_SUB_GROUP_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n            }\r\n        case DELETE_SUB_GROUP_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case DELETE_SUB_GROUP_SUCCESS:\r\n            let delEl =  JSON.parse(action.result.data);\r\n            state.groups[delEl.group_id].subGroup = deleteElement(state.groups[delEl.group_id].subGroup,delEl.id);\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                subModal: {},\r\n                group: {},\r\n                groups: state.groups\r\n            };\r\n\r\n        case SET_GROUP_MODAL:\r\n            console.log(state.group[action.key][action.lang])\r\n            if(action.lang){\r\n                if(!state.group[action.key]){\r\n                    state.group[action.key] = {}\r\n                }\r\n                state.group[action.key][action.lang] = action.value;\r\n            }else{\r\n                state.group[action.key] = action.value;\r\n            }\r\n            return {\r\n                ...state,\r\n                errors:IsRequiredField(state.required,action,state.errors)\r\n            };\r\n        case TOGGLE_GROUP_MODAL:\r\n            state.modal[action.modalType] = !state.modal[action.modalType];\r\n            if(action.obj){\r\n                if(action.modalType===\"edit\"){\r\n                    state.group[action.obj.key] = action.obj.value\r\n                }else{\r\n                    state.group = action.obj\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                errors: {},\r\n                subModal: {}\r\n            }\r\n        case TOGGLE_SUB_GROUP_MODAL:\r\n            state.subModal[action.modalType] = !state.subModal[action.modalType];\r\n            let obj = action.obj\r\n            if(obj){\r\n                if(action.modalType===\"edit\"){\r\n                    state.group = {\r\n                        ...state.group,\r\n                        ...obj\r\n                    }\r\n                }else{\r\n                    state.group = obj\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                errors: {},\r\n                modal: {}\r\n            }\r\n        case OPEN_MENU:\r\n            state.groups[action.group_id].subGroup = openMenu(state.groups[action.group_id].subGroup,action.id,\"open\");\r\n            return {\r\n                ...state,\r\n                groups: state.groups\r\n            }\r\n        case SELECT_GROUP:\r\n            state.selected[action.group_id] = action.value\r\n            return {\r\n                ...state,\r\n            }\r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}