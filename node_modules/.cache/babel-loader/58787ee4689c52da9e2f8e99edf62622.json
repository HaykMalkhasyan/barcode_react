{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport { GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS, GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS, ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS, EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS, DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS, GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS, SET_SUPPLIER_MODAL, TOGGLE_SUPPLIER_MODAL, GET_Currency_REQUEST, GET_Currency_FAIL, GET_Currency_SUCCESS, SUPPLIERS_ADD_MODAL, SET_SUPPLIERS_VALUE, FETCH_SUPPLIER_REQUEST, FETCH_SUPPLIER_FAIL, FETCH_SUPPLIER_SUCCESS, SUPPLIERS_OPEN_MODAL, SET_ERROR, EMPTY_VALUE, SUCCES_VALUE } from \"./actionTypes\";\nimport axios from \"axios\";\nvar cols = 'id,name,type,hh,address,phone';\nexport var supplierActions = function supplierActions(type, data) {\n  switch (type) {\n    case \"get\":\n      return {\n        types: [GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett(\"suppliers/\".concat(data.id), {\n            cols: cols\n          });\n        }\n      };\n\n    case \"getAll\":\n      return {\n        types: [GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.gett('suppliers/', {\n            cols: cols\n          });\n        }\n      };\n\n    case \"add\":\n      data.type = 0;\n      return {\n        types: [ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.posttAdd(\"suppliers/\", data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"edit\":\n      console.log('data', data);\n      return {\n        types: [EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.putt(\"suppliers/\".concat(data.id), data, {\n            cols: cols\n          });\n        }\n      };\n\n    case \"delete\":\n      return {\n        types: [DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS],\n        promise: function promise(apiClient) {\n          return apiClient.deletee(\"suppliers/\".concat(data.id), {\n            cols: cols\n          });\n        },\n        data: data\n      };\n\n    default:\n      return;\n  }\n};\nexport var getBanks = function getBanks() {\n  return {\n    types: [GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett('bank/');\n    }\n  };\n};\nexport var getCurrency = function getCurrency() {\n  return {\n    types: [GET_Currency_REQUEST, GET_Currency_FAIL, GET_Currency_SUCCESS],\n    promise: function promise(apiClient) {\n      return apiClient.gett('currency/');\n    }\n  };\n};\nexport var setModalValues = function setModalValues(key, value, index, add) {\n  return {\n    type: SET_SUPPLIER_MODAL,\n    key: key,\n    value: value,\n    index: index,\n    add: add\n  };\n};\nexport var toggleModal = function toggleModal(modalType, id) {\n  var obj = {\n    \"id\": id\n  };\n  return {\n    type: TOGGLE_SUPPLIER_MODAL,\n    modalType: modalType,\n    obj: obj\n  };\n};\nexport function openSuppliersAddModal(text) {\n  var cleanSuppliers = {\n    name: '',\n    hh: '',\n    hvhh: '',\n    address: '',\n    tin: [],\n    director: '',\n    phone: [],\n    active: 0,\n    type: 0\n  };\n  var cleanValueStatus = {\n    name: false,\n    hh: false,\n    hvhh: false,\n    address: false,\n    director: false,\n    bank_id: false,\n    currency_id: false,\n    tin_value: false,\n    phone: false\n  }; // if (text === 'add') {\n  //     return {\n  //         type: SUPPLIERS_ADD_MODAL,\n  //         text,\n  //         cleanSuppliers,\n  //         cleanValueStatus\n  //     }\n  // }\n\n  return {\n    type: SUPPLIERS_OPEN_MODAL,\n    text: text,\n    cleanSuppliers: cleanSuppliers,\n    cleanValueStatus: cleanValueStatus\n  };\n}\nexport function reducePhone(index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n    var phone = setSupplier.phone;\n    phone.splice(index, 1);\n    setSupplier.phone = phone;\n    dispatch(setValues(setSupplier));\n  };\n}\nexport function addPhone(value, index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n    var phone = setSupplier.phone;\n    phone[index + 1] = value;\n    setSupplier.phone = phone;\n    dispatch(setValues(setSupplier));\n  };\n}\nexport function addTin(value, index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n    var tin = setSupplier.tin; // if (tin.length === 0) {\n    //     tin[index+1] = value;\n    // }\n\n    tin[index + 1] = value;\n    setSupplier.tin = tin;\n    dispatch(setValues(setSupplier));\n  };\n}\nexport function reduceTin(index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n    var tin = setSupplier.tin;\n    tin.splice(index, 1);\n    setSupplier.tin = tin;\n    dispatch(setValues(setSupplier));\n  };\n}\nexport function setSuppliersAddModalValue(name, value, index) {\n  return function (dispatch, getState) {\n    var setSupplier = getState().suppliers.setSupplier;\n\n    switch (name) {\n      case \"bank_id-\".concat(index):\n        {\n          name = 'bank_id';\n          var banks = getState().suppliers.banks;\n\n          if (setSupplier.tin.length === 0) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = banks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var bank = _step.value;\n\n                if (bank.id === +value) {\n                  var obj = _defineProperty({}, name, bank);\n\n                  setSupplier.tin[index] = obj;\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          } else {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = banks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var _bank = _step2.value;\n\n                if (_bank.id === +value) {\n                  if (setSupplier.tin[index]) {\n                    setSupplier.tin[index][name] = _bank;\n                  } else {\n                    setSupplier.tin[index] = _defineProperty({}, name, _bank);\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      case \"currency_id-\".concat(index):\n        {\n          name = 'currency_id';\n          var currency = getState().suppliers.currency;\n\n          if (setSupplier.tin.length === 0) {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = currency[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var item = _step3.value;\n\n                if (item.id === +value) {\n                  var _obj2 = _defineProperty({}, name, item);\n\n                  setSupplier.tin[index] = _obj2;\n                }\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          } else {\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n              for (var _iterator4 = currency[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var _item = _step4.value;\n\n                if (_item.id === +value) {\n                  if (setSupplier.tin[index]) {\n                    setSupplier.tin[index][name] = _item;\n                  } else {\n                    setSupplier.tin[index] = _defineProperty({}, name, _item);\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n          }\n\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      case \"tin_value-\".concat(index):\n        {\n          name = 'tin_value';\n\n          if (setSupplier.tin.length === 0) {\n            setSupplier.tin[index] = {\n              tin_value: value\n            };\n          } else {\n            if (setSupplier.tin[index]) {\n              setSupplier.tin[index][name] = value;\n            } else {\n              setSupplier.tin[index] = _defineProperty({}, name, value);\n            }\n          }\n\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      case \"phone-\".concat(index):\n        {\n          var phone = setSupplier.phone;\n          phone[index] = {\n            phone: value\n          };\n          setSupplier.phone = phone;\n          dispatch(setValues(setSupplier));\n          break;\n        }\n\n      default:\n        {\n          setSupplier[name] = value;\n          dispatch(setValues(setSupplier));\n          break;\n        }\n    }\n  };\n}\nexport function setValues(setSupplier) {\n  return {\n    type: SET_SUPPLIERS_VALUE,\n    setSupplier: setSupplier\n  };\n}\nexport function fetchSuppliers(data) {\n  var cleanSuppliers = {\n    name: '',\n    hh: '',\n    hvhh: '',\n    address: '',\n    tin: {\n      tin_value: '',\n      bank_id: null,\n      currency_id: null\n    },\n    director: '',\n    phone: [],\n    active: 0,\n    type: 0\n  };\n  var index = true;\n\n  for (var key in data) {\n    if (data[key].length === 0) {\n      index = false;\n    }\n  }\n\n  if (index === true) {\n    return {\n      types: [FETCH_SUPPLIER_REQUEST, FETCH_SUPPLIER_FAIL, FETCH_SUPPLIER_SUCCESS],\n      promise: function promise(apiClient) {\n        return apiClient.posttAdd(\"suppliers/\", data, {\n          cols: cols\n        });\n      },\n      cleanSuppliers: cleanSuppliers\n    };\n  }\n\n  return {\n    type: SET_ERROR\n  };\n}\nexport function searchRequisite(requisite) {\n  var axiosInstance = axios.create({\n    baseURL: 'http://new.haysell.com',\n    timeout: 5000,\n    headers: {\n      \"Accept\": \"*/*\",\n      \"Accept-Language\": \"ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,de;q=0.6,hy;q=0.5\",\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n    }\n  });\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var tin, setSupplier, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                tin = \"tin=\".concat(requisite);\n                setSupplier = getState().suppliers.setSupplier;\n                _context.prev = 2;\n                _context.next = 5;\n                return axiosInstance.post('/tools/get_tin.php', tin);\n\n              case 5:\n                response = _context.sent;\n                setSupplier.name = response.data[2];\n                setSupplier.address = response.data[3];\n                dispatch(setValues(setSupplier));\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n                console.log(_context.t0.message);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 11]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n} // export function checkValue(name, value) {\n//\n//     if (value.length === 0) {\n//         let text = 'the field must not be empty';\n//         return {\n//             type: EMPTY_VALUE,\n//             name,\n//             text\n//         }\n//     }\n//     return {\n//         type: SUCCES_VALUE,\n//         name\n//     };\n// }\n\nexport function checkValue(name, value) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var text;\n\n  switch (name) {\n    case \"bank_id-\".concat(index):\n      name = 'bank_id';\n\n      if (+value === 0) {\n        text = 'You have not chosen a bank';\n        return {\n          type: EMPTY_VALUE,\n          name: name,\n          text: text,\n          index: index\n        };\n      }\n\n      return {\n        type: SUCCES_VALUE,\n        name: name,\n        index: index\n      };\n\n    case \"currency_id-\".concat(index):\n      name = 'currency_id';\n\n      if (+value === 0) {\n        text = 'You have not chosen a currency type';\n        return {\n          type: EMPTY_VALUE,\n          name: name,\n          text: text,\n          index: index\n        };\n      }\n\n      return {\n        type: SUCCES_VALUE,\n        name: name,\n        index: index\n      };\n\n    case \"tin_value-\".concat(index):\n      name = 'tin_value';\n\n      if (value.length === 0) {\n        text = 'the field must not be empty';\n        return {\n          type: EMPTY_VALUE,\n          name: name,\n          text: text,\n          index: index\n        };\n      }\n\n      if (value.length > 0) {\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = value[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var item = _step5.value;\n\n            if (+item !== 0 && !(item / 2)) {\n              text = 'The field must not have letters or characters';\n              return {\n                type: EMPTY_VALUE,\n                name: name,\n                text: text,\n                index: index\n              };\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n      }\n\n      return {\n        type: SUCCES_VALUE,\n        name: name,\n        index: index\n      };\n\n    case \"phone-\".concat(index):\n      name = 'phone';\n\n      if (value.length === 0) {\n        text = 'the field must not be empty';\n        return {\n          type: EMPTY_VALUE,\n          name: name,\n          text: text,\n          index: index\n        };\n      }\n\n      if (value.length > 0) {\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = value[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var _item2 = _step6.value;\n\n            if (+_item2 !== 0 && !(_item2 / 2)) {\n              text = 'The field must not have letters or characters';\n              return {\n                type: EMPTY_VALUE,\n                name: name,\n                text: text,\n                index: index\n              };\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n      }\n\n      return {\n        type: SUCCES_VALUE,\n        name: name,\n        index: index\n      };\n\n    default:\n      if (value.length === 0) {\n        var _text = 'the field must not be empty';\n        return {\n          type: EMPTY_VALUE,\n          name: name,\n          text: _text\n        };\n      }\n\n      return {\n        type: SUCCES_VALUE,\n        name: name\n      };\n  }\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/suppliers/actions.js"],"names":["GET_SUPPLIERS_REQUEST","GET_SUPPLIERS_FAIL","GET_SUPPLIERS_SUCCESS","GET_SUPPLIER_REQUEST","GET_SUPPLIER_FAIL","GET_SUPPLIER_SUCCESS","ADD_SUPPLIER_REQUEST","ADD_SUPPLIER_FAIL","ADD_SUPPLIER_SUCCESS","EDIT_SUPPLIER_REQUEST","EDIT_SUPPLIER_FAIL","EDIT_SUPPLIER_SUCCESS","DELETE_SUPPLIER_REQUEST","DELETE_SUPPLIER_FAIL","DELETE_SUPPLIER_SUCCESS","GET_BANKS_REQUEST","GET_BANKS_FAIL","GET_BANKS_SUCCESS","SET_SUPPLIER_MODAL","TOGGLE_SUPPLIER_MODAL","GET_Currency_REQUEST","GET_Currency_FAIL","GET_Currency_SUCCESS","SUPPLIERS_ADD_MODAL","SET_SUPPLIERS_VALUE","FETCH_SUPPLIER_REQUEST","FETCH_SUPPLIER_FAIL","FETCH_SUPPLIER_SUCCESS","SUPPLIERS_OPEN_MODAL","SET_ERROR","EMPTY_VALUE","SUCCES_VALUE","axios","cols","supplierActions","type","data","types","promise","apiClient","gett","id","posttAdd","console","log","putt","deletee","getBanks","getCurrency","setModalValues","key","value","index","add","toggleModal","modalType","obj","openSuppliersAddModal","text","cleanSuppliers","name","hh","hvhh","address","tin","director","phone","active","cleanValueStatus","bank_id","currency_id","tin_value","reducePhone","dispatch","getState","setSupplier","suppliers","splice","setValues","addPhone","addTin","reduceTin","setSuppliersAddModalValue","banks","length","bank","currency","item","fetchSuppliers","searchRequisite","requisite","axiosInstance","create","baseURL","timeout","headers","post","response","message","checkValue"],"mappings":"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","sourcesContent":["import {\r\n    GET_SUPPLIERS_REQUEST,\r\n    GET_SUPPLIERS_FAIL,\r\n    GET_SUPPLIERS_SUCCESS,\r\n    GET_SUPPLIER_REQUEST,\r\n    GET_SUPPLIER_FAIL,\r\n    GET_SUPPLIER_SUCCESS,\r\n    ADD_SUPPLIER_REQUEST,\r\n    ADD_SUPPLIER_FAIL,\r\n    ADD_SUPPLIER_SUCCESS,\r\n    EDIT_SUPPLIER_REQUEST,\r\n    EDIT_SUPPLIER_FAIL,\r\n    EDIT_SUPPLIER_SUCCESS,\r\n    DELETE_SUPPLIER_REQUEST,\r\n    DELETE_SUPPLIER_FAIL,\r\n    DELETE_SUPPLIER_SUCCESS,\r\n    GET_BANKS_REQUEST,\r\n    GET_BANKS_FAIL,\r\n    GET_BANKS_SUCCESS,\r\n    SET_SUPPLIER_MODAL,\r\n    TOGGLE_SUPPLIER_MODAL,\r\n    GET_Currency_REQUEST,\r\n    GET_Currency_FAIL,\r\n    GET_Currency_SUCCESS,\r\n    SUPPLIERS_ADD_MODAL,\r\n    SET_SUPPLIERS_VALUE,\r\n    FETCH_SUPPLIER_REQUEST,\r\n    FETCH_SUPPLIER_FAIL,\r\n    FETCH_SUPPLIER_SUCCESS, SUPPLIERS_OPEN_MODAL, SET_ERROR, EMPTY_VALUE, SUCCES_VALUE,\r\n} from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nlet cols = 'id,name,type,hh,address,phone';\r\n\r\nexport const supplierActions = (type, data) => {\r\n    switch (type) {\r\n        case \"get\":\r\n            return {\r\n                types: [GET_SUPPLIER_REQUEST, GET_SUPPLIER_FAIL, GET_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett(`suppliers/${data.id}`, {cols})\r\n            }\r\n        case \"getAll\":\r\n            return {\r\n                types: [GET_SUPPLIERS_REQUEST, GET_SUPPLIERS_FAIL, GET_SUPPLIERS_SUCCESS],\r\n                promise: (apiClient) => apiClient.gett('suppliers/', {cols})\r\n            }\r\n        case \"add\":\r\n            data.type = 0;\r\n            return {\r\n                types: [ADD_SUPPLIER_REQUEST, ADD_SUPPLIER_FAIL, ADD_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.posttAdd(`suppliers/`, data, {cols})\r\n            }\r\n        case \"edit\":\r\n            console.log('data', data)\r\n            return {\r\n                types: [EDIT_SUPPLIER_REQUEST, EDIT_SUPPLIER_FAIL, EDIT_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.putt(`suppliers/${data.id}`, data, {cols})\r\n            }\r\n        case \"delete\":\r\n            return {\r\n                types: [DELETE_SUPPLIER_REQUEST, DELETE_SUPPLIER_FAIL, DELETE_SUPPLIER_SUCCESS],\r\n                promise: (apiClient) => apiClient.deletee(`suppliers/${data.id}`, {cols}),\r\n                data\r\n            }\r\n        default:\r\n            return;\r\n    }\r\n};\r\n\r\nexport const getBanks = () => {\r\n    return {\r\n        types: [GET_BANKS_REQUEST, GET_BANKS_FAIL, GET_BANKS_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett('bank/')\r\n    }\r\n}\r\n\r\nexport const getCurrency = () => {\r\n    return {\r\n        types: [GET_Currency_REQUEST, GET_Currency_FAIL, GET_Currency_SUCCESS],\r\n        promise: (apiClient) => apiClient.gett('currency/')\r\n    }\r\n}\r\n\r\nexport const setModalValues = (key, value, index, add) => {\r\n    return {\r\n        type: SET_SUPPLIER_MODAL,\r\n        key,\r\n        value,\r\n        index,\r\n        add\r\n    }\r\n}\r\n\r\nexport const toggleModal = (modalType, id) => {\r\n    let obj = {\"id\": id};\r\n    return {\r\n        type: TOGGLE_SUPPLIER_MODAL,\r\n        modalType,\r\n        obj\r\n    }\r\n}\r\n\r\n\r\nexport function openSuppliersAddModal(text) {\r\n    let cleanSuppliers = {\r\n        name: '',\r\n        hh: '',\r\n        hvhh: '',\r\n        address: '',\r\n        tin: [],\r\n        director: '',\r\n        phone: [],\r\n        active: 0,\r\n        type: 0\r\n    }\r\n    let cleanValueStatus = {\r\n        name: false,\r\n        hh: false,\r\n        hvhh: false,\r\n        address: false,\r\n        director: false,\r\n        bank_id: false,\r\n        currency_id: false,\r\n        tin_value: false,\r\n        phone: false\r\n    }\r\n    // if (text === 'add') {\r\n    //     return {\r\n    //         type: SUPPLIERS_ADD_MODAL,\r\n    //         text,\r\n    //         cleanSuppliers,\r\n    //         cleanValueStatus\r\n    //     }\r\n    // }\r\n    return {\r\n        type: SUPPLIERS_OPEN_MODAL,\r\n        text,\r\n        cleanSuppliers,\r\n        cleanValueStatus\r\n    }\r\n}\r\n\r\nexport function reducePhone(index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        let phone = setSupplier.phone\r\n        phone.splice(index, 1);\r\n        setSupplier.phone = phone;\r\n        dispatch(setValues(setSupplier))\r\n    }\r\n}\r\n\r\nexport function addPhone(value, index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        let phone = setSupplier.phone\r\n        phone[index + 1] = value;\r\n        setSupplier.phone = phone;\r\n        dispatch(setValues(setSupplier))\r\n    }\r\n}\r\n\r\nexport function addTin(value, index) {\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        let tin = setSupplier.tin;\r\n        // if (tin.length === 0) {\r\n        //     tin[index+1] = value;\r\n        // }\r\n        tin[index + 1] = value;\r\n        setSupplier.tin = tin;\r\n        dispatch(setValues(setSupplier))\r\n    }\r\n}\r\n\r\nexport function reduceTin(index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        let tin = setSupplier.tin\r\n        tin.splice(index, 1);\r\n        setSupplier.tin = tin;\r\n        dispatch(setValues(setSupplier))\r\n    }\r\n}\r\n\r\nexport function setSuppliersAddModalValue(name, value, index) {\r\n\r\n    return (dispatch, getState) => {\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        switch (name) {\r\n            case `bank_id-${index}`: {\r\n                name = 'bank_id';\r\n                let banks = getState().suppliers.banks;\r\n                if (setSupplier.tin.length === 0) {\r\n                    for (let bank of banks) {\r\n                        if (bank.id === +value) {\r\n                            let obj = {\r\n                                [name]: bank,\r\n                            }\r\n                            setSupplier.tin[index] = obj;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let bank of banks) {\r\n                        if (bank.id === +value) {\r\n                            if (setSupplier.tin[index]) {\r\n                                setSupplier.tin[index][name] = bank;\r\n                            } else {\r\n                                setSupplier.tin[index] = {[name]: bank}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n            case `currency_id-${index}`: {\r\n                name = 'currency_id';\r\n                let currency = getState().suppliers.currency;\r\n                if (setSupplier.tin.length === 0) {\r\n                    for (let item of currency) {\r\n                        if (item.id === +value) {\r\n                            let obj = {\r\n                                [name]: item\r\n                            }\r\n                            setSupplier.tin[index] = obj\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let item of currency) {\r\n                        if (item.id === +value) {\r\n                            if (setSupplier.tin[index]) {\r\n                                setSupplier.tin[index][name] = item;\r\n                            } else {\r\n                                setSupplier.tin[index] = {[name]: item}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n            case `tin_value-${index}`: {\r\n                name = 'tin_value';\r\n                if (setSupplier.tin.length === 0) {\r\n                    setSupplier.tin[index] = {tin_value: value}\r\n                } else {\r\n                    if (setSupplier.tin[index]) {\r\n                        setSupplier.tin[index][name] = value;\r\n                    } else {\r\n                        setSupplier.tin[index] = {[name]: value}\r\n                    }\r\n                }\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n            case `phone-${index}`: {\r\n\r\n                let phone = setSupplier.phone;\r\n                phone[index] = {phone: value}\r\n                setSupplier.phone = (phone);\r\n                dispatch(setValues(setSupplier));\r\n                break;\r\n            }\r\n            default: {\r\n\r\n                setSupplier[name] = value;\r\n                dispatch(setValues(setSupplier))\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function setValues(setSupplier) {\r\n\r\n    return {\r\n        type: SET_SUPPLIERS_VALUE,\r\n        setSupplier\r\n    }\r\n}\r\n\r\nexport function fetchSuppliers(data) {\r\n    let cleanSuppliers = {\r\n        name: '',\r\n        hh: '',\r\n        hvhh: '',\r\n        address: '',\r\n        tin: {\r\n            tin_value: '',\r\n            bank_id: null,\r\n            currency_id: null\r\n        },\r\n        director: '',\r\n        phone: [],\r\n        active: 0,\r\n        type: 0\r\n    }\r\n    let index = true;\r\n    for (let key in data) {\r\n        if (data[key].length === 0) {\r\n            index = false\r\n        }\r\n    }\r\n\r\n    if (index === true) {\r\n        return {\r\n            types: [FETCH_SUPPLIER_REQUEST, FETCH_SUPPLIER_FAIL, FETCH_SUPPLIER_SUCCESS],\r\n            promise: (apiClient) => apiClient.posttAdd(`suppliers/`, data, {cols}),\r\n            cleanSuppliers\r\n        }\r\n    }\r\n    return {\r\n        type: SET_ERROR\r\n    }\r\n\r\n}\r\n\r\nexport function searchRequisite(requisite) {\r\n    const axiosInstance = axios.create({\r\n        baseURL: 'http://new.haysell.com',\r\n        timeout: 5000,\r\n        headers: {\r\n            \"Accept\": \"*/*\",\r\n            \"Accept-Language\": \"ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,de;q=0.6,hy;q=0.5\",\r\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\r\n        }\r\n    });\r\n    return async (dispatch, getState) => {\r\n        let tin = `tin=${requisite}`;\r\n        let setSupplier = getState().suppliers.setSupplier;\r\n        try {\r\n            const response = await axiosInstance.post('/tools/get_tin.php', tin);\r\n            setSupplier.name = response.data[2];\r\n            setSupplier.address = response.data[3]\r\n            dispatch(setValues(setSupplier))\r\n\r\n        } catch (error) {\r\n            console.log(error.message)\r\n        }\r\n    }\r\n}\r\n\r\n// export function checkValue(name, value) {\r\n//\r\n//     if (value.length === 0) {\r\n//         let text = 'the field must not be empty';\r\n//         return {\r\n//             type: EMPTY_VALUE,\r\n//             name,\r\n//             text\r\n//         }\r\n//     }\r\n//     return {\r\n//         type: SUCCES_VALUE,\r\n//         name\r\n//     };\r\n// }\r\n\r\nexport function checkValue(name, value, index = false) {\r\n    let text;\r\n    switch (name) {\r\n\r\n        case `bank_id-${index}`:\r\n            name = 'bank_id';\r\n            if (+value === 0) {\r\n                text = 'You have not chosen a bank';\r\n                return {\r\n                    type: EMPTY_VALUE,\r\n                    name,\r\n                    text,\r\n                    index\r\n                }\r\n            }\r\n            return {\r\n                type: SUCCES_VALUE,\r\n                name,\r\n                index\r\n            }\r\n        case `currency_id-${index}`:\r\n            name = 'currency_id';\r\n            if (+value === 0) {\r\n                text = 'You have not chosen a currency type';\r\n                return {\r\n                    type: EMPTY_VALUE,\r\n                    name,\r\n                    text,\r\n                    index\r\n                }\r\n            }\r\n            return {\r\n                type: SUCCES_VALUE,\r\n                name,\r\n                index\r\n            }\r\n        case `tin_value-${index}`:\r\n            name = 'tin_value';\r\n            if (value.length === 0) {\r\n                text = 'the field must not be empty';\r\n                return {\r\n                    type: EMPTY_VALUE,\r\n                    name,\r\n                    text,\r\n                    index\r\n                }\r\n            }\r\n            if (value.length > 0) {\r\n                for (let item of value) {\r\n                    if (+item !== 0 && !(item / 2)) {\r\n                        text = 'The field must not have letters or characters';\r\n                        return {\r\n                            type: EMPTY_VALUE,\r\n                            name,\r\n                            text,\r\n                            index\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                type: SUCCES_VALUE,\r\n                name,\r\n                index\r\n            }\r\n        case `phone-${index}`:\r\n            name = 'phone';\r\n            if (value.length === 0) {\r\n                text = 'the field must not be empty';\r\n                return {\r\n                    type: EMPTY_VALUE,\r\n                    name,\r\n                    text,\r\n                    index\r\n                }\r\n            }\r\n            if (value.length > 0) {\r\n                for (let item of value) {\r\n                    if (+item !== 0 && !(item / 2)) {\r\n                        text = 'The field must not have letters or characters';\r\n                        return {\r\n                            type: EMPTY_VALUE,\r\n                            name,\r\n                            text,\r\n                            index\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                type: SUCCES_VALUE,\r\n                name,\r\n                index\r\n            }\r\n        default:\r\n            if (value.length === 0) {\r\n                let text = 'the field must not be empty';\r\n                return {\r\n                    type: EMPTY_VALUE,\r\n                    name,\r\n                    text\r\n                }\r\n            }\r\n            return {\r\n                type: SUCCES_VALUE,\r\n                name\r\n            };\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}