{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\Translate.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations, checkTranslation } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\n\nvar Translate = function Translate(props) {\n  console.log('translations', props.translations);\n\n  var contentRender = function contentRender(name) {// if (name !== undefined) {\n    //     if (props.translations !== false) {\n    //         for (let item of props.translations) {\n    //             if (item.key === name.toLowerCase()) {\n    //                 return item.value\n    //             }\n    //         }\n    //         props.checkTranslation({\n    //             key: name.toLowerCase(),\n    //             value: name,\n    //             language: SessionStorage.get('lang') || \"am\"\n    //         })\n    //         return name;\n    //     } else {\n    //         return name\n    //     }\n    // }\n  };\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, contentRender(props.name));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations,\n    checkTranslation: checkTranslation\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations,\n    status: state.languages.status\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","connect","bindActionCreators","setTranslations","checkTranslation","SessionStorage","Translate","props","console","log","translations","contentRender","name","mapDispatchToProps","dispatch","mapStateToProps","state","languages","status"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,eAAR,EAAyBC,gBAAzB,QAAgD,sBAAhD;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,KAAK,CAACG,YAAlC;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI,CAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAlBD;;AAmBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSD,aAAa,CAACJ,KAAK,CAACK,IAAP,CADtB,CADJ;AAMH,CA3BD;;AA6BA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAOZ,kBAAkB,CACrB;AACIC,IAAAA,eAAe,EAAfA,eADJ;AAEIC,IAAAA,gBAAgB,EAAhBA;AAFJ,GADqB,EAKrBU,QALqB,CAAzB;AAOH,CARD;;AAUA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHN,IAAAA,YAAY,EAAEM,KAAK,CAACC,SAAN,CAAgBP,YAD3B;AAEHQ,IAAAA,MAAM,EAAEF,KAAK,CAACC,SAAN,CAAgBC;AAFrB,GAAP;AAIH,CALD;;AAOA,eAAejB,OAAO,CAACc,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CP,SAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations, checkTranslation} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\n\r\nconst Translate = props => {\r\n    console.log('translations', props.translations)\r\n    const contentRender = name => {\r\n        // if (name !== undefined) {\r\n        //     if (props.translations !== false) {\r\n        //         for (let item of props.translations) {\r\n        //             if (item.key === name.toLowerCase()) {\r\n        //                 return item.value\r\n        //             }\r\n        //         }\r\n        //         props.checkTranslation({\r\n        //             key: name.toLowerCase(),\r\n        //             value: name,\r\n        //             language: SessionStorage.get('lang') || \"am\"\r\n        //         })\r\n        //         return name;\r\n        //     } else {\r\n        //         return name\r\n        //     }\r\n        // }\r\n    }\r\n    return (\r\n        <span>\r\n                {contentRender(props.name)}\r\n        </span>\r\n    );\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations,\r\n            checkTranslation\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n        status: state.languages.status\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}