{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS, GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS, ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS, EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS, DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS, GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS, ADD_BARCODE, DELETE_BARCODE, SET_PRODUCT_MODAL, TOGGLE_PRODUCT_MODAL, SET_BARCODE } from \"./actionTypes\";\nimport { Pushend\n/*IsRequiredFields,*/\n, Remove } from \"../../utility/utils\";\nvar INIT_STATE = {\n  products: [],\n  product: {},\n  barcodeTypes: [],\n  modal: {},\n  loading: false,\n  success: false,\n  fail: false,\n  errors: {},\n  types: [{\n    id: 0,\n    name: 'EAN-13'\n  }, {\n    id: 1,\n    name: 'EAN-8'\n  }, {\n    id: 2,\n    name: \"EAN-5\"\n  }, {\n    id: 3,\n    name: \"CODE128\"\n  }]\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_BARCODE:\n      return _objectSpread({}, state, {\n        product: action.product\n      });\n\n    case GET_PRODUCTS_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: {}\n      });\n\n    case GET_PRODUCTS_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case GET_PRODUCTS_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        products: action.result.results,\n        errors: {}\n      });\n\n    case GET_PRODUCT_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: {}\n      });\n\n    case GET_PRODUCT_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case GET_PRODUCT_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        product: action.result,\n        errors: {}\n      });\n\n    case GET_BARCODE_TYPES_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false,\n        errors: {}\n      });\n\n    case GET_BARCODE_TYPES_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case GET_BARCODE_TYPES_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        barcodeTypes: JSON.parse(action.result.data),\n        errors: {}\n      });\n\n    case ADD_PRODUCT_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false\n      });\n\n    case ADD_PRODUCT_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case ADD_PRODUCT_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: false,\n        products: Pushend(state.products, action.result),\n        product: {}\n      });\n\n    case EDIT_PRODUCT_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false\n      });\n\n    case EDIT_PRODUCT_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case EDIT_PRODUCT_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: false,\n        product: {},\n        products: JSON.parse(action.result.data)\n      });\n\n    case DELETE_PRODUCT_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true,\n        success: false,\n        fail: false\n      });\n\n    case DELETE_PRODUCT_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: false,\n        fail: true\n      });\n\n    case DELETE_PRODUCT_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        success: true,\n        fail: false,\n        modal: false,\n        product: {},\n        products: Remove(state.products, action.data, 'id')\n      });\n\n    case SET_PRODUCT_MODAL:\n      state.product[action.key] = action.value;\n      return _objectSpread({}, state);\n\n    case ADD_BARCODE:\n      if (!state.product.barcode) {\n        state.product.barcode = [];\n      }\n\n      state.product.barcode.push(_objectSpread({}, action.code));\n      return _objectSpread({}, state);\n\n    case DELETE_BARCODE:\n      state.product.barcode = Remove(state.product.barcode, {\n        barcode: action.code\n      }, 'barcode');\n      return _objectSpread({}, state);\n\n    case TOGGLE_PRODUCT_MODAL:\n      var newModal = {};\n      newModal[action.modalType] = !state.modal[action.modalType];\n      var product = action.modalType === \"edit\" ? _objectSpread({}, state.product, action.obj) : _objectSpread({}, action.obj);\n      return _objectSpread({}, state, {\n        modal: _objectSpread({}, state.modal, newModal),\n        product: product\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n});","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/redux/products/reducer.js"],"names":["GET_PRODUCTS_REQUEST","GET_PRODUCTS_FAIL","GET_PRODUCTS_SUCCESS","GET_PRODUCT_REQUEST","GET_PRODUCT_FAIL","GET_PRODUCT_SUCCESS","ADD_PRODUCT_REQUEST","ADD_PRODUCT_FAIL","ADD_PRODUCT_SUCCESS","EDIT_PRODUCT_REQUEST","EDIT_PRODUCT_FAIL","EDIT_PRODUCT_SUCCESS","DELETE_PRODUCT_REQUEST","DELETE_PRODUCT_FAIL","DELETE_PRODUCT_SUCCESS","GET_BARCODE_TYPES_REQUEST","GET_BARCODE_TYPES_FAIL","GET_BARCODE_TYPES_SUCCESS","ADD_BARCODE","DELETE_BARCODE","SET_PRODUCT_MODAL","TOGGLE_PRODUCT_MODAL","SET_BARCODE","Pushend","Remove","INIT_STATE","products","product","barcodeTypes","modal","loading","success","fail","errors","types","id","name","state","action","type","result","results","JSON","parse","data","key","value","barcode","push","code","newModal","modalType","obj"],"mappings":"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","sourcesContent":["import {\r\n    GET_PRODUCTS_REQUEST, GET_PRODUCTS_FAIL, GET_PRODUCTS_SUCCESS,\r\n    GET_PRODUCT_REQUEST, GET_PRODUCT_FAIL, GET_PRODUCT_SUCCESS,\r\n    ADD_PRODUCT_REQUEST, ADD_PRODUCT_FAIL, ADD_PRODUCT_SUCCESS,\r\n    EDIT_PRODUCT_REQUEST, EDIT_PRODUCT_FAIL, EDIT_PRODUCT_SUCCESS,\r\n    DELETE_PRODUCT_REQUEST, DELETE_PRODUCT_FAIL, DELETE_PRODUCT_SUCCESS,\r\n    GET_BARCODE_TYPES_REQUEST, GET_BARCODE_TYPES_FAIL, GET_BARCODE_TYPES_SUCCESS,\r\n    ADD_BARCODE, DELETE_BARCODE,\r\n    SET_PRODUCT_MODAL, TOGGLE_PRODUCT_MODAL, SET_BARCODE\r\n} from \"./actionTypes\";\r\nimport {Pushend,/*IsRequiredFields,*/Remove} from \"../../utility/utils\";\r\n\r\n\r\nconst INIT_STATE = {\r\n    products: [],\r\n    product: {},\r\n    barcodeTypes: [],\r\n    modal: {},\r\n    loading: false,\r\n    success: false,\r\n    fail: false,\r\n    errors: {},\r\n    types: [\r\n        {id: 0, name: 'EAN-13'},\r\n        {id: 1, name: 'EAN-8'},\r\n        {id: 2, name: \"EAN-5\"},\r\n        {id: 3, name: \"CODE128\"},\r\n    ]\r\n};\r\n\r\nexport default (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        case SET_BARCODE:\r\n            return {\r\n                ...state,\r\n                product: action.product\r\n            }\r\n        case GET_PRODUCTS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: {},\r\n            };\r\n        case GET_PRODUCTS_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n            };\r\n        case GET_PRODUCTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                products: action.result.results,\r\n                errors: {},\r\n            };\r\n        case GET_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: {},\r\n            };\r\n        case GET_PRODUCT_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n            };\r\n        case GET_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                product: action.result,\r\n                errors: {},\r\n            };\r\n        case GET_BARCODE_TYPES_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n                errors: {},\r\n            };\r\n        case GET_BARCODE_TYPES_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n            };\r\n        case GET_BARCODE_TYPES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                barcodeTypes: JSON.parse(action.result.data),\r\n                errors: {},\r\n            };\r\n        case ADD_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n            }\r\n        case ADD_PRODUCT_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case ADD_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal: false,\r\n                products: Pushend(state.products, action.result),\r\n                product: {}\r\n            };\r\n        case EDIT_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n            }\r\n        case EDIT_PRODUCT_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case EDIT_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal: false,\r\n                product: {},\r\n                products: JSON.parse(action.result.data)\r\n            };\r\n        case DELETE_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                success: false,\r\n                fail: false,\r\n            }\r\n        case DELETE_PRODUCT_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: false,\r\n                fail: true,\r\n\r\n            };\r\n        case DELETE_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                success: true,\r\n                fail: false,\r\n                modal: false,\r\n                product: {},\r\n                products: Remove(state.products, action.data, 'id')\r\n            };\r\n        case SET_PRODUCT_MODAL:\r\n            state.product[action.key] = action.value\r\n            return {\r\n                ...state,\r\n            }\r\n        case ADD_BARCODE:\r\n            if(!state.product.barcode){\r\n                state.product.barcode=[];\r\n            }\r\n            state.product.barcode.push({...action.code})\r\n            return {\r\n                ...state,\r\n            }\r\n        case DELETE_BARCODE:\r\n            state.product.barcode=Remove(state.product.barcode,{barcode:action.code},'barcode')\r\n            return {\r\n                ...state,\r\n            }\r\n        case TOGGLE_PRODUCT_MODAL:\r\n            let newModal = {};\r\n            newModal[action.modalType] = !state.modal[action.modalType];\r\n            let product = (action.modalType===\"edit\")?{\r\n                ...state.product,\r\n                ...action.obj\r\n            }:{\r\n                ...action.obj\r\n            }\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    ...state.modal,\r\n                    ...newModal\r\n                },\r\n                product\r\n            }\r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}