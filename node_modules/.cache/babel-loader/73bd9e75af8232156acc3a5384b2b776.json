{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\Translate.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations, checkTranslation, getTranslations } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\n\nvar Translate = function Translate(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      tranlsate = _useState2[0],\n      setTranslate = _useState2[1];\n\n  useEffect(function () {\n    props.getTranslations();\n    setTranslate(props.translations);\n  }, []);\n  console.log(tranlsate);\n\n  var contentRender = function contentRender(name) {\n    if (name !== undefined && tranlsate !== false) {\n      if (\n      /*tranlsate !== false*/\n      tranlsate.length > 0) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = tranlsate[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.key === name.toLowerCase()) {\n              return item.value;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        props.checkTranslation({\n          key: name.toLowerCase(),\n          value: name,\n          language: SessionStorage.get('lang') || \"am\"\n        });\n        return name;\n      } else {\n        props.checkTranslation({\n          key: name.toLowerCase(),\n          value: name,\n          language: SessionStorage.get('lang') || \"am\"\n        });\n        return name;\n      }\n    }\n  };\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, contentRender(props.name));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations,\n    checkTranslation: checkTranslation,\n    getTranslations: getTranslations\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations,\n    status: state.languages.status\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","useEffect","useState","connect","bindActionCreators","setTranslations","checkTranslation","getTranslations","SessionStorage","Translate","props","tranlsate","setTranslate","translations","console","log","contentRender","name","undefined","length","item","key","toLowerCase","value","language","get","mapDispatchToProps","dispatch","mapStateToProps","state","languages","status"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,eAAR,EAAyBC,gBAAzB,EAA2CC,eAA3C,QAAiE,sBAAjE;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAAA,kBACWR,QAAQ,CAAC,KAAD,CADnB;AAAA;AAAA,MAChBS,SADgB;AAAA,MACLC,YADK;;AAGvBX,EAAAA,SAAS,CACL,YAAM;AACFS,IAAAA,KAAK,CAACH,eAAN;AACAK,IAAAA,YAAY,CAACF,KAAK,CAACG,YAAP,CAAZ;AACH,GAJI,EAIF,EAJE,CAAT;AAMJC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;;AAEI,MAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI;AAC1B,QAAIA,IAAI,KAAKC,SAAT,IAAsBP,SAAS,KAAK,KAAxC,EAA+C;AAC3C;AAAI;AAAuBA,MAAAA,SAAS,CAACQ,MAAV,GAAmB,CAA9C,EAAiD;AAAA;AAAA;AAAA;;AAAA;AAC7C,+BAAiBR,SAAjB,8HAA4B;AAAA,gBAAnBS,IAAmB;;AACxB,gBAAIA,IAAI,CAACC,GAAL,KAAaJ,IAAI,CAACK,WAAL,EAAjB,EAAqC;AACjC,qBAAOF,IAAI,CAACG,KAAZ;AACH;AACJ;AAL4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM7Cb,QAAAA,KAAK,CAACJ,gBAAN,CAAuB;AACnBe,UAAAA,GAAG,EAAEJ,IAAI,CAACK,WAAL,EADc;AAEnBC,UAAAA,KAAK,EAAEN,IAFY;AAGnBO,UAAAA,QAAQ,EAAEhB,cAAc,CAACiB,GAAf,CAAmB,MAAnB,KAA8B;AAHrB,SAAvB;AAKA,eAAOR,IAAP;AACH,OAZD,MAYO;AACHP,QAAAA,KAAK,CAACJ,gBAAN,CAAuB;AACnBe,UAAAA,GAAG,EAAEJ,IAAI,CAACK,WAAL,EADc;AAEnBC,UAAAA,KAAK,EAAEN,IAFY;AAGnBO,UAAAA,QAAQ,EAAEhB,cAAc,CAACiB,GAAf,CAAmB,MAAnB,KAA8B;AAHrB,SAAvB;AAKA,eAAOR,IAAP;AACH;AACJ;AACJ,GAvBD;;AAwBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSD,aAAa,CAACN,KAAK,CAACO,IAAP,CADtB,CADJ;AAMH,CAzCD;;AA2CA,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAOvB,kBAAkB,CACrB;AACIC,IAAAA,eAAe,EAAfA,eADJ;AAEIC,IAAAA,gBAAgB,EAAhBA,gBAFJ;AAGIC,IAAAA,eAAe,EAAfA;AAHJ,GADqB,EAMrBoB,QANqB,CAAzB;AAQH,CATD;;AAWA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHhB,IAAAA,YAAY,EAAEgB,KAAK,CAACC,SAAN,CAAgBjB,YAD3B;AAEHkB,IAAAA,MAAM,EAAEF,KAAK,CAACC,SAAN,CAAgBC;AAFrB,GAAP;AAIH,CALD;;AAOA,eAAe5B,OAAO,CAACyB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CjB,SAA7C,CAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations, checkTranslation, getTranslations} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\n\r\nconst Translate = props => {\r\n    const [tranlsate, setTranslate] = useState(false)\r\n\r\n    useEffect(\r\n        () => {\r\n            props.getTranslations()\r\n            setTranslate(props.translations)\r\n        }, []\r\n    )\r\nconsole.log(tranlsate);\r\n\r\n    const contentRender = name => {\r\n        if (name !== undefined && tranlsate !== false) {\r\n            if (/*tranlsate !== false*/tranlsate.length > 0) {\r\n                for (let item of tranlsate) {\r\n                    if (item.key === name.toLowerCase()) {\r\n                        return item.value\r\n                    }\r\n                }\r\n                props.checkTranslation({\r\n                    key: name.toLowerCase(),\r\n                    value: name,\r\n                    language: SessionStorage.get('lang') || \"am\"\r\n                })\r\n                return name;\r\n            } else {\r\n                props.checkTranslation({\r\n                    key: name.toLowerCase(),\r\n                    value: name,\r\n                    language: SessionStorage.get('lang') || \"am\"\r\n                })\r\n                return name\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <span>\r\n                {contentRender(props.name)}\r\n        </span>\r\n    );\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations,\r\n            checkTranslation,\r\n            getTranslations\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n        status: state.languages.status\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}