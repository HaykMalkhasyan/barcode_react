{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\Translate.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setTranslations, checkTranslation } from './redux/lang/actions';\nimport SessionStorage from \"./services/SessionStorage\";\n\nvar Translate = function Translate(props) {\n  var contentRender = function contentRender(name) {\n    if (name !== undefined) {\n      if (props.translations !== false) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = props.translations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.key === name.toLowerCase()) {\n              return item.value;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        props.checkTranslation({\n          key: name.toLowerCase(),\n          value: name,\n          language: SessionStorage.get('lang') || \"am\"\n        });\n        return name;\n      } else {\n        return name;\n      }\n    }\n  };\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, contentRender(props.name));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    setTranslations: setTranslations,\n    checkTranslation: checkTranslation\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    translations: state.languages.translations,\n    status: state.languages.status\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/Translate.js"],"names":["React","connect","bindActionCreators","setTranslations","checkTranslation","SessionStorage","Translate","props","contentRender","name","undefined","translations","item","key","toLowerCase","value","language","get","mapDispatchToProps","dispatch","mapStateToProps","state","languages","status"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,eAAR,EAAyBC,gBAAzB,QAAgD,sBAAhD;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAEvB,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI;AAC1B,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,UAAIH,KAAK,CAACI,YAAN,KAAuB,KAA3B,EAAkC;AAAA;AAAA;AAAA;;AAAA;AAC9B,+BAAiBJ,KAAK,CAACI,YAAvB,8HAAqC;AAAA,gBAA5BC,IAA4B;;AACjC,gBAAIA,IAAI,CAACC,GAAL,KAAaJ,IAAI,CAACK,WAAL,EAAjB,EAAqC;AACjC,qBAAOF,IAAI,CAACG,KAAZ;AACH;AACJ;AAL6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM9BR,QAAAA,KAAK,CAACH,gBAAN,CAAuB;AACnBS,UAAAA,GAAG,EAAEJ,IAAI,CAACK,WAAL,EADc;AAEnBC,UAAAA,KAAK,EAAEN,IAFY;AAGnBO,UAAAA,QAAQ,EAAEX,cAAc,CAACY,GAAf,CAAmB,MAAnB,KAA8B;AAHrB,SAAvB;AAKA,eAAOR,IAAP;AACH,OAZD,MAYO;AACH,eAAOA,IAAP;AACH;AACJ;AACJ,GAlBD;;AAmBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSD,aAAa,CAACD,KAAK,CAACE,IAAP,CADtB,CADJ;AAMH,CA3BD;;AA6BA,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAOjB,kBAAkB,CACrB;AACIC,IAAAA,eAAe,EAAfA,eADJ;AAEIC,IAAAA,gBAAgB,EAAhBA;AAFJ,GADqB,EAKrBe,QALqB,CAAzB;AAOH,CARD;;AAUA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHV,IAAAA,YAAY,EAAEU,KAAK,CAACC,SAAN,CAAgBX,YAD3B;AAEHY,IAAAA,MAAM,EAAEF,KAAK,CAACC,SAAN,CAAgBC;AAFrB,GAAP;AAIH,CALD;;AAOA,eAAetB,OAAO,CAACmB,eAAD,EAAkBF,kBAAlB,CAAP,CAA6CZ,SAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {setTranslations, checkTranslation} from './redux/lang/actions'\r\nimport SessionStorage from \"./services/SessionStorage\";\r\n\r\n\r\nconst Translate = props => {\r\n\r\n    const contentRender = name => {\r\n        if (name !== undefined) {\r\n            if (props.translations !== false) {\r\n                for (let item of props.translations) {\r\n                    if (item.key === name.toLowerCase()) {\r\n                        return item.value\r\n                    }\r\n                }\r\n                props.checkTranslation({\r\n                    key: name.toLowerCase(),\r\n                    value: name,\r\n                    language: SessionStorage.get('lang') || \"am\"\r\n                })\r\n                return name;\r\n            } else {\r\n                return name\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <span>\r\n                {contentRender(props.name)}\r\n        </span>\r\n    );\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {\r\n            setTranslations,\r\n            checkTranslation\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        translations: state.languages.translations,\r\n        status: state.languages.status\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Translate);"]},"metadata":{},"sourceType":"module"}