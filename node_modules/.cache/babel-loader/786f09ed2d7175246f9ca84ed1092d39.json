{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\barcode\\\\src\\\\containers\\\\pages\\\\users\\\\userModal.js\";\nimport React, { useState } from \"react\";\nimport { Col, Row, FormGroup, Label, Button, ModalBody, ModalFooter, Input, Modal, ModalHeader } from \"reactstrap\";\nimport Translate from \"../../../Translate\"; // import jwt from \"jwt-simple\";\n\nvar UserModal = function UserModal(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var modalBodyContent = function modalBodyContent() {\n    if (props.type === \"delete\") {\n      return React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"form-control  \".concat(props.errors.username ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"username\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"username\", event.target.value);\n        },\n        value: props.user.username ? props.user.username : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: 'Դուք համոզված ե՞ք ջնջել',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"firstName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"firstname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(props.errors.first_name ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"firstName\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"first_name\", event.target.value);\n        },\n        value: props.user.first_name ? props.user.first_name : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"lastName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"lastname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(props.errors.last_name ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"lastName\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"last_name\", event.target.value);\n        },\n        value: props.user.last_name ? props.user.last_name : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 || !event.target.value.includes('@') && !event.target.value.includes('.') ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(props.errors.email ? 'is-invalid' : ''),\n        type: \"email\",\n        id: \"email\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"email\", event.target.value);\n        },\n        value: props.user.email ? props.user.email : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"company\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"company\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"form-control  \".concat(props.errors.company_id ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"company\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"company_id\", event.target.value);\n        },\n        value: props.user.company_id ? props.user.company_id : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        onBlur: function onBlur(event) {\n          return event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        },\n        className: \"form-control  \".concat(props.errors.username ? 'is-invalid' : ''),\n        type: \"text\",\n        id: \"username\",\n        onChange: function onChange(event) {\n          return props.setModalValues(\"username\", event.target.value);\n        },\n        value: props.user.username ? props.user.username : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        style: {\n          borderColor: status\n        },\n        className: \"form-control  \".concat(props.errors.password ? 'is-invalid' : ''),\n        type: \"password\",\n        id: \"password\",\n        onBlur: function onBlur(event) {\n          return event.target.value.length < 6 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = '';\n        } // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\");\n        } // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\n        ,\n        value: props.user.password ? props.user.password : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"position\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"positions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      })), React.createElement(Input, {\n        type: \"select\",\n        id: \"position\",\n        value: props.user.position_id || \"0\" // defaultValue={\"0\"}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"position_id\", event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"\\u0538\\u0576\\u057F\\u0580\\u0565\\u056C\"), props.positions.map(function (item, key) {\n        return React.createElement(\"option\", {\n          value: item.id,\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, item.name);\n      })))), React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        name: \"active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })), React.createElement(Input, {\n        type: \"select\",\n        id: \"active\",\n        value: props.user.active || \"0\" // defaultValue={\"0\"}\n        ,\n        onChange: function onChange(event) {\n          return props.setModalValues(\"active\", event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"\\u0531\\u0575\\u0578\"), React.createElement(\"option\", {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"\\u0548\\u0579\")))))));\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    isOpen: props.modal[props.type],\n    toggle: function toggle() {\n      props.toggleModal(props.type);\n    },\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: function toggle() {\n      props.toggleModal(props.type);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: props.type + \"User\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  })), modalBodyContent(), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    outline: true,\n    type: \"submit\",\n    onClick: function onClick() {\n      if (props.typ !== 'delete' && props.user.first_name && props.user.first_name.length && props.user.last_name && props.user.last_name.length && props.user.email && props.user.email.length && props.user.username && props.user.username.length && props.user.password && props.user.password.length) {\n        setStatus('');\n        props.userActions(props.type, props.user);\n      } else {\n        setStatus('#f44');\n      }\n\n      if (props.type === 'delete') {\n        props.userActions(props.type, props.user);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(Translate, {\n    name: \"confirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  })))));\n};\n\nexport default UserModal;","map":{"version":3,"sources":["C:/Users/User/Desktop/barcode/src/containers/pages/users/userModal.js"],"names":["React","useState","Col","Row","FormGroup","Label","Button","ModalBody","ModalFooter","Input","Modal","ModalHeader","Translate","UserModal","props","status","setStatus","modalBodyContent","type","errors","username","event","setModalValues","target","value","user","borderColor","length","style","first_name","last_name","includes","email","company_id","password","position_id","positions","map","item","key","id","name","active","modal","toggleModal","typ","userActions"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {\r\n    Col,\r\n    Row,\r\n    FormGroup,\r\n    Label,\r\n    Button,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Input,\r\n    Modal,\r\n    ModalHeader\r\n} from \"reactstrap\";\r\nimport Translate from \"../../../Translate\";\r\n// import jwt from \"jwt-simple\";\r\n\r\nconst UserModal = (props) => {\r\n    const [status,setStatus] = useState('')\r\n    const modalBodyContent = () => {\r\n        if (props.type === \"delete\") {\r\n            return (\r\n                <ModalBody>\r\n                    <FormGroup>\r\n                        <Label for=\"username\"><Translate name=\"username\"/></Label>\r\n                        <input\r\n                            className={`form-control  ${props.errors.username ? 'is-invalid' : ''}`}\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            onChange={event => props.setModalValues(\"username\", event.target.value)}\r\n                            value={props.user.username ? props.user.username : \"\"}\r\n\r\n                        />\r\n                    </FormGroup>\r\n                    <p>\r\n                        <Translate name={'Դուք համոզված ե՞ք ջնջել'}/>\r\n                    </p>\r\n                </ModalBody>\r\n            )\r\n        } else {\r\n\r\n            return (\r\n\r\n                <ModalBody>\r\n                    <form>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"firstName\"><Translate name=\"firstname\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        onBlur={event => event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${props.errors.first_name ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"firstName\"\r\n                                        onChange={event => props.setModalValues(\"first_name\", event.target.value)}\r\n                                        value={props.user.first_name ? props.user.first_name : ''}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"lastName\"><Translate name=\"lastname\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        onBlur={event => event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${props.errors.last_name ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"lastName\"\r\n                                        onChange={event => props.setModalValues(\"last_name\", event.target.value)}\r\n                                        value={props.user.last_name ? props.user.last_name : \"\"}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"email\"><Translate name=\"email\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        onBlur={event => event.target.value.length === 0 || (!event.target.value.includes('@') && !event.target.value.includes('.')) ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${props.errors.email ? 'is-invalid' : ''}`}\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        onChange={event => props.setModalValues(\"email\", event.target.value)}\r\n                                        value={props.user.email ? props.user.email : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"company\"><Translate name=\"company\"/></Label>\r\n                                    <input\r\n                                        className={`form-control  ${props.errors.company_id ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"company\"\r\n                                        onChange={event => props.setModalValues(\"company_id\", event.target.value)}\r\n                                        value={props.user.company_id ? props.user.company_id : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"username\"><Translate name=\"username\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        onBlur={event => event.target.value.length === 0 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        className={`form-control  ${props.errors.username ? 'is-invalid' : ''}`}\r\n                                        type=\"text\"\r\n                                        id=\"username\"\r\n                                        onChange={event => props.setModalValues(\"username\", event.target.value)}\r\n                                        value={props.user.username ? props.user.username : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"password\"><Translate name=\"password\"/></Label>\r\n                                    <input\r\n                                        style={{borderColor: status}}\r\n                                        className={`form-control  ${props.errors.password ? 'is-invalid' : ''}`}\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        onBlur={event => event.target.value.length < 6 ? event.target.style.borderColor = '#f44' : event.target.style.borderColor = ''}\r\n                                        // onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? jwt.encode(event.target.value, \"password\") : \"\")}\r\n                                        onChange={event => props.setModalValues(\"password\", event.target.value !== \"\" ? event.target.value : \"\")}\r\n                                        // value={props.user.password ? jwt.decode(props.user.password, \"password\") : \"\"}\r\n                                        value={props.user.password ? props.user.password : \"\"}\r\n\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"position\"><Translate name=\"positions\"/></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        id=\"position\"\r\n                                        value={props.user.position_id || \"0\"}\r\n                                        // defaultValue={\"0\"}\r\n                                        onChange={event => props.setModalValues(\"position_id\", event.target.value)}\r\n                                    >\r\n                                        <option value=\"0\">Ընտրել</option>\r\n                                        {props.positions.map((item, key) => {\r\n                                            return <option value={item.id} key={key}>{item.name}</option>\r\n                                        })}\r\n                                    </Input>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"active\"><Translate name=\"active\"/></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        id=\"active\"\r\n                                        value={props.user.active || \"0\"}\r\n                                        // defaultValue={\"0\"}\r\n                                        onChange={event => props.setModalValues(\"active\", event.target.value)}\r\n                                    >\r\n                                        <option value=\"0\">Այո</option>\r\n                                        <option value=\"1\">Ոչ</option>\r\n                                    </Input>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n\r\n\r\n                    </form>\r\n\r\n                </ModalBody>\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Modal isOpen={props.modal[props.type]} toggle={() => {\r\n                props.toggleModal(props.type)\r\n            }} size=\"lg\">\r\n                <ModalHeader toggle={() => {\r\n                    props.toggleModal(props.type)\r\n                }}><Translate\r\n                    name={props.type + \"User\"}/></ModalHeader>\r\n                {modalBodyContent()}\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        outline\r\n                        type=\"submit\"\r\n                        onClick={function () {\r\n                            if (props.typ !== 'delete' && (props.user.first_name && props.user.first_name.length) && (props.user.last_name && props.user.last_name.length) && (props.user.email && props.user.email.length) && (props.user.username && props.user.username.length) && (props.user.password && props.user.password.length)) {\r\n                                setStatus('')\r\n                                props.userActions(props.type, props.user);\r\n                            } else {\r\n                                setStatus('#f44')\r\n                            }\r\n                            if (props.type === 'delete') {\r\n                                props.userActions(props.type, props.user);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Translate name=\"confirm\"/>\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n        </React.Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default UserModal;"]},"metadata":{},"sourceType":"module"}