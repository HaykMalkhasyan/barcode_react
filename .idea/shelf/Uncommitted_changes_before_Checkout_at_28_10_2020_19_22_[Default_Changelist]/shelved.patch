Index: src/containers/pages/products/filters/classificatorModals/modalContent/modalContent.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState} from 'react'\r\nimport classes from './modalContent.module.css'\r\nimport DeleteModal from \"../../../../../../components/deleteModal/deleteModal\";\r\nimport Backdrop from \"../../../../../../components/UI/backdrop/backdrop\";\r\nimport CustomCheckbox from \"../../../../../../components/UI/input/customCheckbox/customCheckbox\";\r\nimport CustomSearch from \"../../../../../../components/customSearch/customSearch\";\r\nimport CustomInput from \"../../../../../../components/UI/input/customInput/customInput\";\r\nimport HeaderContent from \"./header-content/header-content\";\r\nimport ModalActions from \"./actions/actions\";\r\nimport FooterContent from \"./footer-content/footer-content\";\r\nimport BodyContent from \"./body-content/body-content\";\r\nimport cookie from \"../../../../../../services/cookies\";\r\n\r\nconst ModalContent = props => {\r\n    const [error, setError] = useState(null);\r\n\r\n    const searchChangeHandler = (name, value) => {\r\n        props.searchHandler(name, value)\r\n    };\r\n\r\n    const deleteModalCloseHandler = () => {\r\n        props.setGroupValues('delete', false);\r\n        props.setGroupValues('subgroup', null);\r\n    };\r\n\r\n    const deleteModalConfirmHandler = id => {\r\n        props.deleteSubgroup(id);\r\n        props.setGroupValues('delete', false);\r\n        props.setGroupValues('subgroup', null);\r\n    };\r\n\r\n    const groupNameChangeHandler = (event, type) => {\r\n\r\n        const newGroup = {...props.newGroup};\r\n        const group = {}\r\n        switch (type) {\r\n            case \"title\": {\r\n                setError(null);\r\n                group.id = newGroup.id\r\n                group[event.target.name] = event.target.value;\r\n                props.editGroupAction(event.target.value, group);\r\n                break;\r\n            }\r\n            case \"required_group\": {\r\n                newGroup[event.target.name] = event.target.checked;\r\n                props.setGroupValues('newGroup', newGroup);\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const confirmHandler = () => {\r\n        if (props.classifierName.length > 0) {\r\n            props.editGroup({...props.newGroup}, props.group.id);\r\n        } else {\r\n            setError('Անվանման դաշտը չպետք է դատարկ լինի')\r\n        }\r\n    };\r\n\r\n    /* Actions */\r\n    const onAddSubgroup = (event, id) => {\r\n        event.stopPropagation();\r\n        props.addSubgroupAction(id)\r\n    };\r\n\r\n    const onAddGroup = (event) => {\r\n        event.stopPropagation();\r\n        props.addGroupAction()\r\n    }\r\n\r\n    const onEditSubgroup =  async (event, id) => {\r\n        event.stopPropagation();\r\n        await props.getSubgroup(id, props.catId);\r\n        props.editSubgroupAction();\r\n        console.log(id)\r\n    };\r\n\r\n    const deleteHandler = (event, type, param, id = null) => {\r\n        event.stopPropagation();\r\n        if (id === null) {\r\n            props.deleteClassifiersAction(type, param)\r\n        } else {\r\n            props.deleteClassifiersAction(type, param, id)\r\n        }\r\n    };\r\n\r\n    const moveHandler = (event, id) => {\r\n        event.stopPropagation();\r\n\r\n        props.setGroupValues('moveElement', id);\r\n        props.getSubgroup(id);\r\n    };\r\n\r\n    const cancelMoving = event => {\r\n        event.stopPropagation();\r\n        props.setGroupValues('moveElement', null)\r\n    };\r\n\r\n    const moveIsHer = (event, item) => {\r\n        event.stopPropagation();\r\n\r\n        const subgroup = {...props.subgroup};\r\n        subgroup.active = '1';\r\n        subgroup['group_id'].group_type = '1';\r\n        if (subgroup.image.length > 0 && subgroup.image[0].hasOwnProperty('image')) {\r\n            delete subgroup.image[0].image;\r\n        }\r\n        switch (item.hasOwnProperty('parent_id')) {\r\n            case true: {\r\n                subgroup.parent_id = item.id;\r\n                break;\r\n            }\r\n            case false: {\r\n                subgroup.parent_id = \"\";\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n\r\n        props.editSubgroup(subgroup);\r\n        props.setGroupValues('moveElement', null);\r\n        props.setGroupValues('controllerId', null)\r\n    };\r\n\r\n    const toggleMovingStatus = () => {\r\n        if (props.controllerId !== null) {\r\n            props.setGroupValues('controllerId', null)\r\n        }\r\n        if (props.groupId !== null) {\r\n            props.setGroupValues('groupId', null)\r\n        }\r\n        props.setGroupValues('changePositionStatus', !props.changePositionStatus)\r\n    };\r\n\r\n    const backPageHandler = () => {\r\n        props.setGroupValues(\r\n            \"newGroup\", {\r\n                title_am: '',\r\n                title_ru: '',\r\n                title_en: '',\r\n                required_group: false,\r\n                group_type: '1'\r\n            }\r\n        );\r\n        props.classifierOpenHandler(props.group.id)\r\n    };\r\n\r\n    const deleteModalNameRender = (subgroup, group) => {\r\n        if (subgroup) {\r\n            return subgroup[`name_${cookie.get('language') || \"am\"}`]\r\n        }\r\n        return group[`title_${cookie.get('language') || \"am\"}`]\r\n    }\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            {\r\n                props.delete ?\r\n                    <Backdrop\r\n                        className={classes.backdrop}\r\n                        // Methods\r\n                        onClick={deleteModalCloseHandler}\r\n                    />\r\n                    :\r\n                    null\r\n            }\r\n            <DeleteModal\r\n                open={props.delete}\r\n                groupName={deleteModalNameRender(props.subgroup, props.group)}\r\n                data={props.subgroup}\r\n                alertText={'Դուք չեք կարող ջնջել տվյալ խումբը, քանի որ այն պարունակում է իրեն կից ապրանքատեսականի'}\r\n                information={'Եթե տվյալ խումբը պարունակում է ենթախմբեր, ապա ջնջելով այն կջնջվեն նաև իր բոլոր ենթախմբերը․'}\r\n                question={'Դուք իսկապե՞ս ցանկանում եք ջնջել տվյալ խումբը'}\r\n                cancelButtonName={'Ոչ'}\r\n                confirmButtonName={'Այո'}\r\n                status={props.group ? props.group.required_group : false}\r\n                // Methods\r\n                closeHandler={deleteModalCloseHandler}\r\n                deleteHandler={deleteModalConfirmHandler}\r\n            />\r\n            <HeaderContent\r\n                // Methods\r\n                handleClose={props.handleClose}\r\n                backPageHandler={backPageHandler}\r\n            />\r\n            <section>\r\n                <div className={classes.content}>\r\n                    <div className={classes.nameWindow}>\r\n                        <CustomInput\r\n                            type={'text'}\r\n                            id={'group-title_am'}\r\n                            disabled={props.group && props.group.id === 0}\r\n                            classNameInput={error ? `${classes.nameInput} ${classes.errorField}` : classes.nameInput}\r\n                            classNameLabel={classes.nameLabel}\r\n                            name={'title'}\r\n                            placeholder={'Դասակագիչի անվանում'}\r\n                            value={props.classifierName}\r\n                            // Methods\r\n                            onChange={event => groupNameChangeHandler(event, 'title')}\r\n                        />\r\n                        <CustomCheckbox\r\n                            id={'required_group'}\r\n                            label={'Պարտադիր'}\r\n                            disabled={props.group && props.group.id === 0}\r\n                            labelStyle={classes.labelStyle}\r\n                            checked={props.newGroup.required_group}\r\n                            status={props.newGroup.required_group}\r\n                            name={'required_group'}\r\n                            // Methods\r\n                            onChange={event => groupNameChangeHandler(event, 'required_group')}\r\n                        />\r\n                    </div>\r\n                    <div className={classes.searchWindow}>\r\n                        <ModalActions\r\n                            own_select={props.own_select}\r\n                            controllerId={props.controllerId}\r\n                            groupId={props.groupId}\r\n                            catId={props.catId}\r\n                            // Methods\r\n                            changePositionStatus={props.changePositionStatus}\r\n                            toggleMovingStatus={toggleMovingStatus}\r\n                            moveHandler={moveHandler}\r\n                            onEditSubgroup={onEditSubgroup}\r\n                            onAddSubgroup={onAddSubgroup}\r\n                            onAddGroup={onAddGroup}\r\n                            deleteHandler={deleteHandler}\r\n                        />\r\n                        <div>\r\n                            <CustomSearch\r\n                                drop={false}\r\n                                withButton={false}\r\n                                id={'modalSearch'}\r\n                                type={'search'}\r\n                                name={'search'}\r\n                                value={props.search}\r\n                                placeholder={'Որոնում'}\r\n                                // Methods\r\n                                onChange={event => searchChangeHandler(event.target.name, event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <BodyContent\r\n                        data={props.own_subgroups}\r\n                        search={props.search}\r\n                        group={props.group}\r\n                        groupId={props.groupId}\r\n                        own_move={props.own_move}\r\n                        own_select={props.own_select}\r\n                        type={'edit'}\r\n                        // Methods\r\n                        selectTreeItem={props.selectTreeItem}\r\n                        selectTreeGroupItem={props.selectTreeGroupItem}\r\n                    />\r\n                </div>\r\n            </section>\r\n            <FooterContent\r\n                group={props.group}\r\n                // Methods\r\n                confirmHandler={confirmHandler}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ModalContent
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/containers/pages/products/filters/classificatorModals/modalContent/modalContent.jsx	(revision 99b98f58d3c7f1aaf1250b1611613e18d8edbe23)
+++ src/containers/pages/products/filters/classificatorModals/modalContent/modalContent.jsx	(date 1603898467614)
@@ -77,6 +77,7 @@
         console.log(id)
     };
 
+
     const deleteHandler = (event, type, param, id = null) => {
         event.stopPropagation();
         if (id === null) {
